
import java_swift
import javax_swing
import java_lang
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:52:07 GMT 2016 ///

/// class com.apple.laf.AquaSliderUI ///

open class AquaSliderUI: javax_swing.BasicSliderUI {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "com.apple.laf.AquaSliderUI", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaSliderUIJNIClass: jclass?

    /// protected static final com.apple.laf.AquaUtils$LazySingleton com.apple.laf.AquaSliderUI.roundThumbDescriptor

    /// protected static final com.apple.laf.AquaUtils$LazySingleton com.apple.laf.AquaSliderUI.pointingThumbDescriptor

    /// final com.apple.laf.AquaPainter com.apple.laf.AquaSliderUI.trackPainter

    /// final com.apple.laf.AquaPainter com.apple.laf.AquaSliderUI.thumbPainter

    /// protected java.awt.Color com.apple.laf.AquaSliderUI.tickColor

    private static var tickColor_FieldID: jfieldID?

    open var tickColor: java_awt.Color! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "tickColor", fieldType: "Ljava/awt/Color;", fieldCache: &AquaSliderUI.tickColor_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.Color( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "tickColor", fieldType: "Ljava/awt/Color;", fieldCache: &AquaSliderUI.tickColor_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Color com.apple.laf.AquaSliderUI.disabledTickColor

    private static var disabledTickColor_FieldID: jfieldID?

    open var disabledTickColor: java_awt.Color! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "disabledTickColor", fieldType: "Ljava/awt/Color;", fieldCache: &AquaSliderUI.disabledTickColor_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.Color( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "disabledTickColor", fieldType: "Ljava/awt/Color;", fieldCache: &AquaSliderUI.disabledTickColor_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected transient boolean com.apple.laf.AquaSliderUI.fIsDragging

    private static var fIsDragging_FieldID: jfieldID?

    open var fIsDragging: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "fIsDragging", fieldType: "Z", fieldCache: &AquaSliderUI.fIsDragging_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "fIsDragging", fieldType: "Z", fieldCache: &AquaSliderUI.fIsDragging_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// static final int com.apple.laf.AquaSliderUI.kTickWidth

    /// static final int com.apple.laf.AquaSliderUI.kTickLength

    /// private static final javax.swing.plaf.basic.BasicSliderUI$Actions javax.swing.plaf.basic.BasicSliderUI.SHARED_ACTION

    /// public static final int javax.swing.plaf.basic.BasicSliderUI.POSITIVE_SCROLL

    /// public static final int javax.swing.plaf.basic.BasicSliderUI.NEGATIVE_SCROLL

    /// public static final int javax.swing.plaf.basic.BasicSliderUI.MIN_SCROLL

    /// public static final int javax.swing.plaf.basic.BasicSliderUI.MAX_SCROLL

    /// protected javax.swing.Timer javax.swing.plaf.basic.BasicSliderUI.scrollTimer

    private static var scrollTimer_FieldID: jfieldID?

    override open var scrollTimer: javax_swing.Timer! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "scrollTimer", fieldType: "Ljavax/swing/Timer;", fieldCache: &AquaSliderUI.scrollTimer_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? javax_swing.Timer( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "scrollTimer", fieldType: "Ljavax/swing/Timer;", fieldCache: &AquaSliderUI.scrollTimer_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.JSlider javax.swing.plaf.basic.BasicSliderUI.slider

    private static var slider_FieldID: jfieldID?

    override open var slider: javax_swing.JSlider! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "slider", fieldType: "Ljavax/swing/JSlider;", fieldCache: &AquaSliderUI.slider_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? javax_swing.JSlider( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "slider", fieldType: "Ljavax/swing/JSlider;", fieldCache: &AquaSliderUI.slider_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Insets javax.swing.plaf.basic.BasicSliderUI.focusInsets

    private static var focusInsets_FieldID: jfieldID?

    override open var focusInsets: java_awt.Insets! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "focusInsets", fieldType: "Ljava/awt/Insets;", fieldCache: &AquaSliderUI.focusInsets_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.Insets( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "focusInsets", fieldType: "Ljava/awt/Insets;", fieldCache: &AquaSliderUI.focusInsets_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Insets javax.swing.plaf.basic.BasicSliderUI.insetCache

    private static var insetCache_FieldID: jfieldID?

    override open var insetCache: java_awt.Insets! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "insetCache", fieldType: "Ljava/awt/Insets;", fieldCache: &AquaSliderUI.insetCache_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.Insets( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "insetCache", fieldType: "Ljava/awt/Insets;", fieldCache: &AquaSliderUI.insetCache_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected boolean javax.swing.plaf.basic.BasicSliderUI.leftToRightCache

    private static var leftToRightCache_FieldID: jfieldID?

    override open var leftToRightCache: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "leftToRightCache", fieldType: "Z", fieldCache: &AquaSliderUI.leftToRightCache_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "leftToRightCache", fieldType: "Z", fieldCache: &AquaSliderUI.leftToRightCache_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected java.awt.Rectangle javax.swing.plaf.basic.BasicSliderUI.focusRect

    private static var focusRect_FieldID: jfieldID?

    override open var focusRect: java_awt.Rectangle! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "focusRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &AquaSliderUI.focusRect_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.Rectangle( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "focusRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &AquaSliderUI.focusRect_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Rectangle javax.swing.plaf.basic.BasicSliderUI.contentRect

    private static var contentRect_FieldID: jfieldID?

    override open var contentRect: java_awt.Rectangle! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "contentRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &AquaSliderUI.contentRect_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.Rectangle( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "contentRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &AquaSliderUI.contentRect_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Rectangle javax.swing.plaf.basic.BasicSliderUI.labelRect

    private static var labelRect_FieldID: jfieldID?

    override open var labelRect: java_awt.Rectangle! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "labelRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &AquaSliderUI.labelRect_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.Rectangle( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "labelRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &AquaSliderUI.labelRect_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Rectangle javax.swing.plaf.basic.BasicSliderUI.tickRect

    private static var tickRect_FieldID: jfieldID?

    override open var tickRect: java_awt.Rectangle! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "tickRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &AquaSliderUI.tickRect_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.Rectangle( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "tickRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &AquaSliderUI.tickRect_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Rectangle javax.swing.plaf.basic.BasicSliderUI.trackRect

    private static var trackRect_FieldID: jfieldID?

    override open var trackRect: java_awt.Rectangle! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "trackRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &AquaSliderUI.trackRect_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.Rectangle( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "trackRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &AquaSliderUI.trackRect_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Rectangle javax.swing.plaf.basic.BasicSliderUI.thumbRect

    private static var thumbRect_FieldID: jfieldID?

    override open var thumbRect: java_awt.Rectangle! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "thumbRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &AquaSliderUI.thumbRect_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.Rectangle( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "thumbRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &AquaSliderUI.thumbRect_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int javax.swing.plaf.basic.BasicSliderUI.trackBuffer

    private static var trackBuffer_FieldID: jfieldID?

    override open var trackBuffer: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "trackBuffer", fieldType: "I", fieldCache: &AquaSliderUI.trackBuffer_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "trackBuffer", fieldType: "I", fieldCache: &AquaSliderUI.trackBuffer_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// private transient boolean javax.swing.plaf.basic.BasicSliderUI.isDragging

    /// protected javax.swing.plaf.basic.BasicSliderUI$TrackListener javax.swing.plaf.basic.BasicSliderUI.trackListener

    private static var trackListener_FieldID: jfieldID?

    override open var trackListener: javax_swing.BasicSliderUI_TrackListener! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "trackListener", fieldType: "Ljavax/swing/plaf/basic/BasicSliderUI$TrackListener;", fieldCache: &AquaSliderUI.trackListener_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? javax_swing.BasicSliderUI_TrackListener( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "trackListener", fieldType: "Ljavax/swing/plaf/basic/BasicSliderUI$TrackListener;", fieldCache: &AquaSliderUI.trackListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.event.ChangeListener javax.swing.plaf.basic.BasicSliderUI.changeListener

    private static var changeListener_FieldID: jfieldID?

    override open var changeListener: javax_swing.ChangeListener! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "changeListener", fieldType: "Ljavax/swing/event/ChangeListener;", fieldCache: &AquaSliderUI.changeListener_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? javax_swing.ChangeListenerForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( l: newValue?.localJavaObject( &__locals ) )
            JNIField.SetObjectField( fieldName: "changeListener", fieldType: "Ljavax/swing/event/ChangeListener;", fieldCache: &AquaSliderUI.changeListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.event.ComponentListener javax.swing.plaf.basic.BasicSliderUI.componentListener

    private static var componentListener_FieldID: jfieldID?

    override open var componentListener: java_awt.ComponentListener! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "componentListener", fieldType: "Ljava/awt/event/ComponentListener;", fieldCache: &AquaSliderUI.componentListener_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.ComponentListenerForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( l: newValue?.localJavaObject( &__locals ) )
            JNIField.SetObjectField( fieldName: "componentListener", fieldType: "Ljava/awt/event/ComponentListener;", fieldCache: &AquaSliderUI.componentListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.event.FocusListener javax.swing.plaf.basic.BasicSliderUI.focusListener

    private static var focusListener_FieldID: jfieldID?

    override open var focusListener: java_awt.FocusListener! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "focusListener", fieldType: "Ljava/awt/event/FocusListener;", fieldCache: &AquaSliderUI.focusListener_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.FocusListenerForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( l: newValue?.localJavaObject( &__locals ) )
            JNIField.SetObjectField( fieldName: "focusListener", fieldType: "Ljava/awt/event/FocusListener;", fieldCache: &AquaSliderUI.focusListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.plaf.basic.BasicSliderUI$ScrollListener javax.swing.plaf.basic.BasicSliderUI.scrollListener

    private static var scrollListener_FieldID: jfieldID?

    override open var scrollListener: javax_swing.BasicSliderUI_ScrollListener! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "scrollListener", fieldType: "Ljavax/swing/plaf/basic/BasicSliderUI$ScrollListener;", fieldCache: &AquaSliderUI.scrollListener_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? javax_swing.BasicSliderUI_ScrollListener( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "scrollListener", fieldType: "Ljavax/swing/plaf/basic/BasicSliderUI$ScrollListener;", fieldCache: &AquaSliderUI.scrollListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.beans.PropertyChangeListener javax.swing.plaf.basic.BasicSliderUI.propertyChangeListener

    private static var propertyChangeListener_FieldID: jfieldID?

    override open var propertyChangeListener: /* java.beans.PropertyChangeListener */ UnclassedProtocol! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "propertyChangeListener", fieldType: "Ljava/beans/PropertyChangeListener;", fieldCache: &AquaSliderUI.propertyChangeListener_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? /* java.beans.PropertyChangeListener */ UnclassedProtocolForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( l: newValue?.localJavaObject( &__locals ) )
            JNIField.SetObjectField( fieldName: "propertyChangeListener", fieldType: "Ljava/beans/PropertyChangeListener;", fieldCache: &AquaSliderUI.propertyChangeListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private javax.swing.plaf.basic.BasicSliderUI$Handler javax.swing.plaf.basic.BasicSliderUI.handler

    /// private java.awt.Color javax.swing.plaf.basic.BasicSliderUI.shadowColor

    /// private java.awt.Color javax.swing.plaf.basic.BasicSliderUI.highlightColor

    /// private java.awt.Color javax.swing.plaf.basic.BasicSliderUI.focusColor

    /// private boolean javax.swing.plaf.basic.BasicSliderUI.checkedLabelBaselines

    /// private boolean javax.swing.plaf.basic.BasicSliderUI.sameLabelBaselines

    /// private static java.awt.Rectangle javax.swing.plaf.basic.BasicSliderUI.unionRect

    /// public com.apple.laf.AquaSliderUI(javax.swing.JSlider)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: javax_swing.JSlider? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaSliderUI", classCache: &AquaSliderUI.AquaSliderUIJNIClass, methodSig: "(Ljavax/swing/JSlider;)V", methodCache: &AquaSliderUI.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: javax_swing.JSlider? ) {
        self.init( arg0: _arg0 )
    }

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$100(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$000(com.apple.laf.AquaSliderUI)

    /// static javax.swing.Timer com.apple.laf.AquaSliderUI.access$200(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$300(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$400(com.apple.laf.AquaSliderUI)

    /// apple.laf.JRSUIConstants$State com.apple.laf.AquaSliderUI.getState()

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$500(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$600(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$700(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$800(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$1300(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$1400(com.apple.laf.AquaSliderUI)

    /// static java.awt.Rectangle com.apple.laf.AquaSliderUI.access$1000(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$900(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$1200(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$1500(com.apple.laf.AquaSliderUI)

    /// static java.awt.Rectangle com.apple.laf.AquaSliderUI.access$1700(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$1600(com.apple.laf.AquaSliderUI)

    /// static boolean com.apple.laf.AquaSliderUI.access$2200(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$2400(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$2500(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$1100(com.apple.laf.AquaSliderUI)

    /// public void com.apple.laf.AquaSliderUI.installUI(javax.swing.JComponent)

    /// public void com.apple.laf.AquaSliderUI.paint(java.awt.Graphics,javax.swing.JComponent)

    /// static java.awt.Rectangle com.apple.laf.AquaSliderUI.access$1800(com.apple.laf.AquaSliderUI)

    /// static java.awt.Rectangle com.apple.laf.AquaSliderUI.access$1900(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$2000(com.apple.laf.AquaSliderUI)

    /// static boolean com.apple.laf.AquaSliderUI.access$2100(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$2600(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$2700(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$2800(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$2900(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$3000(com.apple.laf.AquaSliderUI)

    /// static java.awt.Rectangle com.apple.laf.AquaSliderUI.access$3100(com.apple.laf.AquaSliderUI)

    /// static java.awt.Rectangle com.apple.laf.AquaSliderUI.access$3200(com.apple.laf.AquaSliderUI)

    /// static java.awt.Rectangle com.apple.laf.AquaSliderUI.access$3300(com.apple.laf.AquaSliderUI)

    /// static java.awt.Rectangle com.apple.laf.AquaSliderUI.access$3400(com.apple.laf.AquaSliderUI)

    /// protected javax.swing.event.ChangeListener com.apple.laf.AquaSliderUI.createChangeListener(javax.swing.JSlider)

    private static var createChangeListener_MethodID_2: jmethodID?

    override open func createChangeListener( arg0: javax_swing.JSlider? ) -> javax_swing.ChangeListener! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createChangeListener", methodSig: "(Ljavax/swing/JSlider;)Ljavax/swing/event/ChangeListener;", methodCache: &AquaSliderUI.createChangeListener_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.ChangeListenerForward( javaObject: __return ) : nil
    }

    override open func createChangeListener( _ _arg0: javax_swing.JSlider? ) -> javax_swing.ChangeListener! {
        return createChangeListener( arg0: _arg0 )
    }

    /// public static javax.swing.plaf.ComponentUI com.apple.laf.AquaSliderUI.createUI(javax.swing.JComponent)

    private static var createUI_MethodID_3: jmethodID?

    override open class func createUI( arg0: javax_swing.JComponent? ) -> javax_swing.ComponentUI! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaSliderUI", classCache: &AquaSliderUIJNIClass, methodName: "createUI", methodSig: "(Ljavax/swing/JComponent;)Ljavax/swing/plaf/ComponentUI;", methodCache: &createUI_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.ComponentUI( javaObject: __return ) : nil
    }

    override open class func createUI( _ _arg0: javax_swing.JComponent? ) -> javax_swing.ComponentUI! {
        return createUI( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaSliderUI.applySizeFor(javax.swing.JComponent,apple.laf.JRSUIConstants$Size)

    private static var applySizeFor_MethodID_4: jmethodID?

    open func applySizeFor( arg0: javax_swing.JComponent?, arg1: /* apple.laf.JRSUIConstants$Size */ UnclassedObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "applySizeFor", methodSig: "(Ljavax/swing/JComponent;Lapple/laf/JRSUIConstants$Size;)V", methodCache: &AquaSliderUI.applySizeFor_MethodID_4, args: &__args, locals: &__locals )
    }

    open func applySizeFor( _ _arg0: javax_swing.JComponent?, _ _arg1: /* apple.laf.JRSUIConstants$Size */ UnclassedObject? ) {
        applySizeFor( arg0: _arg0, arg1: _arg1 )
    }

    /// protected void com.apple.laf.AquaSliderUI.installListeners(javax.swing.JSlider)

    private static var installListeners_MethodID_5: jmethodID?

    override open func installListeners( arg0: javax_swing.JSlider? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installListeners", methodSig: "(Ljavax/swing/JSlider;)V", methodCache: &AquaSliderUI.installListeners_MethodID_5, args: &__args, locals: &__locals )
    }

    override open func installListeners( _ _arg0: javax_swing.JSlider? ) {
        installListeners( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaSliderUI.uninstallListeners(javax.swing.JSlider)

    private static var uninstallListeners_MethodID_6: jmethodID?

    override open func uninstallListeners( arg0: javax_swing.JSlider? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallListeners", methodSig: "(Ljavax/swing/JSlider;)V", methodCache: &AquaSliderUI.uninstallListeners_MethodID_6, args: &__args, locals: &__locals )
    }

    override open func uninstallListeners( _ _arg0: javax_swing.JSlider? ) {
        uninstallListeners( arg0: _arg0 )
    }

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$2300(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$3500(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$3600(com.apple.laf.AquaSliderUI)

    /// static int com.apple.laf.AquaSliderUI.access$3700(com.apple.laf.AquaSliderUI,int)

    /// static boolean com.apple.laf.AquaSliderUI.access$3800(com.apple.laf.AquaSliderUI)

    /// static java.awt.Rectangle com.apple.laf.AquaSliderUI.access$3900(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$4000(com.apple.laf.AquaSliderUI)

    /// static java.awt.Rectangle com.apple.laf.AquaSliderUI.access$4100(com.apple.laf.AquaSliderUI)

    /// static java.awt.Rectangle com.apple.laf.AquaSliderUI.access$4200(com.apple.laf.AquaSliderUI)

    /// static java.awt.Rectangle com.apple.laf.AquaSliderUI.access$4300(com.apple.laf.AquaSliderUI)

    /// static java.awt.Rectangle com.apple.laf.AquaSliderUI.access$4400(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$4500(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$4600(com.apple.laf.AquaSliderUI)

    /// static int com.apple.laf.AquaSliderUI.access$4700(com.apple.laf.AquaSliderUI,int)

    /// static boolean com.apple.laf.AquaSliderUI.access$4800(com.apple.laf.AquaSliderUI)

    /// static java.awt.Rectangle com.apple.laf.AquaSliderUI.access$4900(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$5000(com.apple.laf.AquaSliderUI)

    /// static javax.swing.JSlider com.apple.laf.AquaSliderUI.access$5100(com.apple.laf.AquaSliderUI)

    /// static java.awt.Rectangle com.apple.laf.AquaSliderUI.access$5200(com.apple.laf.AquaSliderUI)

    /// static java.awt.Rectangle com.apple.laf.AquaSliderUI.access$5300(com.apple.laf.AquaSliderUI)

    /// public java.awt.Dimension com.apple.laf.AquaSliderUI.getPreferredHorizontalSize()

    /// public java.awt.Dimension com.apple.laf.AquaSliderUI.getPreferredVerticalSize()

    /// protected javax.swing.plaf.basic.BasicSliderUI$TrackListener com.apple.laf.AquaSliderUI.createTrackListener(javax.swing.JSlider)

    private static var createTrackListener_MethodID_7: jmethodID?

    override open func createTrackListener( arg0: javax_swing.JSlider? ) -> javax_swing.BasicSliderUI_TrackListener! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createTrackListener", methodSig: "(Ljavax/swing/JSlider;)Ljavax/swing/plaf/basic/BasicSliderUI$TrackListener;", methodCache: &AquaSliderUI.createTrackListener_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.BasicSliderUI_TrackListener( javaObject: __return ) : nil
    }

    override open func createTrackListener( _ _arg0: javax_swing.JSlider? ) -> javax_swing.BasicSliderUI_TrackListener! {
        return createTrackListener( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaSliderUI.calculateThumbLocation()

    private static var calculateThumbLocation_MethodID_8: jmethodID?

    override open func calculateThumbLocation() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "calculateThumbLocation", methodSig: "()V", methodCache: &AquaSliderUI.calculateThumbLocation_MethodID_8, args: &__args, locals: &__locals )
    }


    /// public void com.apple.laf.AquaSliderUI.paintTrack(java.awt.Graphics,javax.swing.JComponent,apple.laf.JRSUIConstants$Orientation,apple.laf.JRSUIConstants$State)

    private static var paintTrack_MethodID_9: jmethodID?

    open func paintTrack( arg0: java_awt.Graphics?, arg1: javax_swing.JComponent?, arg2: /* apple.laf.JRSUIConstants$Orientation */ UnclassedObject?, arg3: /* apple.laf.JRSUIConstants$State */ UnclassedObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintTrack", methodSig: "(Ljava/awt/Graphics;Ljavax/swing/JComponent;Lapple/laf/JRSUIConstants$Orientation;Lapple/laf/JRSUIConstants$State;)V", methodCache: &AquaSliderUI.paintTrack_MethodID_9, args: &__args, locals: &__locals )
    }

    open func paintTrack( _ _arg0: java_awt.Graphics?, _ _arg1: javax_swing.JComponent?, _ _arg2: /* apple.laf.JRSUIConstants$Orientation */ UnclassedObject?, _ _arg3: /* apple.laf.JRSUIConstants$State */ UnclassedObject? ) {
        paintTrack( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public void com.apple.laf.AquaSliderUI.paintThumb(java.awt.Graphics,javax.swing.JComponent,apple.laf.JRSUIConstants$Orientation,apple.laf.JRSUIConstants$State)

    private static var paintThumb_MethodID_10: jmethodID?

    open func paintThumb( arg0: java_awt.Graphics?, arg1: javax_swing.JComponent?, arg2: /* apple.laf.JRSUIConstants$Orientation */ UnclassedObject?, arg3: /* apple.laf.JRSUIConstants$State */ UnclassedObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintThumb", methodSig: "(Ljava/awt/Graphics;Ljavax/swing/JComponent;Lapple/laf/JRSUIConstants$Orientation;Lapple/laf/JRSUIConstants$State;)V", methodCache: &AquaSliderUI.paintThumb_MethodID_10, args: &__args, locals: &__locals )
    }

    open func paintThumb( _ _arg0: java_awt.Graphics?, _ _arg1: javax_swing.JComponent?, _ _arg2: /* apple.laf.JRSUIConstants$Orientation */ UnclassedObject?, _ _arg3: /* apple.laf.JRSUIConstants$State */ UnclassedObject? ) {
        paintThumb( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// apple.laf.JRSUIConstants$Direction com.apple.laf.AquaSliderUI.getDirection(apple.laf.JRSUIConstants$Orientation)

    /// public void com.apple.laf.AquaSliderUI.paintTicks(java.awt.Graphics)

    /// protected void com.apple.laf.AquaSliderUI.calculateThumbSize()

    private static var calculateThumbSize_MethodID_11: jmethodID?

    override open func calculateThumbSize() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "calculateThumbSize", methodSig: "()V", methodCache: &AquaSliderUI.calculateThumbSize_MethodID_11, args: &__args, locals: &__locals )
    }


    /// protected boolean com.apple.laf.AquaSliderUI.shouldUseArrowThumb()

    private static var shouldUseArrowThumb_MethodID_12: jmethodID?

    open func shouldUseArrowThumb() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "shouldUseArrowThumb", methodSig: "()Z", methodCache: &AquaSliderUI.shouldUseArrowThumb_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// protected void com.apple.laf.AquaSliderUI.calculateTickRect()

    private static var calculateTickRect_MethodID_13: jmethodID?

    override open func calculateTickRect() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "calculateTickRect", methodSig: "()V", methodCache: &AquaSliderUI.calculateTickRect_MethodID_13, args: &__args, locals: &__locals )
    }


    /// int com.apple.laf.AquaSliderUI.getScale()

}
