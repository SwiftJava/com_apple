
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home ///
/// Fri Aug 04 11:17:07 BST 2017 ///

/// class com.apple.concurrent.Dispatch ///

open class Dispatch: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DispatchJNIClass: jclass?

    /// static final com.apple.concurrent.Dispatch com.apple.concurrent.Dispatch.instance

    /// int com.apple.concurrent.Dispatch.queueIndex

    /// java.util.concurrent.Executor com.apple.concurrent.Dispatch.nonBlockingMainQueue

    /// java.util.concurrent.Executor com.apple.concurrent.Dispatch.blockingMainQueue

    /// private com.apple.concurrent.Dispatch()

    /// public static com.apple.concurrent.Dispatch com.apple.concurrent.Dispatch.getInstance()

    private static var getInstance_MethodID_1: jmethodID?

    open class func getInstance() -> Dispatch! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/concurrent/Dispatch", classCache: &DispatchJNIClass, methodName: "getInstance", methodSig: "()Lcom/apple/concurrent/Dispatch;", methodCache: &getInstance_MethodID_1, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dispatch( javaObject: __return ) : nil
    }


    /// private static void com.apple.concurrent.Dispatch.checkSecurity()

    /// public java.util.concurrent.Executor com.apple.concurrent.Dispatch.getAsyncExecutor(com.apple.concurrent.Dispatch$Priority)

    private static var getAsyncExecutor_MethodID_2: jmethodID?

    open func getAsyncExecutor( arg0: Dispatch_Priority? ) -> java_util.Executor! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0 != nil ? arg0! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAsyncExecutor", methodSig: "(Lcom/apple/concurrent/Dispatch$Priority;)Ljava/util/concurrent/Executor;", methodCache: &Dispatch.getAsyncExecutor_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_util.ExecutorForward( javaObject: __return ) : nil
    }

    open func getAsyncExecutor( _ _arg0: Dispatch_Priority? ) -> java_util.Executor! {
        return getAsyncExecutor( arg0: _arg0 )
    }

    /// public java.util.concurrent.ExecutorService com.apple.concurrent.Dispatch.createSerialExecutor(java.lang.String)

    private static var createSerialExecutor_MethodID_3: jmethodID?

    open func createSerialExecutor( arg0: String? ) -> java_util.ExecutorService! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createSerialExecutor", methodSig: "(Ljava/lang/String;)Ljava/util/concurrent/ExecutorService;", methodCache: &Dispatch.createSerialExecutor_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_util.ExecutorServiceForward( javaObject: __return ) : nil
    }

    open func createSerialExecutor( _ _arg0: String? ) -> java_util.ExecutorService! {
        return createSerialExecutor( arg0: _arg0 )
    }

    /// public synchronized java.util.concurrent.Executor com.apple.concurrent.Dispatch.getNonBlockingMainQueueExecutor()

    private static var getNonBlockingMainQueueExecutor_MethodID_4: jmethodID?

    open func getNonBlockingMainQueueExecutor() -> java_util.Executor! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getNonBlockingMainQueueExecutor", methodSig: "()Ljava/util/concurrent/Executor;", methodCache: &Dispatch.getNonBlockingMainQueueExecutor_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_util.ExecutorForward( javaObject: __return ) : nil
    }


    /// public synchronized java.util.concurrent.Executor com.apple.concurrent.Dispatch.getBlockingMainQueueExecutor()

    private static var getBlockingMainQueueExecutor_MethodID_5: jmethodID?

    open func getBlockingMainQueueExecutor() -> java_util.Executor! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBlockingMainQueueExecutor", methodSig: "()Ljava/util/concurrent/Executor;", methodCache: &Dispatch.getBlockingMainQueueExecutor_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_util.ExecutorForward( javaObject: __return ) : nil
    }


}

