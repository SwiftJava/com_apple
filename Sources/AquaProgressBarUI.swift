
import java_swift
import javax_swing
import java_util
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home ///
/// Tue Aug 08 14:27:28 BST 2017 ///

/// class com.apple.laf.AquaProgressBarUI ///

open class AquaProgressBarUI: javax_swing.ProgressBarUI, javax_swing.ChangeListener, /* java.beans.PropertyChangeListener */ UnclassedProtocol, javax_swing.AncestorListener {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaProgressBarUIJNIClass: jclass?

    /// private static final boolean com.apple.laf.AquaProgressBarUI.ADJUSTTIMER

    /// protected static final com.apple.laf.AquaUtils$RecyclableSingleton com.apple.laf.AquaProgressBarUI.sizeDescriptor

    /// protected apple.laf.JRSUIConstants$Size com.apple.laf.AquaProgressBarUI.sizeVariant

    private static var sizeVariant_FieldID: jfieldID?

    open var sizeVariant: /* apple.laf.JRSUIConstants$Size */ UnclassedObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "sizeVariant", fieldType: "Lapple/laf/JRSUIConstants$Size;", fieldCache: &AquaProgressBarUI.sizeVariant_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? /* apple.laf.JRSUIConstants$Size */ UnclassedObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "sizeVariant", fieldType: "Lapple/laf/JRSUIConstants$Size;", fieldCache: &AquaProgressBarUI.sizeVariant_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Color com.apple.laf.AquaProgressBarUI.selectionForeground

    private static var selectionForeground_FieldID: jfieldID?

    open var selectionForeground: java_awt.Color! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "selectionForeground", fieldType: "Ljava/awt/Color;", fieldCache: &AquaProgressBarUI.selectionForeground_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.Color( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "selectionForeground", fieldType: "Ljava/awt/Color;", fieldCache: &AquaProgressBarUI.selectionForeground_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private com.apple.laf.AquaProgressBarUI$Animator com.apple.laf.AquaProgressBarUI.animator

    /// protected boolean com.apple.laf.AquaProgressBarUI.isAnimating

    private static var isAnimating_FieldID: jfieldID?

    open var isAnimating: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "isAnimating", fieldType: "Z", fieldCache: &AquaProgressBarUI.isAnimating_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "isAnimating", fieldType: "Z", fieldCache: &AquaProgressBarUI.isAnimating_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected boolean com.apple.laf.AquaProgressBarUI.isCircular

    private static var isCircular_FieldID: jfieldID?

    open var isCircular: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "isCircular", fieldType: "Z", fieldCache: &AquaProgressBarUI.isCircular_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "isCircular", fieldType: "Z", fieldCache: &AquaProgressBarUI.isCircular_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected final com.apple.laf.AquaPainter com.apple.laf.AquaProgressBarUI.painter

    private static var painter_FieldID: jfieldID?

    open var painter: /* com.apple.laf.AquaPainter */ UnclassedObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "painter", fieldType: "Lcom/apple/laf/AquaPainter;", fieldCache: &AquaProgressBarUI.painter_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? /* com.apple.laf.AquaPainter */ UnclassedObject( javaObject: __value ) : nil
        }
    }

    /// protected javax.swing.JProgressBar com.apple.laf.AquaProgressBarUI.progressBar

    private static var progressBar_FieldID: jfieldID?

    open var progressBar: javax_swing.JProgressBar! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "progressBar", fieldType: "Ljavax/swing/JProgressBar;", fieldCache: &AquaProgressBarUI.progressBar_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? javax_swing.JProgressBar( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "progressBar", fieldType: "Ljavax/swing/JProgressBar;", fieldCache: &AquaProgressBarUI.progressBar_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private final java.awt.Rectangle com.apple.laf.AquaProgressBarUI.fUpdateArea

    /// private final java.awt.Dimension com.apple.laf.AquaProgressBarUI.fLastSize

    /// protected com.apple.laf.AquaProgressBarUI()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaProgressBarUI", classCache: &AquaProgressBarUI.AquaProgressBarUIJNIClass, methodSig: "()V", methodCache: &AquaProgressBarUI.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// protected apple.laf.JRSUIConstants$State com.apple.laf.AquaProgressBarUI.getState(javax.swing.JComponent)

    private static var getState_MethodID_2: jmethodID?

    open func getState( arg0: javax_swing.JComponent? ) -> /* apple.laf.JRSUIConstants$State */ UnclassedObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getState", methodSig: "(Ljavax/swing/JComponent;)Lapple/laf/JRSUIConstants$State;", methodCache: &AquaProgressBarUI.getState_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* apple.laf.JRSUIConstants$State */ UnclassedObject( javaObject: __return ) : nil
    }

    open func getState( _ _arg0: javax_swing.JComponent? ) -> /* apple.laf.JRSUIConstants$State */ UnclassedObject! {
        return getState( arg0: _arg0 )
    }

    /// static com.apple.laf.AquaUtilControlSize$SizeDescriptor com.apple.laf.AquaProgressBarUI.getSizeDescriptor()

    /// static double com.apple.laf.AquaProgressBarUI.checkValue(double)

    /// protected void com.apple.laf.AquaProgressBarUI.paintString(java.awt.Graphics,int,int,int,int)

    private static var paintString_MethodID_3: jmethodID?

    open func paintString( arg0: java_awt.Graphics?, arg1: Int, arg2: Int, arg3: Int, arg4: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        __args[3] = JNIType.toJava( value: arg3, locals: &__locals )
        __args[4] = JNIType.toJava( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintString", methodSig: "(Ljava/awt/Graphics;IIII)V", methodCache: &AquaProgressBarUI.paintString_MethodID_3, args: &__args, locals: &__locals )
    }

    open func paintString( _ _arg0: java_awt.Graphics?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int ) {
        paintString( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// protected java.awt.Point com.apple.laf.AquaProgressBarUI.getStringPlacement(java.awt.Graphics,java.lang.String,int,int,int,int)

    private static var getStringPlacement_MethodID_4: jmethodID?

    open func getStringPlacement( arg0: java_awt.Graphics?, arg1: String?, arg2: Int, arg3: Int, arg4: Int, arg5: Int ) -> java_awt.Point! {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        __args[3] = JNIType.toJava( value: arg3, locals: &__locals )
        __args[4] = JNIType.toJava( value: arg4, locals: &__locals )
        __args[5] = JNIType.toJava( value: arg5, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getStringPlacement", methodSig: "(Ljava/awt/Graphics;Ljava/lang/String;IIII)Ljava/awt/Point;", methodCache: &AquaProgressBarUI.getStringPlacement_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Point( javaObject: __return ) : nil
    }

    open func getStringPlacement( _ _arg0: java_awt.Graphics?, _ _arg1: String?, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int ) -> java_awt.Point! {
        return getStringPlacement( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// static java.awt.Dimension com.apple.laf.AquaProgressBarUI.getCircularPreferredSize()

    /// protected java.awt.Dimension com.apple.laf.AquaProgressBarUI.getPreferredHorizontalSize(java.awt.FontMetrics)

    private static var getPreferredHorizontalSize_MethodID_5: jmethodID?

    open func getPreferredHorizontalSize( arg0: java_awt.FontMetrics? ) -> java_awt.Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPreferredHorizontalSize", methodSig: "(Ljava/awt/FontMetrics;)Ljava/awt/Dimension;", methodCache: &AquaProgressBarUI.getPreferredHorizontalSize_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }

    open func getPreferredHorizontalSize( _ _arg0: java_awt.FontMetrics? ) -> java_awt.Dimension! {
        return getPreferredHorizontalSize( arg0: _arg0 )
    }

    /// protected java.awt.Dimension com.apple.laf.AquaProgressBarUI.getPreferredVerticalSize(java.awt.FontMetrics)

    private static var getPreferredVerticalSize_MethodID_6: jmethodID?

    open func getPreferredVerticalSize( arg0: java_awt.FontMetrics? ) -> java_awt.Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPreferredVerticalSize", methodSig: "(Ljava/awt/FontMetrics;)Ljava/awt/Dimension;", methodCache: &AquaProgressBarUI.getPreferredVerticalSize_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }

    open func getPreferredVerticalSize( _ _arg0: java_awt.FontMetrics? ) -> java_awt.Dimension! {
        return getPreferredVerticalSize( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaProgressBarUI.startAnimationTimer()

    private static var startAnimationTimer_MethodID_7: jmethodID?

    open func startAnimationTimer() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "startAnimationTimer", methodSig: "()V", methodCache: &AquaProgressBarUI.startAnimationTimer_MethodID_7, args: &__args, locals: &__locals )
    }


    /// protected void com.apple.laf.AquaProgressBarUI.stopAnimationTimer()

    private static var stopAnimationTimer_MethodID_8: jmethodID?

    open func stopAnimationTimer() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "stopAnimationTimer", methodSig: "()V", methodCache: &AquaProgressBarUI.stopAnimationTimer_MethodID_8, args: &__args, locals: &__locals )
    }


    /// protected java.awt.Rectangle com.apple.laf.AquaProgressBarUI.getRepaintRect()

    private static var getRepaintRect_MethodID_9: jmethodID?

    open func getRepaintRect() -> java_awt.Rectangle! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getRepaintRect", methodSig: "()Ljava/awt/Rectangle;", methodCache: &AquaProgressBarUI.getRepaintRect_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Rectangle( javaObject: __return ) : nil
    }


    /// protected int com.apple.laf.AquaProgressBarUI.getMaxProgressBarHeight()

    private static var getMaxProgressBarHeight_MethodID_10: jmethodID?

    open func getMaxProgressBarHeight() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getMaxProgressBarHeight", methodSig: "()I", methodCache: &AquaProgressBarUI.getMaxProgressBarHeight_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// protected boolean com.apple.laf.AquaProgressBarUI.isHorizontal()

    private static var isHorizontal_MethodID_11: jmethodID?

    open func isHorizontal() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isHorizontal", methodSig: "()Z", methodCache: &AquaProgressBarUI.isHorizontal_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// protected void com.apple.laf.AquaProgressBarUI.revalidateAnimationTimers()

    private static var revalidateAnimationTimers_MethodID_12: jmethodID?

    open func revalidateAnimationTimers() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "revalidateAnimationTimers", methodSig: "()V", methodCache: &AquaProgressBarUI.revalidateAnimationTimers_MethodID_12, args: &__args, locals: &__locals )
    }


    /// public void com.apple.laf.AquaProgressBarUI.ancestorMoved(javax.swing.event.AncestorEvent)

    private static var ancestorMoved_MethodID_13: jmethodID?

    open func ancestorMoved( event: javax_swing.AncestorEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: event, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "ancestorMoved", methodSig: "(Ljavax/swing/event/AncestorEvent;)V", methodCache: &AquaProgressBarUI.ancestorMoved_MethodID_13, args: &__args, locals: &__locals )
    }

    open func ancestorMoved( _ _event: javax_swing.AncestorEvent? ) {
        ancestorMoved( event: _event )
    }

    /// public java.awt.Dimension com.apple.laf.AquaProgressBarUI.getPreferredSize(javax.swing.JComponent)

    private static var getPreferredSize_MethodID_14: jmethodID?

    open func getPreferredSize( arg0: javax_swing.JComponent? ) -> java_awt.Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPreferredSize", methodSig: "(Ljavax/swing/JComponent;)Ljava/awt/Dimension;", methodCache: &AquaProgressBarUI.getPreferredSize_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }

    override open func getPreferredSize( _ _arg0: javax_swing.JComponent? ) -> java_awt.Dimension! {
        return getPreferredSize( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaProgressBarUI.repaint()

    private static var repaint_MethodID_15: jmethodID?

    open func repaint() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "repaint", methodSig: "()V", methodCache: &AquaProgressBarUI.repaint_MethodID_15, args: &__args, locals: &__locals )
    }


    /// public void com.apple.laf.AquaProgressBarUI.installUI(javax.swing.JComponent)

    private static var installUI_MethodID_16: jmethodID?

    open func installUI( arg0: javax_swing.JComponent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installUI", methodSig: "(Ljavax/swing/JComponent;)V", methodCache: &AquaProgressBarUI.installUI_MethodID_16, args: &__args, locals: &__locals )
    }

    override open func installUI( _ _arg0: javax_swing.JComponent? ) {
        installUI( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaProgressBarUI.paint(java.awt.Graphics,javax.swing.JComponent)

    private static var paint_MethodID_17: jmethodID?

    open func paint( arg0: java_awt.Graphics?, arg1: javax_swing.JComponent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paint", methodSig: "(Ljava/awt/Graphics;Ljavax/swing/JComponent;)V", methodCache: &AquaProgressBarUI.paint_MethodID_17, args: &__args, locals: &__locals )
    }

    override open func paint( _ _arg0: java_awt.Graphics?, _ _arg1: javax_swing.JComponent? ) {
        paint( arg0: _arg0, arg1: _arg1 )
    }

    /// protected void com.apple.laf.AquaProgressBarUI.paint(java.awt.Graphics)

    private static var paint_MethodID_18: jmethodID?

    open func paint( arg0: java_awt.Graphics? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paint", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &AquaProgressBarUI.paint_MethodID_18, args: &__args, locals: &__locals )
    }

    open func paint( _ _arg0: java_awt.Graphics? ) {
        paint( arg0: _arg0 )
    }

    /// public java.awt.Dimension com.apple.laf.AquaProgressBarUI.getMaximumSize(javax.swing.JComponent)

    private static var getMaximumSize_MethodID_19: jmethodID?

    open func getMaximumSize( arg0: javax_swing.JComponent? ) -> java_awt.Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMaximumSize", methodSig: "(Ljavax/swing/JComponent;)Ljava/awt/Dimension;", methodCache: &AquaProgressBarUI.getMaximumSize_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }

    override open func getMaximumSize( _ _arg0: javax_swing.JComponent? ) -> java_awt.Dimension! {
        return getMaximumSize( arg0: _arg0 )
    }

    /// public java.awt.Dimension com.apple.laf.AquaProgressBarUI.getMinimumSize(javax.swing.JComponent)

    private static var getMinimumSize_MethodID_20: jmethodID?

    open func getMinimumSize( arg0: javax_swing.JComponent? ) -> java_awt.Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMinimumSize", methodSig: "(Ljavax/swing/JComponent;)Ljava/awt/Dimension;", methodCache: &AquaProgressBarUI.getMinimumSize_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }

    override open func getMinimumSize( _ _arg0: javax_swing.JComponent? ) -> java_awt.Dimension! {
        return getMinimumSize( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaProgressBarUI.uninstallUI(javax.swing.JComponent)

    private static var uninstallUI_MethodID_21: jmethodID?

    open func uninstallUI( arg0: javax_swing.JComponent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallUI", methodSig: "(Ljavax/swing/JComponent;)V", methodCache: &AquaProgressBarUI.uninstallUI_MethodID_21, args: &__args, locals: &__locals )
    }

    override open func uninstallUI( _ _arg0: javax_swing.JComponent? ) {
        uninstallUI( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaProgressBarUI.propertyChange(java.beans.PropertyChangeEvent)

    private static var propertyChange_MethodID_22: jmethodID?

    open func propertyChange( evt: /* java.beans.PropertyChangeEvent */ UnclassedObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: evt, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "propertyChange", methodSig: "(Ljava/beans/PropertyChangeEvent;)V", methodCache: &AquaProgressBarUI.propertyChange_MethodID_22, args: &__args, locals: &__locals )
    }

    open func propertyChange( _ _evt: /* java.beans.PropertyChangeEvent */ UnclassedObject? ) {
        propertyChange( evt: _evt )
    }

    /// public void com.apple.laf.AquaProgressBarUI.stateChanged(javax.swing.event.ChangeEvent)

    private static var stateChanged_MethodID_23: jmethodID?

    open func stateChanged( e: javax_swing.ChangeEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "stateChanged", methodSig: "(Ljavax/swing/event/ChangeEvent;)V", methodCache: &AquaProgressBarUI.stateChanged_MethodID_23, args: &__args, locals: &__locals )
    }

    open func stateChanged( _ _e: javax_swing.ChangeEvent? ) {
        stateChanged( e: _e )
    }

    /// public static javax.swing.plaf.ComponentUI com.apple.laf.AquaProgressBarUI.createUI(javax.swing.JComponent)

    private static var createUI_MethodID_24: jmethodID?

    open class func createUI( arg0: javax_swing.JComponent? ) -> javax_swing.ComponentUI! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaProgressBarUI", classCache: &AquaProgressBarUIJNIClass, methodName: "createUI", methodSig: "(Ljavax/swing/JComponent;)Ljavax/swing/plaf/ComponentUI;", methodCache: &createUI_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.ComponentUI( javaObject: __return ) : nil
    }

    override open class func createUI( _ _arg0: javax_swing.JComponent? ) -> javax_swing.ComponentUI! {
        return createUI( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaProgressBarUI.applySizeFor(javax.swing.JComponent,apple.laf.JRSUIConstants$Size)

    private static var applySizeFor_MethodID_25: jmethodID?

    open func applySizeFor( arg0: javax_swing.JComponent?, arg1: /* apple.laf.JRSUIConstants$Size */ UnclassedObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "applySizeFor", methodSig: "(Ljavax/swing/JComponent;Lapple/laf/JRSUIConstants$Size;)V", methodCache: &AquaProgressBarUI.applySizeFor_MethodID_25, args: &__args, locals: &__locals )
    }

    open func applySizeFor( _ _arg0: javax_swing.JComponent?, _ _arg1: /* apple.laf.JRSUIConstants$Size */ UnclassedObject? ) {
        applySizeFor( arg0: _arg0, arg1: _arg1 )
    }

    /// protected void com.apple.laf.AquaProgressBarUI.installDefaults()

    private static var installDefaults_MethodID_26: jmethodID?

    open func installDefaults() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installDefaults", methodSig: "()V", methodCache: &AquaProgressBarUI.installDefaults_MethodID_26, args: &__args, locals: &__locals )
    }


    /// protected void com.apple.laf.AquaProgressBarUI.installListeners()

    private static var installListeners_MethodID_27: jmethodID?

    open func installListeners() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installListeners", methodSig: "()V", methodCache: &AquaProgressBarUI.installListeners_MethodID_27, args: &__args, locals: &__locals )
    }


    /// protected void com.apple.laf.AquaProgressBarUI.uninstallListeners()

    private static var uninstallListeners_MethodID_28: jmethodID?

    open func uninstallListeners() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallListeners", methodSig: "()V", methodCache: &AquaProgressBarUI.uninstallListeners_MethodID_28, args: &__args, locals: &__locals )
    }


    /// protected void com.apple.laf.AquaProgressBarUI.uninstallDefaults()

    private static var uninstallDefaults_MethodID_29: jmethodID?

    open func uninstallDefaults() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallDefaults", methodSig: "()V", methodCache: &AquaProgressBarUI.uninstallDefaults_MethodID_29, args: &__args, locals: &__locals )
    }


    /// public void com.apple.laf.AquaProgressBarUI.ancestorAdded(javax.swing.event.AncestorEvent)

    private static var ancestorAdded_MethodID_30: jmethodID?

    open func ancestorAdded( event: javax_swing.AncestorEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: event, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "ancestorAdded", methodSig: "(Ljavax/swing/event/AncestorEvent;)V", methodCache: &AquaProgressBarUI.ancestorAdded_MethodID_30, args: &__args, locals: &__locals )
    }

    open func ancestorAdded( _ _event: javax_swing.AncestorEvent? ) {
        ancestorAdded( event: _event )
    }

    /// public void com.apple.laf.AquaProgressBarUI.ancestorRemoved(javax.swing.event.AncestorEvent)

    private static var ancestorRemoved_MethodID_31: jmethodID?

    open func ancestorRemoved( event: javax_swing.AncestorEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: event, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "ancestorRemoved", methodSig: "(Ljavax/swing/event/AncestorEvent;)V", methodCache: &AquaProgressBarUI.ancestorRemoved_MethodID_31, args: &__args, locals: &__locals )
    }

    open func ancestorRemoved( _ _event: javax_swing.AncestorEvent? ) {
        ancestorRemoved( event: _event )
    }

}

