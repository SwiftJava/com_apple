
import java_swift
import java_awt
import java_util
import javax_swing

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class com.apple.laf.AquaFocusHandler ///

open class AquaFocusHandler: java_swift.JavaObject, java_awt.FocusListener, /* interface java.beans.PropertyChangeListener */ UnavailableProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaFocusHandlerJNIClass: jclass?

    /// protected static final java.lang.String com.apple.laf.AquaFocusHandler.FRAME_ACTIVE_PROPERTY

    // Skipping field: false false false false false true 

    /// static final java.beans.PropertyChangeListener com.apple.laf.AquaFocusHandler.REPAINT_LISTENER

    // Skipping field: true false false false false false 

    /// private boolean com.apple.laf.AquaFocusHandler.repaintBorder

    /// private boolean com.apple.laf.AquaFocusHandler.wasTemporary

    /// public com.apple.laf.AquaFocusHandler()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaFocusHandler", classCache: &AquaFocusHandler.AquaFocusHandlerJNIClass, methodSig: "()V", methodCache: &AquaFocusHandler.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// protected static void com.apple.laf.AquaFocusHandler.install(javax.swing.JComponent)

    private static var install_MethodID_2: jmethodID?

    open class func install( arg0: javax_swing.JComponent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "com/apple/laf/AquaFocusHandler", classCache: &AquaFocusHandlerJNIClass, methodName: "install", methodSig: "(Ljavax/swing/JComponent;)V", methodCache: &install_MethodID_2, args: &__args, locals: &__locals )
    }

    open class func install( _ _arg0: javax_swing.JComponent? ) {
        install( arg0: _arg0 )
    }

    /// protected static boolean com.apple.laf.AquaFocusHandler.isActive(javax.swing.JComponent)

    private static var isActive_MethodID_3: jmethodID?

    open class func isActive( arg0: javax_swing.JComponent? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "com/apple/laf/AquaFocusHandler", classCache: &AquaFocusHandlerJNIClass, methodName: "isActive", methodSig: "(Ljavax/swing/JComponent;)Z", methodCache: &isActive_MethodID_3, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open class func isActive( _ _arg0: javax_swing.JComponent? ) -> Bool {
        return isActive( arg0: _arg0 )
    }

    /// static boolean com.apple.laf.AquaFocusHandler.isComponentValid(javax.swing.JComponent)

    // Skipping method: true false false false false 

    /// static void com.apple.laf.AquaFocusHandler.setSelectionColors(javax.swing.JList,java.lang.String,java.lang.String)

    // Skipping method: true false false false false 

    /// static void com.apple.laf.AquaFocusHandler.setSelectionColors(javax.swing.JTable,java.lang.String,java.lang.String)

    // Skipping method: true false false false false 

    /// static void com.apple.laf.AquaFocusHandler.swapSelectionColors(java.lang.String,javax.swing.JList,java.lang.Object)

    // Skipping method: true false false false false 

    /// static void com.apple.laf.AquaFocusHandler.swapSelectionColors(java.lang.String,javax.swing.JTable,java.lang.Object)

    // Skipping method: true false false false false 

    /// static void com.apple.laf.AquaFocusHandler.swapSelectionColors(java.lang.String,javax.swing.JTree,java.lang.Object)

    // Skipping method: true false false false false 

    /// protected static void com.apple.laf.AquaFocusHandler.uninstall(javax.swing.JComponent)

    private static var uninstall_MethodID_4: jmethodID?

    open class func uninstall( arg0: javax_swing.JComponent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "com/apple/laf/AquaFocusHandler", classCache: &AquaFocusHandlerJNIClass, methodName: "uninstall", methodSig: "(Ljavax/swing/JComponent;)V", methodCache: &uninstall_MethodID_4, args: &__args, locals: &__locals )
    }

    open class func uninstall( _ _arg0: javax_swing.JComponent? ) {
        uninstall( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaFocusHandler.focusGained(java.awt.event.FocusEvent)

    private static var focusGained_MethodID_5: jmethodID?

    open func focusGained( e: java_awt.FocusEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "focusGained", methodSig: "(Ljava/awt/event/FocusEvent;)V", methodCache: &AquaFocusHandler.focusGained_MethodID_5, args: &__args, locals: &__locals )
    }

    open func focusGained( _ _e: java_awt.FocusEvent? ) {
        focusGained( e: _e )
    }

    /// public void com.apple.laf.AquaFocusHandler.focusLost(java.awt.event.FocusEvent)

    private static var focusLost_MethodID_6: jmethodID?

    open func focusLost( e: java_awt.FocusEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "focusLost", methodSig: "(Ljava/awt/event/FocusEvent;)V", methodCache: &AquaFocusHandler.focusLost_MethodID_6, args: &__args, locals: &__locals )
    }

    open func focusLost( _ _e: java_awt.FocusEvent? ) {
        focusLost( e: _e )
    }

    /// public void com.apple.laf.AquaFocusHandler.propertyChange(java.beans.PropertyChangeEvent)

    private static var propertyChange_MethodID_7: jmethodID?

    open func propertyChange( evt: /* class java.beans.PropertyChangeEvent */ UnavailableObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: evt, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "propertyChange", methodSig: "(Ljava/beans/PropertyChangeEvent;)V", methodCache: &AquaFocusHandler.propertyChange_MethodID_7, args: &__args, locals: &__locals )
    }

    open func propertyChange( _ _evt: /* class java.beans.PropertyChangeEvent */ UnavailableObject? ) {
        propertyChange( evt: _evt )
    }

}

