
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class com.apple.laf.AquaUtilControlSize$SizeVariant ///

open class AquaUtilControlSize_SizeVariant: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaUtilControlSize_SizeVariantJNIClass: jclass?

    /// java.lang.Float com.apple.laf.AquaUtilControlSize$SizeVariant.fontSize

    // Skipping field: true false false false false false 

    /// int com.apple.laf.AquaUtilControlSize$SizeVariant.h

    // Skipping field: true false false false false false 

    /// java.awt.Insets com.apple.laf.AquaUtilControlSize$SizeVariant.insets

    // Skipping field: true false false false false false 

    /// java.awt.Insets com.apple.laf.AquaUtilControlSize$SizeVariant.margins

    // Skipping field: true false false false false false 

    /// apple.laf.JRSUIConstants$Size com.apple.laf.AquaUtilControlSize$SizeVariant.size

    // Skipping field: true false false false false false 

    /// int com.apple.laf.AquaUtilControlSize$SizeVariant.w

    // Skipping field: true false false false false false 

    /// public com.apple.laf.AquaUtilControlSize$SizeVariant()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaUtilControlSize$SizeVariant", classCache: &AquaUtilControlSize_SizeVariant.AquaUtilControlSize_SizeVariantJNIClass, methodSig: "()V", methodCache: &AquaUtilControlSize_SizeVariant.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public com.apple.laf.AquaUtilControlSize$SizeVariant(com.apple.laf.AquaUtilControlSize$SizeVariant)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: AquaUtilControlSize_SizeVariant? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaUtilControlSize$SizeVariant", classCache: &AquaUtilControlSize_SizeVariant.AquaUtilControlSize_SizeVariantJNIClass, methodSig: "(Lcom/apple/laf/AquaUtilControlSize$SizeVariant;)V", methodCache: &AquaUtilControlSize_SizeVariant.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: AquaUtilControlSize_SizeVariant? ) {
        self.init( arg0: _arg0 )
    }

    /// public com.apple.laf.AquaUtilControlSize$SizeVariant(int,int)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: Int, arg1: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaUtilControlSize$SizeVariant", classCache: &AquaUtilControlSize_SizeVariant.AquaUtilControlSize_SizeVariantJNIClass, methodSig: "(II)V", methodCache: &AquaUtilControlSize_SizeVariant.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Int ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// static java.awt.Insets com.apple.laf.AquaUtilControlSize$SizeVariant.generateInsets(java.awt.Insets,int,int,int,int)

    // Skipping method: true false false false false 

    /// public com.apple.laf.AquaUtilControlSize$SizeVariant com.apple.laf.AquaUtilControlSize$SizeVariant.alterFontSize(float)

    private static var alterFontSize_MethodID_4: jmethodID?

    open func alterFontSize( arg0: Float ) -> AquaUtilControlSize_SizeVariant! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( f: arg0 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "alterFontSize", methodSig: "(F)Lcom/apple/laf/AquaUtilControlSize$SizeVariant;", methodCache: &AquaUtilControlSize_SizeVariant.alterFontSize_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AquaUtilControlSize_SizeVariant( javaObject: __return ) : nil
    }

    open func alterFontSize( _ _arg0: Float ) -> AquaUtilControlSize_SizeVariant! {
        return alterFontSize( arg0: _arg0 )
    }

    /// public com.apple.laf.AquaUtilControlSize$SizeVariant com.apple.laf.AquaUtilControlSize$SizeVariant.alterInsets(int,int,int,int)

    private static var alterInsets_MethodID_5: jmethodID?

    open func alterInsets( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) -> AquaUtilControlSize_SizeVariant! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = jvalue( i: jint(arg2) )
        __args[3] = jvalue( i: jint(arg3) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "alterInsets", methodSig: "(IIII)Lcom/apple/laf/AquaUtilControlSize$SizeVariant;", methodCache: &AquaUtilControlSize_SizeVariant.alterInsets_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AquaUtilControlSize_SizeVariant( javaObject: __return ) : nil
    }

    open func alterInsets( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) -> AquaUtilControlSize_SizeVariant! {
        return alterInsets( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public com.apple.laf.AquaUtilControlSize$SizeVariant com.apple.laf.AquaUtilControlSize$SizeVariant.alterMargins(int,int,int,int)

    private static var alterMargins_MethodID_6: jmethodID?

    open func alterMargins( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) -> AquaUtilControlSize_SizeVariant! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = jvalue( i: jint(arg2) )
        __args[3] = jvalue( i: jint(arg3) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "alterMargins", methodSig: "(IIII)Lcom/apple/laf/AquaUtilControlSize$SizeVariant;", methodCache: &AquaUtilControlSize_SizeVariant.alterMargins_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AquaUtilControlSize_SizeVariant( javaObject: __return ) : nil
    }

    open func alterMargins( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) -> AquaUtilControlSize_SizeVariant! {
        return alterMargins( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public com.apple.laf.AquaUtilControlSize$SizeVariant com.apple.laf.AquaUtilControlSize$SizeVariant.alterMinSize(int,int)

    private static var alterMinSize_MethodID_7: jmethodID?

    open func alterMinSize( arg0: Int, arg1: Int ) -> AquaUtilControlSize_SizeVariant! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "alterMinSize", methodSig: "(II)Lcom/apple/laf/AquaUtilControlSize$SizeVariant;", methodCache: &AquaUtilControlSize_SizeVariant.alterMinSize_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AquaUtilControlSize_SizeVariant( javaObject: __return ) : nil
    }

    open func alterMinSize( _ _arg0: Int, _ _arg1: Int ) -> AquaUtilControlSize_SizeVariant! {
        return alterMinSize( arg0: _arg0, arg1: _arg1 )
    }

    /// public com.apple.laf.AquaUtilControlSize$SizeVariant com.apple.laf.AquaUtilControlSize$SizeVariant.replaceInsets(java.lang.String)

    private static var replaceInsets_MethodID_8: jmethodID?

    open func replaceInsets( arg0: String? ) -> AquaUtilControlSize_SizeVariant! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "replaceInsets", methodSig: "(Ljava/lang/String;)Lcom/apple/laf/AquaUtilControlSize$SizeVariant;", methodCache: &AquaUtilControlSize_SizeVariant.replaceInsets_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AquaUtilControlSize_SizeVariant( javaObject: __return ) : nil
    }

    open func replaceInsets( _ _arg0: String? ) -> AquaUtilControlSize_SizeVariant! {
        return replaceInsets( arg0: _arg0 )
    }

    /// public com.apple.laf.AquaUtilControlSize$SizeVariant com.apple.laf.AquaUtilControlSize$SizeVariant.replaceInsets(java.awt.Insets)

    private static var replaceInsets_MethodID_9: jmethodID?

    open func replaceInsets( arg0: java_awt.Insets? ) -> AquaUtilControlSize_SizeVariant! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "replaceInsets", methodSig: "(Ljava/awt/Insets;)Lcom/apple/laf/AquaUtilControlSize$SizeVariant;", methodCache: &AquaUtilControlSize_SizeVariant.replaceInsets_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AquaUtilControlSize_SizeVariant( javaObject: __return ) : nil
    }

    open func replaceInsets( _ _arg0: java_awt.Insets? ) -> AquaUtilControlSize_SizeVariant! {
        return replaceInsets( arg0: _arg0 )
    }

    /// public com.apple.laf.AquaUtilControlSize$SizeVariant com.apple.laf.AquaUtilControlSize$SizeVariant.replaceMargins(java.lang.String)

    private static var replaceMargins_MethodID_10: jmethodID?

    open func replaceMargins( arg0: String? ) -> AquaUtilControlSize_SizeVariant! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "replaceMargins", methodSig: "(Ljava/lang/String;)Lcom/apple/laf/AquaUtilControlSize$SizeVariant;", methodCache: &AquaUtilControlSize_SizeVariant.replaceMargins_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AquaUtilControlSize_SizeVariant( javaObject: __return ) : nil
    }

    open func replaceMargins( _ _arg0: String? ) -> AquaUtilControlSize_SizeVariant! {
        return replaceMargins( arg0: _arg0 )
    }

    /// public java.lang.String com.apple.laf.AquaUtilControlSize$SizeVariant.toString()

    // Skipping method: false true false false false 

}

