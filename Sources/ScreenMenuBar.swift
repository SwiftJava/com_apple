
import java_swift
import java_awt
import javax_swing

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home ///
/// Tue Aug 08 14:27:28 BST 2017 ///

/// class com.apple.laf.ScreenMenuBar ///

open class ScreenMenuBar: java_awt.MenuBar, java_awt.ContainerListener, java_awt.ComponentListener {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ScreenMenuBarJNIClass: jclass?

    /// static boolean com.apple.laf.ScreenMenuBar.sJMenuBarHasHelpMenus

    /// javax.swing.JMenuBar com.apple.laf.ScreenMenuBar.fSwingBar

    /// java.util.Hashtable com.apple.laf.ScreenMenuBar.fSubmenus

    /// com.apple.laf.ScreenMenuPropertyListener com.apple.laf.ScreenMenuBar.fPropertyListener

    /// com.apple.laf.ScreenMenuPropertyListener com.apple.laf.ScreenMenuBar.fAccessibleListener

    /// private static java.lang.reflect.Field[] com.apple.laf.ScreenMenuBar.stolenFields

    /// java.util.Vector java.awt.MenuBar.menus

    /// java.awt.Menu java.awt.MenuBar.helpMenu

    /// private static final java.lang.String java.awt.MenuBar.base

    /// private static int java.awt.MenuBar.nameCounter

    /// private static final long java.awt.MenuBar.serialVersionUID

    /// private int java.awt.MenuBar.menuBarSerializedDataVersion

    /// transient java.awt.peer.MenuComponentPeer java.awt.MenuComponent.peer

    /// transient java.awt.MenuContainer java.awt.MenuComponent.parent

    /// transient sun.awt.AppContext java.awt.MenuComponent.appContext

    /// java.awt.Font java.awt.MenuComponent.font

    /// private java.lang.String java.awt.MenuComponent.name

    /// private boolean java.awt.MenuComponent.nameExplicitlySet

    /// boolean java.awt.MenuComponent.newEventsOnly

    /// private transient volatile java.security.AccessControlContext java.awt.MenuComponent.acc

    /// static final java.lang.String java.awt.MenuComponent.actionListenerK

    /// static final java.lang.String java.awt.MenuComponent.itemListenerK

    /// private static final long java.awt.MenuComponent.serialVersionUID

    /// javax.accessibility.AccessibleContext java.awt.MenuComponent.accessibleContext

    /// public com.apple.laf.ScreenMenuBar(javax.swing.JMenuBar)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: javax_swing.JMenuBar? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/ScreenMenuBar", classCache: &ScreenMenuBar.ScreenMenuBarJNIClass, methodSig: "(Ljavax/swing/JMenuBar;)V", methodCache: &ScreenMenuBar.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: javax_swing.JMenuBar? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.awt.Menu com.apple.laf.ScreenMenuBar.add(java.awt.Menu,int)

    private static var add_MethodID_2: jmethodID?

    open func add( arg0: java_awt.Menu?, arg1: Int ) -> java_awt.Menu! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "add", methodSig: "(Ljava/awt/Menu;I)Ljava/awt/Menu;", methodCache: &ScreenMenuBar.add_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Menu( javaObject: __return ) : nil
    }

    open func add( _ _arg0: java_awt.Menu?, _ _arg1: Int ) -> java_awt.Menu! {
        return add( arg0: _arg0, arg1: _arg1 )
    }

    /// public void com.apple.laf.ScreenMenuBar.removeAll()

    private static var removeAll_MethodID_3: jmethodID?

    open func removeAll() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeAll", methodSig: "()V", methodCache: &ScreenMenuBar.removeAll_MethodID_3, args: &__args, locals: &__locals )
    }


    /// public void com.apple.laf.ScreenMenuBar.setIndeterminate(boolean)

    private static var setIndeterminate_MethodID_4: jmethodID?

    open func setIndeterminate( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setIndeterminate", methodSig: "(Z)V", methodCache: &ScreenMenuBar.setIndeterminate_MethodID_4, args: &__args, locals: &__locals )
    }

    open func setIndeterminate( _ _arg0: Bool ) {
        setIndeterminate( arg0: _arg0 )
    }

    /// public void com.apple.laf.ScreenMenuBar.setChildVisible(javax.swing.JMenuItem,boolean)

    private static var setChildVisible_MethodID_5: jmethodID?

    open func setChildVisible( arg0: javax_swing.JMenuItem?, arg1: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setChildVisible", methodSig: "(Ljavax/swing/JMenuItem;Z)V", methodCache: &ScreenMenuBar.setChildVisible_MethodID_5, args: &__args, locals: &__locals )
    }

    open func setChildVisible( _ _arg0: javax_swing.JMenuItem?, _ _arg1: Bool ) {
        setChildVisible( arg0: _arg0, arg1: _arg1 )
    }

    /// com.apple.laf.ScreenMenu com.apple.laf.ScreenMenuBar.addSubmenu(javax.swing.JMenu)

    /// private void com.apple.laf.ScreenMenuBar.removeSubmenu(javax.swing.JMenu)

    /// public void com.apple.laf.ScreenMenuBar.componentAdded(java.awt.event.ContainerEvent)

    private static var componentAdded_MethodID_6: jmethodID?

    open func componentAdded( e: java_awt.ContainerEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentAdded", methodSig: "(Ljava/awt/event/ContainerEvent;)V", methodCache: &ScreenMenuBar.componentAdded_MethodID_6, args: &__args, locals: &__locals )
    }

    open func componentAdded( _ _e: java_awt.ContainerEvent? ) {
        componentAdded( e: _e )
    }

    /// public void com.apple.laf.ScreenMenuBar.componentRemoved(java.awt.event.ContainerEvent)

    private static var componentRemoved_MethodID_7: jmethodID?

    open func componentRemoved( e: java_awt.ContainerEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentRemoved", methodSig: "(Ljava/awt/event/ContainerEvent;)V", methodCache: &ScreenMenuBar.componentRemoved_MethodID_7, args: &__args, locals: &__locals )
    }

    open func componentRemoved( _ _e: java_awt.ContainerEvent? ) {
        componentRemoved( e: _e )
    }

    /// public void com.apple.laf.ScreenMenuBar.componentResized(java.awt.event.ComponentEvent)

    private static var componentResized_MethodID_8: jmethodID?

    open func componentResized( e: java_awt.ComponentEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentResized", methodSig: "(Ljava/awt/event/ComponentEvent;)V", methodCache: &ScreenMenuBar.componentResized_MethodID_8, args: &__args, locals: &__locals )
    }

    open func componentResized( _ _e: java_awt.ComponentEvent? ) {
        componentResized( e: _e )
    }

    /// public void com.apple.laf.ScreenMenuBar.componentMoved(java.awt.event.ComponentEvent)

    private static var componentMoved_MethodID_9: jmethodID?

    open func componentMoved( e: java_awt.ComponentEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentMoved", methodSig: "(Ljava/awt/event/ComponentEvent;)V", methodCache: &ScreenMenuBar.componentMoved_MethodID_9, args: &__args, locals: &__locals )
    }

    open func componentMoved( _ _e: java_awt.ComponentEvent? ) {
        componentMoved( e: _e )
    }

    /// public void com.apple.laf.ScreenMenuBar.componentShown(java.awt.event.ComponentEvent)

    private static var componentShown_MethodID_10: jmethodID?

    open func componentShown( e: java_awt.ComponentEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentShown", methodSig: "(Ljava/awt/event/ComponentEvent;)V", methodCache: &ScreenMenuBar.componentShown_MethodID_10, args: &__args, locals: &__locals )
    }

    open func componentShown( _ _e: java_awt.ComponentEvent? ) {
        componentShown( e: _e )
    }

    /// public void com.apple.laf.ScreenMenuBar.componentHidden(java.awt.event.ComponentEvent)

    private static var componentHidden_MethodID_11: jmethodID?

    open func componentHidden( e: java_awt.ComponentEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentHidden", methodSig: "(Ljava/awt/event/ComponentEvent;)V", methodCache: &ScreenMenuBar.componentHidden_MethodID_11, args: &__args, locals: &__locals )
    }

    open func componentHidden( _ _e: java_awt.ComponentEvent? ) {
        componentHidden( e: _e )
    }

    /// public void com.apple.laf.ScreenMenuBar.setIcon(javax.swing.Icon)

    private static var setIcon_MethodID_12: jmethodID?

    open func setIcon( arg0: javax_swing.Icon? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setIcon", methodSig: "(Ljavax/swing/Icon;)V", methodCache: &ScreenMenuBar.setIcon_MethodID_12, args: &__args, locals: &__locals )
    }

    open func setIcon( _ _arg0: javax_swing.Icon? ) {
        setIcon( arg0: _arg0 )
    }

    /// public void com.apple.laf.ScreenMenuBar.setEnabled(boolean)

    private static var setEnabled_MethodID_13: jmethodID?

    open func setEnabled( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setEnabled", methodSig: "(Z)V", methodCache: &ScreenMenuBar.setEnabled_MethodID_13, args: &__args, locals: &__locals )
    }

    open func setEnabled( _ _arg0: Bool ) {
        setEnabled( arg0: _arg0 )
    }

    /// public void com.apple.laf.ScreenMenuBar.setToolTipText(java.lang.String)

    private static var setToolTipText_MethodID_14: jmethodID?

    open func setToolTipText( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setToolTipText", methodSig: "(Ljava/lang/String;)V", methodCache: &ScreenMenuBar.setToolTipText_MethodID_14, args: &__args, locals: &__locals )
    }

    open func setToolTipText( _ _arg0: String? ) {
        setToolTipText( arg0: _arg0 )
    }

    /// public void com.apple.laf.ScreenMenuBar.addNotify()

    /// public void com.apple.laf.ScreenMenuBar.removeNotify()

    /// public void com.apple.laf.ScreenMenuBar.setLabel(java.lang.String)

    private static var setLabel_MethodID_15: jmethodID?

    open func setLabel( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLabel", methodSig: "(Ljava/lang/String;)V", methodCache: &ScreenMenuBar.setLabel_MethodID_15, args: &__args, locals: &__locals )
    }

    open func setLabel( _ _arg0: String? ) {
        setLabel( arg0: _arg0 )
    }

    /// public void com.apple.laf.ScreenMenuBar.setAccelerator(javax.swing.KeyStroke)

    private static var setAccelerator_MethodID_16: jmethodID?

    open func setAccelerator( arg0: javax_swing.KeyStroke? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAccelerator", methodSig: "(Ljavax/swing/KeyStroke;)V", methodCache: &ScreenMenuBar.setAccelerator_MethodID_16, args: &__args, locals: &__locals )
    }

    open func setAccelerator( _ _arg0: javax_swing.KeyStroke? ) {
        setAccelerator( arg0: _arg0 )
    }

    /// In declared protocol but not defined.. ///

    /// public abstract void com.apple.laf.ScreenMenuPropertyHandler.setFont(java.awt.Font)

    private static var setFont_MethodID_17: jmethodID?

    open func setFont( arg0: java_awt.Font? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFont", methodSig: "(Ljava/awt/Font;)V", methodCache: &ScreenMenuBar.setFont_MethodID_17, args: &__args, locals: &__locals )
    }

    override open func setFont( _ _arg0: java_awt.Font? ) {
        setFont( arg0: _arg0 )
    }

}

