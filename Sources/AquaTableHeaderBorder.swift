
import java_swift
import javax_swing
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class com.apple.laf.AquaTableHeaderBorder ///

open class AquaTableHeaderBorder: javax_swing.AbstractBorder {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaTableHeaderBorderJNIClass: jclass?

    /// protected static final int com.apple.laf.AquaTableHeaderBorder.SORT_ASCENDING

    // Skipping field: false false false false false true 

    /// protected static final int com.apple.laf.AquaTableHeaderBorder.SORT_DECENDING

    // Skipping field: false false false false false true 

    /// protected static final int com.apple.laf.AquaTableHeaderBorder.SORT_NONE

    // Skipping field: false false false false false true 

    /// static final com.apple.laf.AquaUtils$RecyclableSingleton com.apple.laf.AquaTableHeaderBorder.alternateBorder

    // Skipping field: true false false false false false 

    /// protected boolean com.apple.laf.AquaTableHeaderBorder.doPaint

    private static var doPaint_FieldID: jfieldID?

    open var doPaint: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "doPaint", fieldType: "Z", fieldCache: &AquaTableHeaderBorder.doPaint_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "doPaint", fieldType: "Z", fieldCache: &AquaTableHeaderBorder.doPaint_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected final java.awt.Insets com.apple.laf.AquaTableHeaderBorder.editorBorderInsets

    private static var editorBorderInsets_FieldID: jfieldID?

    open var editorBorderInsets: java_awt.Insets! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "editorBorderInsets", fieldType: "Ljava/awt/Insets;", fieldCache: &AquaTableHeaderBorder.editorBorderInsets_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Insets( javaObject: __value ) : nil
        }
    }

    /// private int com.apple.laf.AquaTableHeaderBorder.fHorizontalShift

    /// protected final com.apple.laf.AquaPainter com.apple.laf.AquaTableHeaderBorder.painter

    private static var painter_FieldID: jfieldID?

    open var painter: /* class com.apple.laf.AquaPainter */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "painter", fieldType: "Lcom/apple/laf/AquaPainter;", fieldCache: &AquaTableHeaderBorder.painter_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class com.apple.laf.AquaPainter */ UnavailableObject( javaObject: __value ) : nil
        }
    }

    /// private boolean com.apple.laf.AquaTableHeaderBorder.selected

    /// private int com.apple.laf.AquaTableHeaderBorder.sortOrder

    /// protected com.apple.laf.AquaTableHeaderBorder()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaTableHeaderBorder", classCache: &AquaTableHeaderBorder.AquaTableHeaderBorderJNIClass, methodSig: "()V", methodCache: &AquaTableHeaderBorder.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// protected static javax.swing.border.Border com.apple.laf.AquaTableHeaderBorder.getAlternateBorder()

    private static var getAlternateBorder_MethodID_2: jmethodID?

    open class func getAlternateBorder() -> javax_swing.Border! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaTableHeaderBorder", classCache: &AquaTableHeaderBorderJNIClass, methodName: "getAlternateBorder", methodSig: "()Ljavax/swing/border/Border;", methodCache: &getAlternateBorder_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.BorderForward( javaObject: __return ) : nil
    }


    /// protected static com.apple.laf.AquaTableHeaderBorder com.apple.laf.AquaTableHeaderBorder.getListHeaderBorder()

    private static var getListHeaderBorder_MethodID_3: jmethodID?

    open class func getListHeaderBorder() -> AquaTableHeaderBorder! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaTableHeaderBorder", classCache: &AquaTableHeaderBorderJNIClass, methodName: "getListHeaderBorder", methodSig: "()Lcom/apple/laf/AquaTableHeaderBorder;", methodCache: &getListHeaderBorder_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AquaTableHeaderBorder( javaObject: __return ) : nil
    }


    /// public java.awt.Insets com.apple.laf.AquaTableHeaderBorder.getBorderInsets(java.awt.Component)

    private static var getBorderInsets_MethodID_4: jmethodID?

    open func getBorderInsets( arg0: java_awt.Component? ) -> java_awt.Insets! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBorderInsets", methodSig: "(Ljava/awt/Component;)Ljava/awt/Insets;", methodCache: &AquaTableHeaderBorder.getBorderInsets_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Insets( javaObject: __return ) : nil
    }

    override open func getBorderInsets( _ _arg0: java_awt.Component? ) -> java_awt.Insets! {
        return getBorderInsets( arg0: _arg0 )
    }

    /// public java.awt.Insets com.apple.laf.AquaTableHeaderBorder.getBorderInsets(java.awt.Component,java.awt.Insets)

    private static var getBorderInsets_MethodID_5: jmethodID?

    open func getBorderInsets( arg0: java_awt.Component?, arg1: java_awt.Insets? ) -> java_awt.Insets! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBorderInsets", methodSig: "(Ljava/awt/Component;Ljava/awt/Insets;)Ljava/awt/Insets;", methodCache: &AquaTableHeaderBorder.getBorderInsets_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Insets( javaObject: __return ) : nil
    }

    override open func getBorderInsets( _ _arg0: java_awt.Component?, _ _arg1: java_awt.Insets? ) -> java_awt.Insets! {
        return getBorderInsets( arg0: _arg0, arg1: _arg1 )
    }

    /// protected apple.laf.JRSUIConstants$State com.apple.laf.AquaTableHeaderBorder.getState(javax.swing.JComponent)

    private static var getState_MethodID_6: jmethodID?

    open func getState( arg0: javax_swing.JComponent? ) -> /* class apple.laf.JRSUIConstants$State */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getState", methodSig: "(Ljavax/swing/JComponent;)Lapple/laf/JRSUIConstants$State;", methodCache: &AquaTableHeaderBorder.getState_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class apple.laf.JRSUIConstants$State */ UnavailableObject( javaObject: __return ) : nil
    }

    open func getState( _ _arg0: javax_swing.JComponent? ) -> /* class apple.laf.JRSUIConstants$State */ UnavailableObject! {
        return getState( arg0: _arg0 )
    }

    /// public boolean com.apple.laf.AquaTableHeaderBorder.isBorderOpaque()

    // Skipping method: false true false false false 

    /// public void com.apple.laf.AquaTableHeaderBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)

    private static var paintBorder_MethodID_7: jmethodID?

    open func paintBorder( arg0: java_awt.Component?, arg1: java_awt.Graphics?, arg2: Int, arg3: Int, arg4: Int, arg5: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = jvalue( i: jint(arg2) )
        __args[3] = jvalue( i: jint(arg3) )
        __args[4] = jvalue( i: jint(arg4) )
        __args[5] = jvalue( i: jint(arg5) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintBorder", methodSig: "(Ljava/awt/Component;Ljava/awt/Graphics;IIII)V", methodCache: &AquaTableHeaderBorder.paintBorder_MethodID_7, args: &__args, locals: &__locals )
    }

    override open func paintBorder( _ _arg0: java_awt.Component?, _ _arg1: java_awt.Graphics?, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int ) {
        paintBorder( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// protected void com.apple.laf.AquaTableHeaderBorder.setHorizontalShift(int)

    private static var setHorizontalShift_MethodID_8: jmethodID?

    open func setHorizontalShift( arg0: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setHorizontalShift", methodSig: "(I)V", methodCache: &AquaTableHeaderBorder.setHorizontalShift_MethodID_8, args: &__args, locals: &__locals )
    }

    open func setHorizontalShift( _ _arg0: Int ) {
        setHorizontalShift( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaTableHeaderBorder.setSelected(boolean)

    private static var setSelected_MethodID_9: jmethodID?

    open func setSelected( arg0: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(arg0 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSelected", methodSig: "(Z)V", methodCache: &AquaTableHeaderBorder.setSelected_MethodID_9, args: &__args, locals: &__locals )
    }

    open func setSelected( _ _arg0: Bool ) {
        setSelected( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaTableHeaderBorder.setSortOrder(int)

    private static var setSortOrder_MethodID_10: jmethodID?

    open func setSortOrder( arg0: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSortOrder", methodSig: "(I)V", methodCache: &AquaTableHeaderBorder.setSortOrder_MethodID_10, args: &__args, locals: &__locals )
    }

    open func setSortOrder( _ _arg0: Int ) {
        setSortOrder( arg0: _arg0 )
    }

}

