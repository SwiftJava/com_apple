
import java_swift
import javax_swing
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class com.apple.laf.AquaFileChooserUI ///

open class AquaFileChooserUI: javax_swing.FileChooserUI {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaFileChooserUIJNIClass: jclass?

    /// protected static final java.lang.String com.apple.laf.AquaFileChooserUI.APPLICATION_TRAVERSABLE_PROPERTY

    // Skipping field: false false false false false true 

    /// private static final int com.apple.laf.AquaFileChooserUI.LIST_MIN_HEIGHT

    /// private static final java.awt.Dimension com.apple.laf.AquaFileChooserUI.LIST_MIN_SIZE

    /// private static final int com.apple.laf.AquaFileChooserUI.LIST_MIN_WIDTH

    /// private static final int com.apple.laf.AquaFileChooserUI.MIN_HEIGHT

    /// private static final int com.apple.laf.AquaFileChooserUI.MIN_WIDTH

    /// protected static final java.lang.String com.apple.laf.AquaFileChooserUI.PACKAGE_TRAVERSABLE_PROPERTY

    // Skipping field: false false false false false true 

    /// private static final int com.apple.laf.AquaFileChooserUI.PREF_HEIGHT

    /// private static final int com.apple.laf.AquaFileChooserUI.PREF_WIDTH

    /// private static final java.lang.String[] com.apple.laf.AquaFileChooserUI.fColumnNames

    /// static java.lang.String com.apple.laf.AquaFileChooserUI.fileNameLabelText

    // Skipping field: true false false false false false 

    /// private static java.lang.String com.apple.laf.AquaFileChooserUI.filesOfTypeLabelText

    /// private static final java.awt.Dimension com.apple.laf.AquaFileChooserUI.hstrut10

    /// static final int com.apple.laf.AquaFileChooserUI.kCancel

    // Skipping field: true false false false false false 

    /// static final int com.apple.laf.AquaFileChooserUI.kHelp

    // Skipping field: true false false false false false 

    /// static final int com.apple.laf.AquaFileChooserUI.kNewFolder

    // Skipping field: true false false false false false 

    /// static final int com.apple.laf.AquaFileChooserUI.kOpen

    // Skipping field: true false false false false false 

    /// protected static final int com.apple.laf.AquaFileChooserUI.kOpenAlways

    // Skipping field: false false false false false true 

    /// protected static final int com.apple.laf.AquaFileChooserUI.kOpenConditional

    // Skipping field: false false false false false true 

    /// static final int com.apple.laf.AquaFileChooserUI.kOpenDirectory

    // Skipping field: true false false false false false 

    /// protected static final int com.apple.laf.AquaFileChooserUI.kOpenNever

    // Skipping field: false false false false false true 

    /// static final int com.apple.laf.AquaFileChooserUI.kSave

    // Skipping field: true false false false false false 

    /// static java.lang.String com.apple.laf.AquaFileChooserUI.newFolderAccessibleName

    // Skipping field: true false false false false false 

    /// private static java.lang.String com.apple.laf.AquaFileChooserUI.newFolderToolTipText

    /// static final java.lang.String[] com.apple.laf.AquaFileChooserUI.sButtonData

    // Skipping field: true false false false false false 

    /// static final java.lang.String[] com.apple.laf.AquaFileChooserUI.sButtonKinds

    // Skipping field: true false false false false false 

    /// static final java.lang.String com.apple.laf.AquaFileChooserUI.sDataPrefix

    // Skipping field: true false false false false false 

    /// protected static final int com.apple.laf.AquaFileChooserUI.sGlobalApplicationIsTraversable

    // Skipping field: false false false false false true 

    /// protected static final int com.apple.laf.AquaFileChooserUI.sGlobalPackageIsTraversable

    // Skipping field: false false false false false true 

    /// protected static final java.lang.String[] com.apple.laf.AquaFileChooserUI.sTraversableProperties

    // Skipping field: false false false false false true 

    /// private static final java.awt.Dimension com.apple.laf.AquaFileChooserUI.vstrut10

    /// private final com.apple.laf.AquaFileChooserUI$AcceptAllFileFilter com.apple.laf.AquaFileChooserUI.acceptAllFileFilter

    /// private javax.swing.JPanel com.apple.laf.AquaFileChooserUI.accessoryPanel

    /// private javax.swing.event.AncestorListener com.apple.laf.AquaFileChooserUI.ancestorListener

    /// protected int com.apple.laf.AquaFileChooserUI.cancelButtonMnemonic

    private static var cancelButtonMnemonic_FieldID: jfieldID?

    open var cancelButtonMnemonic: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "cancelButtonMnemonic", fieldType: "I", fieldCache: &AquaFileChooserUI.cancelButtonMnemonic_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "cancelButtonMnemonic", fieldType: "I", fieldCache: &AquaFileChooserUI.cancelButtonMnemonic_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.cancelButtonText

    private static var cancelButtonText_FieldID: jfieldID?

    open var cancelButtonText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "cancelButtonText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.cancelButtonText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "cancelButtonText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.cancelButtonText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.cancelButtonToolTipText

    private static var cancelButtonToolTipText_FieldID: jfieldID?

    open var cancelButtonToolTipText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "cancelButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.cancelButtonToolTipText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "cancelButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.cancelButtonToolTipText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.cancelChooseButtonToolTipText

    private static var cancelChooseButtonToolTipText_FieldID: jfieldID?

    open var cancelChooseButtonToolTipText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "cancelChooseButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.cancelChooseButtonToolTipText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "cancelChooseButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.cancelChooseButtonToolTipText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.cancelNewFolderButtonToolTipText

    private static var cancelNewFolderButtonToolTipText_FieldID: jfieldID?

    open var cancelNewFolderButtonToolTipText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "cancelNewFolderButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.cancelNewFolderButtonToolTipText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "cancelNewFolderButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.cancelNewFolderButtonToolTipText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.cancelOpenButtonToolTipText

    private static var cancelOpenButtonToolTipText_FieldID: jfieldID?

    open var cancelOpenButtonToolTipText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "cancelOpenButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.cancelOpenButtonToolTipText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "cancelOpenButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.cancelOpenButtonToolTipText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.cancelSaveButtonToolTipText

    private static var cancelSaveButtonToolTipText_FieldID: jfieldID?

    open var cancelSaveButtonToolTipText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "cancelSaveButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.cancelSaveButtonToolTipText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "cancelSaveButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.cancelSaveButtonToolTipText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int com.apple.laf.AquaFileChooserUI.chooseButtonMnemonic

    private static var chooseButtonMnemonic_FieldID: jfieldID?

    open var chooseButtonMnemonic: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "chooseButtonMnemonic", fieldType: "I", fieldCache: &AquaFileChooserUI.chooseButtonMnemonic_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "chooseButtonMnemonic", fieldType: "I", fieldCache: &AquaFileChooserUI.chooseButtonMnemonic_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.chooseButtonText

    private static var chooseButtonText_FieldID: jfieldID?

    open var chooseButtonText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "chooseButtonText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.chooseButtonText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "chooseButtonText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.chooseButtonText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.chooseFolderButtonToolTipText

    private static var chooseFolderButtonToolTipText_FieldID: jfieldID?

    open var chooseFolderButtonToolTipText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "chooseFolderButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.chooseFolderButtonToolTipText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "chooseFolderButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.chooseFolderButtonToolTipText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.chooseItemButtonToolTipText

    private static var chooseItemButtonToolTipText_FieldID: jfieldID?

    open var chooseItemButtonToolTipText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "chooseItemButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.chooseItemButtonToolTipText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "chooseItemButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.chooseItemButtonToolTipText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.Icon com.apple.laf.AquaFileChooserUI.computerIcon

    private static var computerIcon_FieldID: jfieldID?

    open var computerIcon: javax_swing.Icon! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "computerIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaFileChooserUI.computerIcon_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.IconForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "computerIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaFileChooserUI.computerIcon_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// java.lang.String com.apple.laf.AquaFileChooserUI.createButtonText

    // Skipping field: true false false false false false 

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.desktopName

    private static var desktopName_FieldID: jfieldID?

    open var desktopName: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "desktopName", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.desktopName_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "desktopName", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.desktopName_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.Icon com.apple.laf.AquaFileChooserUI.detailsViewIcon

    private static var detailsViewIcon_FieldID: jfieldID?

    open var detailsViewIcon: javax_swing.Icon! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "detailsViewIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaFileChooserUI.detailsViewIcon_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.IconForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "detailsViewIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaFileChooserUI.detailsViewIcon_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// javax.swing.JComboBox com.apple.laf.AquaFileChooserUI.directoryComboBox

    // Skipping field: true false false false false false 

    /// private final javax.swing.Action com.apple.laf.AquaFileChooserUI.directoryComboBoxAction

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.directoryComboBoxToolTipText

    private static var directoryComboBoxToolTipText_FieldID: jfieldID?

    open var directoryComboBoxToolTipText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "directoryComboBoxToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.directoryComboBoxToolTipText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "directoryComboBoxToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.directoryComboBoxToolTipText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.directoryDescriptionText

    private static var directoryDescriptionText_FieldID: jfieldID?

    open var directoryDescriptionText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "directoryDescriptionText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.directoryDescriptionText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "directoryDescriptionText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.directoryDescriptionText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.Icon com.apple.laf.AquaFileChooserUI.directoryIcon

    private static var directoryIcon_FieldID: jfieldID?

    open var directoryIcon: javax_swing.Icon! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "directoryIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaFileChooserUI.directoryIcon_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.IconForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "directoryIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaFileChooserUI.directoryIcon_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private java.awt.event.MouseListener com.apple.laf.AquaFileChooserUI.doubleClickListener

    /// private java.awt.dnd.DropTarget com.apple.laf.AquaFileChooserUI.dragAndDropTarget

    /// protected int com.apple.laf.AquaFileChooserUI.fApplicationIsTraversable

    private static var fApplicationIsTraversable_FieldID: jfieldID?

    open var fApplicationIsTraversable: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "fApplicationIsTraversable", fieldType: "I", fieldCache: &AquaFileChooserUI.fApplicationIsTraversable_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "fApplicationIsTraversable", fieldType: "I", fieldCache: &AquaFileChooserUI.fApplicationIsTraversable_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// javax.swing.JButton com.apple.laf.AquaFileChooserUI.fApproveButton

    // Skipping field: true false false false false false 

    /// private final com.apple.laf.AquaFileChooserUI$ApproveSelectionAction com.apple.laf.AquaFileChooserUI.fApproveSelectionAction

    /// private javax.swing.JPanel com.apple.laf.AquaFileChooserUI.fBottomPanel

    /// javax.swing.AbstractAction[] com.apple.laf.AquaFileChooserUI.fButtonActions

    // Skipping field: true false false false false false 

    /// private javax.swing.JButton com.apple.laf.AquaFileChooserUI.fCancelButton

    /// private com.apple.laf.AquaFileChooserUI$FCSubpanel com.apple.laf.AquaFileChooserUI.fCustomDirOrAnyPanel

    /// private com.apple.laf.AquaFileChooserUI$FCSubpanel com.apple.laf.AquaFileChooserUI.fCustomFilePanel

    /// com.apple.laf.AquaFileChooserUI$DirectoryComboBoxModel com.apple.laf.AquaFileChooserUI.fDirectoryComboBoxModel

    // Skipping field: true false false false false false 

    /// private javax.swing.JPanel com.apple.laf.AquaFileChooserUI.fDirectoryPanel

    /// private java.awt.Component com.apple.laf.AquaFileChooserUI.fDirectoryPanelSpacer

    /// com.apple.laf.AquaFileChooserUI$JTableExtension com.apple.laf.AquaFileChooserUI.fFileList

    // Skipping field: true false false false false false 

    /// javax.swing.JButton com.apple.laf.AquaFileChooserUI.fNewFolderButton

    // Skipping field: true false false false false false 

    /// javax.swing.JButton com.apple.laf.AquaFileChooserUI.fOpenButton

    // Skipping field: true false false false false false 

    /// private com.apple.laf.AquaFileChooserUI$FCSubpanel com.apple.laf.AquaFileChooserUI.fOpenDirOrAnyPanel

    /// private com.apple.laf.AquaFileChooserUI$FCSubpanel com.apple.laf.AquaFileChooserUI.fOpenFilePanel

    /// protected int com.apple.laf.AquaFileChooserUI.fPackageIsTraversable

    private static var fPackageIsTraversable_FieldID: jfieldID?

    open var fPackageIsTraversable: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "fPackageIsTraversable", fieldType: "I", fieldCache: &AquaFileChooserUI.fPackageIsTraversable_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "fPackageIsTraversable", fieldType: "I", fieldCache: &AquaFileChooserUI.fPackageIsTraversable_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// private com.apple.laf.AquaFileChooserUI$FCSubpanel com.apple.laf.AquaFileChooserUI.fSaveFilePanel

    /// protected int com.apple.laf.AquaFileChooserUI.fSortColumn

    private static var fSortColumn_FieldID: jfieldID?

    open var fSortColumn: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "fSortColumn", fieldType: "I", fieldCache: &AquaFileChooserUI.fSortColumn_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "fSortColumn", fieldType: "I", fieldCache: &AquaFileChooserUI.fSortColumn_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// com.apple.laf.AquaFileChooserUI$FCSubpanel com.apple.laf.AquaFileChooserUI.fSubPanel

    // Skipping field: true false false false false false 

    /// javax.swing.JLabel com.apple.laf.AquaFileChooserUI.fTextFieldLabel

    // Skipping field: true false false false false false 

    /// javax.swing.JPanel com.apple.laf.AquaFileChooserUI.fTextfieldPanel

    // Skipping field: true false false false false false 

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.fileDescriptionText

    private static var fileDescriptionText_FieldID: jfieldID?

    open var fileDescriptionText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "fileDescriptionText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.fileDescriptionText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "fileDescriptionText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.fileDescriptionText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.Icon com.apple.laf.AquaFileChooserUI.fileIcon

    private static var fileIcon_FieldID: jfieldID?

    open var fileIcon: javax_swing.Icon! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "fileIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaFileChooserUI.fileIcon_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.IconForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "fileIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaFileChooserUI.fileIcon_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// final com.apple.laf.AquaFileView com.apple.laf.AquaFileChooserUI.fileView

    // Skipping field: true false false false false false 

    /// javax.swing.JFileChooser com.apple.laf.AquaFileChooserUI.filechooser

    // Skipping field: true false false false false false 

    /// javax.swing.JTextField com.apple.laf.AquaFileChooserUI.filenameTextField

    // Skipping field: true false false false false false 

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.filenameTextFieldToolTipText

    private static var filenameTextFieldToolTipText_FieldID: jfieldID?

    open var filenameTextFieldToolTipText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "filenameTextFieldToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.filenameTextFieldToolTipText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "filenameTextFieldToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.filenameTextFieldToolTipText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// javax.swing.JComboBox com.apple.laf.AquaFileChooserUI.filterComboBox

    // Skipping field: true false false false false false 

    /// private final javax.swing.Action com.apple.laf.AquaFileChooserUI.filterComboBoxAction

    /// private com.apple.laf.AquaFileChooserUI$FilterComboBoxModel com.apple.laf.AquaFileChooserUI.filterComboBoxModel

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.filterComboBoxToolTipText

    private static var filterComboBoxToolTipText_FieldID: jfieldID?

    open var filterComboBoxToolTipText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "filterComboBoxToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.filterComboBoxToolTipText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "filterComboBoxToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.filterComboBoxToolTipText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.Icon com.apple.laf.AquaFileChooserUI.floppyDriveIcon

    private static var floppyDriveIcon_FieldID: jfieldID?

    open var floppyDriveIcon: javax_swing.Icon! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "floppyDriveIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaFileChooserUI.floppyDriveIcon_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.IconForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "floppyDriveIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaFileChooserUI.floppyDriveIcon_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.Icon com.apple.laf.AquaFileChooserUI.hardDriveIcon

    private static var hardDriveIcon_FieldID: jfieldID?

    open var hardDriveIcon: javax_swing.Icon! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "hardDriveIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaFileChooserUI.hardDriveIcon_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.IconForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "hardDriveIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaFileChooserUI.hardDriveIcon_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int com.apple.laf.AquaFileChooserUI.helpButtonMnemonic

    private static var helpButtonMnemonic_FieldID: jfieldID?

    open var helpButtonMnemonic: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "helpButtonMnemonic", fieldType: "I", fieldCache: &AquaFileChooserUI.helpButtonMnemonic_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "helpButtonMnemonic", fieldType: "I", fieldCache: &AquaFileChooserUI.helpButtonMnemonic_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.helpButtonText

    private static var helpButtonText_FieldID: jfieldID?

    open var helpButtonText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "helpButtonText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.helpButtonText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "helpButtonText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.helpButtonText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.helpButtonToolTipText

    private static var helpButtonToolTipText_FieldID: jfieldID?

    open var helpButtonToolTipText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "helpButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.helpButtonToolTipText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "helpButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.helpButtonToolTipText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.Icon com.apple.laf.AquaFileChooserUI.homeFolderIcon

    private static var homeFolderIcon_FieldID: jfieldID?

    open var homeFolderIcon: javax_swing.Icon! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "homeFolderIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaFileChooserUI.homeFolderIcon_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.IconForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "homeFolderIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaFileChooserUI.homeFolderIcon_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.Icon com.apple.laf.AquaFileChooserUI.listViewIcon

    private static var listViewIcon_FieldID: jfieldID?

    open var listViewIcon: javax_swing.Icon! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "listViewIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaFileChooserUI.listViewIcon_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.IconForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "listViewIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaFileChooserUI.listViewIcon_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private com.apple.laf.AquaFileSystemModel com.apple.laf.AquaFileChooserUI.model

    /// private java.lang.String com.apple.laf.AquaFileChooserUI.newFileDefaultName

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.newFolderButtonText

    private static var newFolderButtonText_FieldID: jfieldID?

    open var newFolderButtonText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "newFolderButtonText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.newFolderButtonText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "newFolderButtonText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.newFolderButtonText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// java.lang.String com.apple.laf.AquaFileChooserUI.newFolderDefaultName

    // Skipping field: true false false false false false 

    /// java.lang.String com.apple.laf.AquaFileChooserUI.newFolderDialogPrompt

    // Skipping field: true false false false false false 

    /// java.lang.String com.apple.laf.AquaFileChooserUI.newFolderErrorText

    // Skipping field: true false false false false false 

    /// java.lang.String com.apple.laf.AquaFileChooserUI.newFolderExistsErrorText

    // Skipping field: true false false false false false 

    /// java.lang.String com.apple.laf.AquaFileChooserUI.newFolderTitleText

    // Skipping field: true false false false false false 

    /// protected int com.apple.laf.AquaFileChooserUI.openButtonMnemonic

    private static var openButtonMnemonic_FieldID: jfieldID?

    open var openButtonMnemonic: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "openButtonMnemonic", fieldType: "I", fieldCache: &AquaFileChooserUI.openButtonMnemonic_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "openButtonMnemonic", fieldType: "I", fieldCache: &AquaFileChooserUI.openButtonMnemonic_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.openButtonText

    private static var openButtonText_FieldID: jfieldID?

    open var openButtonText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "openButtonText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.openButtonText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "openButtonText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.openButtonText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.openButtonToolTipText

    private static var openButtonToolTipText_FieldID: jfieldID?

    open var openButtonToolTipText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "openButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.openButtonToolTipText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "openButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.openButtonToolTipText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.openDirectoryButtonToolTipText

    private static var openDirectoryButtonToolTipText_FieldID: jfieldID?

    open var openDirectoryButtonToolTipText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "openDirectoryButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.openDirectoryButtonToolTipText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "openDirectoryButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.openDirectoryButtonToolTipText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private java.lang.String com.apple.laf.AquaFileChooserUI.openTitleText

    /// private java.beans.PropertyChangeListener com.apple.laf.AquaFileChooserUI.propertyChangeListener

    /// protected int com.apple.laf.AquaFileChooserUI.saveButtonMnemonic

    private static var saveButtonMnemonic_FieldID: jfieldID?

    open var saveButtonMnemonic: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "saveButtonMnemonic", fieldType: "I", fieldCache: &AquaFileChooserUI.saveButtonMnemonic_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "saveButtonMnemonic", fieldType: "I", fieldCache: &AquaFileChooserUI.saveButtonMnemonic_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.saveButtonText

    private static var saveButtonText_FieldID: jfieldID?

    open var saveButtonText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "saveButtonText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.saveButtonText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "saveButtonText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.saveButtonText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.saveButtonToolTipText

    private static var saveButtonToolTipText_FieldID: jfieldID?

    open var saveButtonToolTipText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "saveButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.saveButtonToolTipText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "saveButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.saveButtonToolTipText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private java.lang.String com.apple.laf.AquaFileChooserUI.saveTitleText

    /// boolean com.apple.laf.AquaFileChooserUI.selectionInProgress

    // Skipping field: true false false false false false 

    /// protected javax.swing.Icon com.apple.laf.AquaFileChooserUI.upFolderIcon

    private static var upFolderIcon_FieldID: jfieldID?

    open var upFolderIcon: javax_swing.Icon! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "upFolderIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaFileChooserUI.upFolderIcon_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.IconForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "upFolderIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaFileChooserUI.upFolderIcon_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int com.apple.laf.AquaFileChooserUI.updateButtonMnemonic

    private static var updateButtonMnemonic_FieldID: jfieldID?

    open var updateButtonMnemonic: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "updateButtonMnemonic", fieldType: "I", fieldCache: &AquaFileChooserUI.updateButtonMnemonic_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "updateButtonMnemonic", fieldType: "I", fieldCache: &AquaFileChooserUI.updateButtonMnemonic_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.updateButtonText

    private static var updateButtonText_FieldID: jfieldID?

    open var updateButtonText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "updateButtonText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.updateButtonText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "updateButtonText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.updateButtonText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.updateButtonToolTipText

    private static var updateButtonToolTipText_FieldID: jfieldID?

    open var updateButtonToolTipText: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "updateButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.updateButtonToolTipText_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "updateButtonToolTipText", fieldType: "Ljava/lang/String;", fieldCache: &AquaFileChooserUI.updateButtonToolTipText_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// public com.apple.laf.AquaFileChooserUI(javax.swing.JFileChooser)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: javax_swing.JFileChooser? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaFileChooserUI", classCache: &AquaFileChooserUI.AquaFileChooserUIJNIClass, methodSig: "(Ljavax/swing/JFileChooser;)V", methodCache: &AquaFileChooserUI.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: javax_swing.JFileChooser? ) {
        self.init( arg0: _arg0 )
    }

    /// static boolean com.apple.laf.AquaFileChooserUI.access$000(com.apple.laf.AquaFileChooserUI,java.lang.Object)

    // Skipping method: true false false false false 

    /// public static javax.swing.plaf.ComponentUI com.apple.laf.AquaFileChooserUI.createUI(javax.swing.JComponent)

    private static var createUI_MethodID_2: jmethodID?

    open class func createUI( arg0: javax_swing.JComponent? ) -> javax_swing.ComponentUI! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaFileChooserUI", classCache: &AquaFileChooserUIJNIClass, methodName: "createUI", methodSig: "(Ljavax/swing/JComponent;)Ljavax/swing/plaf/ComponentUI;", methodCache: &createUI_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.ComponentUI( javaObject: __return ) : nil
    }

    override open class func createUI( _ _arg0: javax_swing.JComponent? ) -> javax_swing.ComponentUI! {
        return createUI( arg0: _arg0 )
    }

    /// static int com.apple.laf.AquaFileChooserUI.parseTraversableProperty(java.lang.String)

    // Skipping method: true false false false false 

    /// private boolean com.apple.laf.AquaFileChooserUI.containsFileFilter(java.lang.Object)

    /// javax.swing.JButton com.apple.laf.AquaFileChooserUI.createButton(int,java.lang.String)

    // Skipping method: true false false false false 

    /// protected com.apple.laf.AquaFileChooserUI$DirectoryComboBoxModel com.apple.laf.AquaFileChooserUI.createDirectoryComboBoxModel(javax.swing.JFileChooser)

    private static var createDirectoryComboBoxModel_MethodID_3: jmethodID?

    open func createDirectoryComboBoxModel( arg0: javax_swing.JFileChooser? ) -> /* class com.apple.laf.AquaFileChooserUI$DirectoryComboBoxModel */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createDirectoryComboBoxModel", methodSig: "(Ljavax/swing/JFileChooser;)Lcom/apple/laf/AquaFileChooserUI$DirectoryComboBoxModel;", methodCache: &AquaFileChooserUI.createDirectoryComboBoxModel_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class com.apple.laf.AquaFileChooserUI$DirectoryComboBoxModel */ UnavailableObject( javaObject: __return ) : nil
    }

    open func createDirectoryComboBoxModel( _ _arg0: javax_swing.JFileChooser? ) -> /* class com.apple.laf.AquaFileChooserUI$DirectoryComboBoxModel */ UnavailableObject! {
        return createDirectoryComboBoxModel( arg0: _arg0 )
    }

    /// protected javax.swing.ListCellRenderer com.apple.laf.AquaFileChooserUI.createDirectoryComboBoxRenderer(javax.swing.JFileChooser)

    private static var createDirectoryComboBoxRenderer_MethodID_4: jmethodID?

    open func createDirectoryComboBoxRenderer( arg0: javax_swing.JFileChooser? ) -> javax_swing.ListCellRenderer! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createDirectoryComboBoxRenderer", methodSig: "(Ljavax/swing/JFileChooser;)Ljavax/swing/ListCellRenderer;", methodCache: &AquaFileChooserUI.createDirectoryComboBoxRenderer_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.ListCellRendererForward( javaObject: __return ) : nil
    }

    open func createDirectoryComboBoxRenderer( _ _arg0: javax_swing.JFileChooser? ) -> javax_swing.ListCellRenderer! {
        return createDirectoryComboBoxRenderer( arg0: _arg0 )
    }

    /// protected java.awt.event.MouseListener com.apple.laf.AquaFileChooserUI.createDoubleClickListener(javax.swing.JFileChooser,com.apple.laf.AquaFileChooserUI$JTableExtension)

    private static var createDoubleClickListener_MethodID_5: jmethodID?

    open func createDoubleClickListener( arg0: javax_swing.JFileChooser?, arg1: /* class com.apple.laf.AquaFileChooserUI$JTableExtension */ UnavailableObject? ) -> java_awt.MouseListener! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createDoubleClickListener", methodSig: "(Ljavax/swing/JFileChooser;Lcom/apple/laf/AquaFileChooserUI$JTableExtension;)Ljava/awt/event/MouseListener;", methodCache: &AquaFileChooserUI.createDoubleClickListener_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.MouseListenerForward( javaObject: __return ) : nil
    }

    open func createDoubleClickListener( _ _arg0: javax_swing.JFileChooser?, _ _arg1: /* class com.apple.laf.AquaFileChooserUI$JTableExtension */ UnavailableObject? ) -> java_awt.MouseListener! {
        return createDoubleClickListener( arg0: _arg0, arg1: _arg1 )
    }

    /// protected com.apple.laf.AquaFileChooserUI$FilterComboBoxModel com.apple.laf.AquaFileChooserUI.createFilterComboBoxModel()

    private static var createFilterComboBoxModel_MethodID_6: jmethodID?

    open func createFilterComboBoxModel() -> /* class com.apple.laf.AquaFileChooserUI$FilterComboBoxModel */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createFilterComboBoxModel", methodSig: "()Lcom/apple/laf/AquaFileChooserUI$FilterComboBoxModel;", methodCache: &AquaFileChooserUI.createFilterComboBoxModel_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class com.apple.laf.AquaFileChooserUI$FilterComboBoxModel */ UnavailableObject( javaObject: __return ) : nil
    }


    /// protected javax.swing.ListCellRenderer com.apple.laf.AquaFileChooserUI.createFilterComboBoxRenderer()

    private static var createFilterComboBoxRenderer_MethodID_7: jmethodID?

    open func createFilterComboBoxRenderer() -> javax_swing.ListCellRenderer! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createFilterComboBoxRenderer", methodSig: "()Ljavax/swing/ListCellRenderer;", methodCache: &AquaFileChooserUI.createFilterComboBoxRenderer_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.ListCellRendererForward( javaObject: __return ) : nil
    }


    /// protected javax.swing.JPanel com.apple.laf.AquaFileChooserUI.createList(javax.swing.JFileChooser)

    private static var createList_MethodID_8: jmethodID?

    open func createList( arg0: javax_swing.JFileChooser? ) -> javax_swing.JPanel! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createList", methodSig: "(Ljavax/swing/JFileChooser;)Ljavax/swing/JPanel;", methodCache: &AquaFileChooserUI.createList_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.JPanel( javaObject: __return ) : nil
    }

    open func createList( _ _arg0: javax_swing.JFileChooser? ) -> javax_swing.JPanel! {
        return createList( arg0: _arg0 )
    }

    /// public javax.swing.event.ListSelectionListener com.apple.laf.AquaFileChooserUI.createListSelectionListener(javax.swing.JFileChooser)

    private static var createListSelectionListener_MethodID_9: jmethodID?

    open func createListSelectionListener( arg0: javax_swing.JFileChooser? ) -> javax_swing.ListSelectionListener! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createListSelectionListener", methodSig: "(Ljavax/swing/JFileChooser;)Ljavax/swing/event/ListSelectionListener;", methodCache: &AquaFileChooserUI.createListSelectionListener_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.ListSelectionListenerForward( javaObject: __return ) : nil
    }

    open func createListSelectionListener( _ _arg0: javax_swing.JFileChooser? ) -> javax_swing.ListSelectionListener! {
        return createListSelectionListener( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaFileChooserUI.createModel()

    private static var createModel_MethodID_10: jmethodID?

    open func createModel() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "createModel", methodSig: "()V", methodCache: &AquaFileChooserUI.createModel_MethodID_10, args: &__args, locals: &__locals )
    }


    /// javax.swing.JButton com.apple.laf.AquaFileChooserUI.createNewFolderButton()

    // Skipping method: true false false false false 

    /// protected java.beans.PropertyChangeListener com.apple.laf.AquaFileChooserUI.createPropertyChangeListener(javax.swing.JFileChooser)

    private static var createPropertyChangeListener_MethodID_11: jmethodID?

    open func createPropertyChangeListener( arg0: javax_swing.JFileChooser? ) -> /* interface java.beans.PropertyChangeListener */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createPropertyChangeListener", methodSig: "(Ljavax/swing/JFileChooser;)Ljava/beans/PropertyChangeListener;", methodCache: &AquaFileChooserUI.createPropertyChangeListener_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface java.beans.PropertyChangeListener */ UnavailableProtocolForward( javaObject: __return ) : nil
    }

    open func createPropertyChangeListener( _ _arg0: javax_swing.JFileChooser? ) -> /* interface java.beans.PropertyChangeListener */ UnavailableProtocol! {
        return createPropertyChangeListener( arg0: _arg0 )
    }

    /// void com.apple.laf.AquaFileChooserUI.doControlButtonsChanged(java.beans.PropertyChangeEvent)

    // Skipping method: true false false false false 

    /// public void com.apple.laf.AquaFileChooserUI.ensureFileIsVisible(javax.swing.JFileChooser,java.io.File)

    private static var ensureFileIsVisible_MethodID_12: jmethodID?

    open func ensureFileIsVisible( arg0: javax_swing.JFileChooser?, arg1: /* class java.io.File */ UnavailableObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "ensureFileIsVisible", methodSig: "(Ljavax/swing/JFileChooser;Ljava/io/File;)V", methodCache: &AquaFileChooserUI.ensureFileIsVisible_MethodID_12, args: &__args, locals: &__locals )
    }

    override open func ensureFileIsVisible( _ _arg0: javax_swing.JFileChooser?, _ _arg1: /* class java.io.File */ UnavailableObject? ) {
        ensureFileIsVisible( arg0: _arg0, arg1: _arg1 )
    }

    /// public javax.swing.filechooser.FileFilter com.apple.laf.AquaFileChooserUI.getAcceptAllFileFilter(javax.swing.JFileChooser)

    private static var getAcceptAllFileFilter_MethodID_13: jmethodID?

    open func getAcceptAllFileFilter( arg0: javax_swing.JFileChooser? ) -> javax_swing.FileFilter! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAcceptAllFileFilter", methodSig: "(Ljavax/swing/JFileChooser;)Ljavax/swing/filechooser/FileFilter;", methodCache: &AquaFileChooserUI.getAcceptAllFileFilter_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.FileFilter( javaObject: __return ) : nil
    }

    override open func getAcceptAllFileFilter( _ _arg0: javax_swing.JFileChooser? ) -> javax_swing.FileFilter! {
        return getAcceptAllFileFilter( arg0: _arg0 )
    }

    /// public javax.swing.JPanel com.apple.laf.AquaFileChooserUI.getAccessoryPanel()

    private static var getAccessoryPanel_MethodID_14: jmethodID?

    open func getAccessoryPanel() -> javax_swing.JPanel! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessoryPanel", methodSig: "()Ljavax/swing/JPanel;", methodCache: &AquaFileChooserUI.getAccessoryPanel_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.JPanel( javaObject: __return ) : nil
    }


    /// javax.swing.AbstractAction com.apple.laf.AquaFileChooserUI.getAction(int)

    // Skipping method: true false false false false 

    /// protected javax.swing.JButton com.apple.laf.AquaFileChooserUI.getApproveButton(javax.swing.JFileChooser)

    private static var getApproveButton_MethodID_15: jmethodID?

    open func getApproveButton( arg0: javax_swing.JFileChooser? ) -> javax_swing.JButton! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getApproveButton", methodSig: "(Ljavax/swing/JFileChooser;)Ljavax/swing/JButton;", methodCache: &AquaFileChooserUI.getApproveButton_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.JButton( javaObject: __return ) : nil
    }

    open func getApproveButton( _ _arg0: javax_swing.JFileChooser? ) -> javax_swing.JButton! {
        return getApproveButton( arg0: _arg0 )
    }

    /// public int com.apple.laf.AquaFileChooserUI.getApproveButtonMnemonic(javax.swing.JFileChooser)

    private static var getApproveButtonMnemonic_MethodID_16: jmethodID?

    open func getApproveButtonMnemonic( arg0: javax_swing.JFileChooser? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getApproveButtonMnemonic", methodSig: "(Ljavax/swing/JFileChooser;)I", methodCache: &AquaFileChooserUI.getApproveButtonMnemonic_MethodID_16, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func getApproveButtonMnemonic( _ _arg0: javax_swing.JFileChooser? ) -> Int {
        return getApproveButtonMnemonic( arg0: _arg0 )
    }

    /// public java.lang.String com.apple.laf.AquaFileChooserUI.getApproveButtonText(javax.swing.JFileChooser)

    private static var getApproveButtonText_MethodID_17: jmethodID?

    open func getApproveButtonText( arg0: javax_swing.JFileChooser? ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getApproveButtonText", methodSig: "(Ljavax/swing/JFileChooser;)Ljava/lang/String;", methodCache: &AquaFileChooserUI.getApproveButtonText_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    override open func getApproveButtonText( _ _arg0: javax_swing.JFileChooser? ) -> String! {
        return getApproveButtonText( arg0: _arg0 )
    }

    /// public java.lang.String com.apple.laf.AquaFileChooserUI.getApproveButtonToolTipText(javax.swing.JFileChooser)

    private static var getApproveButtonToolTipText_MethodID_18: jmethodID?

    open func getApproveButtonToolTipText( arg0: javax_swing.JFileChooser? ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getApproveButtonToolTipText", methodSig: "(Ljavax/swing/JFileChooser;)Ljava/lang/String;", methodCache: &AquaFileChooserUI.getApproveButtonToolTipText_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open func getApproveButtonToolTipText( _ _arg0: javax_swing.JFileChooser? ) -> String! {
        return getApproveButtonToolTipText( arg0: _arg0 )
    }

    /// protected java.lang.String com.apple.laf.AquaFileChooserUI.getCancelButtonToolTipText(javax.swing.JFileChooser)

    private static var getCancelButtonToolTipText_MethodID_19: jmethodID?

    open func getCancelButtonToolTipText( arg0: javax_swing.JFileChooser? ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCancelButtonToolTipText", methodSig: "(Ljavax/swing/JFileChooser;)Ljava/lang/String;", methodCache: &AquaFileChooserUI.getCancelButtonToolTipText_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open func getCancelButtonToolTipText( _ _arg0: javax_swing.JFileChooser? ) -> String! {
        return getCancelButtonToolTipText( arg0: _arg0 )
    }

    /// synchronized com.apple.laf.AquaFileChooserUI$FCSubpanel com.apple.laf.AquaFileChooserUI.getCustomDirOrAnyPanel()

    // Skipping method: true false false false false 

    /// synchronized com.apple.laf.AquaFileChooserUI$FCSubpanel com.apple.laf.AquaFileChooserUI.getCustomFilePanel()

    // Skipping method: true false false false false 

    /// public java.lang.String com.apple.laf.AquaFileChooserUI.getDialogTitle(javax.swing.JFileChooser)

    private static var getDialogTitle_MethodID_20: jmethodID?

    open func getDialogTitle( arg0: javax_swing.JFileChooser? ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDialogTitle", methodSig: "(Ljavax/swing/JFileChooser;)Ljava/lang/String;", methodCache: &AquaFileChooserUI.getDialogTitle_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    override open func getDialogTitle( _ _arg0: javax_swing.JFileChooser? ) -> String! {
        return getDialogTitle( arg0: _arg0 )
    }

    /// public java.lang.String com.apple.laf.AquaFileChooserUI.getDirectoryName()

    private static var getDirectoryName_MethodID_21: jmethodID?

    open func getDirectoryName() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDirectoryName", methodSig: "()Ljava/lang/String;", methodCache: &AquaFileChooserUI.getDirectoryName_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public javax.swing.JFileChooser com.apple.laf.AquaFileChooserUI.getFileChooser()

    private static var getFileChooser_MethodID_22: jmethodID?

    open func getFileChooser() -> javax_swing.JFileChooser! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFileChooser", methodSig: "()Ljavax/swing/JFileChooser;", methodCache: &AquaFileChooserUI.getFileChooser_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.JFileChooser( javaObject: __return ) : nil
    }


    /// public java.lang.String com.apple.laf.AquaFileChooserUI.getFileName()

    private static var getFileName_MethodID_23: jmethodID?

    open func getFileName() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFileName", methodSig: "()Ljava/lang/String;", methodCache: &AquaFileChooserUI.getFileName_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public javax.swing.filechooser.FileView com.apple.laf.AquaFileChooserUI.getFileView(javax.swing.JFileChooser)

    private static var getFileView_MethodID_24: jmethodID?

    open func getFileView( arg0: javax_swing.JFileChooser? ) -> javax_swing.FileView! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFileView", methodSig: "(Ljavax/swing/JFileChooser;)Ljavax/swing/filechooser/FileView;", methodCache: &AquaFileChooserUI.getFileView_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.FileView( javaObject: __return ) : nil
    }

    override open func getFileView( _ _arg0: javax_swing.JFileChooser? ) -> javax_swing.FileView! {
        return getFileView( arg0: _arg0 )
    }

    /// java.io.File com.apple.laf.AquaFileChooserUI.getFirstSelectedItem()

    // Skipping method: true false false false false 

    /// public java.awt.Dimension com.apple.laf.AquaFileChooserUI.getMaximumSize(javax.swing.JComponent)

    private static var getMaximumSize_MethodID_25: jmethodID?

    open func getMaximumSize( arg0: javax_swing.JComponent? ) -> java_awt.Dimension! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMaximumSize", methodSig: "(Ljavax/swing/JComponent;)Ljava/awt/Dimension;", methodCache: &AquaFileChooserUI.getMaximumSize_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }

    override open func getMaximumSize( _ _arg0: javax_swing.JComponent? ) -> java_awt.Dimension! {
        return getMaximumSize( arg0: _arg0 )
    }

    /// public java.awt.Dimension com.apple.laf.AquaFileChooserUI.getMinimumSize(javax.swing.JComponent)

    private static var getMinimumSize_MethodID_26: jmethodID?

    open func getMinimumSize( arg0: javax_swing.JComponent? ) -> java_awt.Dimension! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMinimumSize", methodSig: "(Ljavax/swing/JComponent;)Ljava/awt/Dimension;", methodCache: &AquaFileChooserUI.getMinimumSize_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }

    override open func getMinimumSize( _ _arg0: javax_swing.JComponent? ) -> java_awt.Dimension! {
        return getMinimumSize( arg0: _arg0 )
    }

    /// com.apple.laf.AquaFileSystemModel com.apple.laf.AquaFileChooserUI.getModel()

    // Skipping method: true false false false false 

    /// synchronized com.apple.laf.AquaFileChooserUI$FCSubpanel com.apple.laf.AquaFileChooserUI.getOpenDirOrAnyPanel()

    // Skipping method: true false false false false 

    /// synchronized com.apple.laf.AquaFileChooserUI$FCSubpanel com.apple.laf.AquaFileChooserUI.getOpenFilePanel()

    // Skipping method: true false false false false 

    /// public java.awt.Dimension com.apple.laf.AquaFileChooserUI.getPreferredSize(javax.swing.JComponent)

    private static var getPreferredSize_MethodID_27: jmethodID?

    open func getPreferredSize( arg0: javax_swing.JComponent? ) -> java_awt.Dimension! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPreferredSize", methodSig: "(Ljavax/swing/JComponent;)Ljava/awt/Dimension;", methodCache: &AquaFileChooserUI.getPreferredSize_MethodID_27, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }

    override open func getPreferredSize( _ _arg0: javax_swing.JComponent? ) -> java_awt.Dimension! {
        return getPreferredSize( arg0: _arg0 )
    }

    /// synchronized com.apple.laf.AquaFileChooserUI$FCSubpanel com.apple.laf.AquaFileChooserUI.getSaveFilePanel()

    // Skipping method: true false false false false 

    /// java.lang.String com.apple.laf.AquaFileChooserUI.getString(java.lang.String,java.lang.String)

    // Skipping method: true false false false false 

    /// public void com.apple.laf.AquaFileChooserUI.installComponents(javax.swing.JFileChooser)

    private static var installComponents_MethodID_28: jmethodID?

    open func installComponents( arg0: javax_swing.JFileChooser? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installComponents", methodSig: "(Ljavax/swing/JFileChooser;)V", methodCache: &AquaFileChooserUI.installComponents_MethodID_28, args: &__args, locals: &__locals )
    }

    open func installComponents( _ _arg0: javax_swing.JFileChooser? ) {
        installComponents( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaFileChooserUI.installDefaults(javax.swing.JFileChooser)

    private static var installDefaults_MethodID_29: jmethodID?

    open func installDefaults( arg0: javax_swing.JFileChooser? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installDefaults", methodSig: "(Ljavax/swing/JFileChooser;)V", methodCache: &AquaFileChooserUI.installDefaults_MethodID_29, args: &__args, locals: &__locals )
    }

    open func installDefaults( _ _arg0: javax_swing.JFileChooser? ) {
        installDefaults( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaFileChooserUI.installIcons(javax.swing.JFileChooser)

    private static var installIcons_MethodID_30: jmethodID?

    open func installIcons( arg0: javax_swing.JFileChooser? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installIcons", methodSig: "(Ljavax/swing/JFileChooser;)V", methodCache: &AquaFileChooserUI.installIcons_MethodID_30, args: &__args, locals: &__locals )
    }

    open func installIcons( _ _arg0: javax_swing.JFileChooser? ) {
        installIcons( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaFileChooserUI.installListeners(javax.swing.JFileChooser)

    private static var installListeners_MethodID_31: jmethodID?

    open func installListeners( arg0: javax_swing.JFileChooser? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installListeners", methodSig: "(Ljavax/swing/JFileChooser;)V", methodCache: &AquaFileChooserUI.installListeners_MethodID_31, args: &__args, locals: &__locals )
    }

    open func installListeners( _ _arg0: javax_swing.JFileChooser? ) {
        installListeners( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaFileChooserUI.installStrings(javax.swing.JFileChooser)

    private static var installStrings_MethodID_32: jmethodID?

    open func installStrings( arg0: javax_swing.JFileChooser? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installStrings", methodSig: "(Ljavax/swing/JFileChooser;)V", methodCache: &AquaFileChooserUI.installStrings_MethodID_32, args: &__args, locals: &__locals )
    }

    open func installStrings( _ _arg0: javax_swing.JFileChooser? ) {
        installStrings( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaFileChooserUI.installUI(javax.swing.JComponent)

    private static var installUI_MethodID_33: jmethodID?

    open func installUI( arg0: javax_swing.JComponent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installUI", methodSig: "(Ljavax/swing/JComponent;)V", methodCache: &AquaFileChooserUI.installUI_MethodID_33, args: &__args, locals: &__locals )
    }

    override open func installUI( _ _arg0: javax_swing.JComponent? ) {
        installUI( arg0: _arg0 )
    }

    /// boolean com.apple.laf.AquaFileChooserUI.isSelectableForMode(javax.swing.JFileChooser,java.io.File)

    // Skipping method: true false false false false 

    /// boolean com.apple.laf.AquaFileChooserUI.isSelectableInList(java.io.File)

    // Skipping method: true false false false false 

    /// java.io.File com.apple.laf.AquaFileChooserUI.makeFile(javax.swing.JFileChooser,java.lang.String)

    // Skipping method: true false false false false 

    /// protected boolean com.apple.laf.AquaFileChooserUI.openDirectory(java.io.File)

    private static var openDirectory_MethodID_34: jmethodID?

    open func openDirectory( arg0: /* class java.io.File */ UnavailableObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "openDirectory", methodSig: "(Ljava/io/File;)Z", methodCache: &AquaFileChooserUI.openDirectory_MethodID_34, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func openDirectory( _ _arg0: /* class java.io.File */ UnavailableObject? ) -> Bool {
        return openDirectory( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaFileChooserUI.rescanCurrentDirectory(javax.swing.JFileChooser)

    private static var rescanCurrentDirectory_MethodID_35: jmethodID?

    open func rescanCurrentDirectory( arg0: javax_swing.JFileChooser? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "rescanCurrentDirectory", methodSig: "(Ljavax/swing/JFileChooser;)V", methodCache: &AquaFileChooserUI.rescanCurrentDirectory_MethodID_35, args: &__args, locals: &__locals )
    }

    override open func rescanCurrentDirectory( _ _arg0: javax_swing.JFileChooser? ) {
        rescanCurrentDirectory( arg0: _arg0 )
    }

    /// void com.apple.laf.AquaFileChooserUI.setApplicationIsTraversable(java.lang.Object)

    // Skipping method: true false false false false 

    /// void com.apple.laf.AquaFileChooserUI.setBottomPanelForMode(javax.swing.JFileChooser)

    // Skipping method: true false false false false 

    /// void com.apple.laf.AquaFileChooserUI.setDefaultButtonForMode(javax.swing.JFileChooser)

    // Skipping method: true false false false false 

    /// public void com.apple.laf.AquaFileChooserUI.setDirectoryName(java.lang.String)

    private static var setDirectoryName_MethodID_36: jmethodID?

    open func setDirectoryName( arg0: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDirectoryName", methodSig: "(Ljava/lang/String;)V", methodCache: &AquaFileChooserUI.setDirectoryName_MethodID_36, args: &__args, locals: &__locals )
    }

    open func setDirectoryName( _ _arg0: String? ) {
        setDirectoryName( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaFileChooserUI.setFileName(java.lang.String)

    private static var setFileName_MethodID_37: jmethodID?

    open func setFileName( arg0: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFileName", methodSig: "(Ljava/lang/String;)V", methodCache: &AquaFileChooserUI.setFileName_MethodID_37, args: &__args, locals: &__locals )
    }

    open func setFileName( _ _arg0: String? ) {
        setFileName( arg0: _arg0 )
    }

    /// void com.apple.laf.AquaFileChooserUI.setFocusForMode(javax.swing.JFileChooser)

    // Skipping method: true false false false false 

    /// void com.apple.laf.AquaFileChooserUI.setPackageIsTraversable(java.lang.Object)

    // Skipping method: true false false false false 

    /// boolean com.apple.laf.AquaFileChooserUI.textfieldIsValid()

    // Skipping method: true false false false false 

    /// public void com.apple.laf.AquaFileChooserUI.uninstallComponents(javax.swing.JFileChooser)

    private static var uninstallComponents_MethodID_38: jmethodID?

    open func uninstallComponents( arg0: javax_swing.JFileChooser? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallComponents", methodSig: "(Ljavax/swing/JFileChooser;)V", methodCache: &AquaFileChooserUI.uninstallComponents_MethodID_38, args: &__args, locals: &__locals )
    }

    open func uninstallComponents( _ _arg0: javax_swing.JFileChooser? ) {
        uninstallComponents( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaFileChooserUI.uninstallDefaults(javax.swing.JFileChooser)

    private static var uninstallDefaults_MethodID_39: jmethodID?

    open func uninstallDefaults( arg0: javax_swing.JFileChooser? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallDefaults", methodSig: "(Ljavax/swing/JFileChooser;)V", methodCache: &AquaFileChooserUI.uninstallDefaults_MethodID_39, args: &__args, locals: &__locals )
    }

    open func uninstallDefaults( _ _arg0: javax_swing.JFileChooser? ) {
        uninstallDefaults( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaFileChooserUI.uninstallIcons(javax.swing.JFileChooser)

    private static var uninstallIcons_MethodID_40: jmethodID?

    open func uninstallIcons( arg0: javax_swing.JFileChooser? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallIcons", methodSig: "(Ljavax/swing/JFileChooser;)V", methodCache: &AquaFileChooserUI.uninstallIcons_MethodID_40, args: &__args, locals: &__locals )
    }

    open func uninstallIcons( _ _arg0: javax_swing.JFileChooser? ) {
        uninstallIcons( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaFileChooserUI.uninstallListeners(javax.swing.JFileChooser)

    private static var uninstallListeners_MethodID_41: jmethodID?

    open func uninstallListeners( arg0: javax_swing.JFileChooser? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallListeners", methodSig: "(Ljavax/swing/JFileChooser;)V", methodCache: &AquaFileChooserUI.uninstallListeners_MethodID_41, args: &__args, locals: &__locals )
    }

    open func uninstallListeners( _ _arg0: javax_swing.JFileChooser? ) {
        uninstallListeners( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaFileChooserUI.uninstallStrings(javax.swing.JFileChooser)

    private static var uninstallStrings_MethodID_42: jmethodID?

    open func uninstallStrings( arg0: javax_swing.JFileChooser? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallStrings", methodSig: "(Ljavax/swing/JFileChooser;)V", methodCache: &AquaFileChooserUI.uninstallStrings_MethodID_42, args: &__args, locals: &__locals )
    }

    open func uninstallStrings( _ _arg0: javax_swing.JFileChooser? ) {
        uninstallStrings( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaFileChooserUI.uninstallUI(javax.swing.JComponent)

    private static var uninstallUI_MethodID_43: jmethodID?

    open func uninstallUI( arg0: javax_swing.JComponent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallUI", methodSig: "(Ljavax/swing/JComponent;)V", methodCache: &AquaFileChooserUI.uninstallUI_MethodID_43, args: &__args, locals: &__locals )
    }

    override open func uninstallUI( _ _arg0: javax_swing.JComponent? ) {
        uninstallUI( arg0: _arg0 )
    }

    /// void com.apple.laf.AquaFileChooserUI.updateApproveButton(javax.swing.JFileChooser)

    // Skipping method: true false false false false 

    /// void com.apple.laf.AquaFileChooserUI.updateButtonState(javax.swing.JFileChooser)

    // Skipping method: true false false false false 

}

