
import java_swift
import javax_swing
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home ///
/// Tue Aug 08 14:27:28 BST 2017 ///

/// class com.apple.laf.AquaHighlighter$AquaHighlightPainter ///

open class AquaHighlighter_AquaHighlightPainter: javax_swing.DefaultHighlighter_DefaultHighlightPainter {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaHighlighter_AquaHighlightPainterJNIClass: jclass?

    /// java.awt.Color com.apple.laf.AquaHighlighter$AquaHighlightPainter.selectionColor

    /// java.awt.Color com.apple.laf.AquaHighlighter$AquaHighlightPainter.disabledSelectionColor

    /// private java.awt.Color javax.swing.text.DefaultHighlighter$DefaultHighlightPainter.color

    /// public com.apple.laf.AquaHighlighter$AquaHighlightPainter(java.awt.Color)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: java_awt.Color? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaHighlighter$AquaHighlightPainter", classCache: &AquaHighlighter_AquaHighlightPainter.AquaHighlighter_AquaHighlightPainterJNIClass, methodSig: "(Ljava/awt/Color;)V", methodCache: &AquaHighlighter_AquaHighlightPainter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: java_awt.Color? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.awt.Color com.apple.laf.AquaHighlighter$AquaHighlightPainter.getColor()

    /// public void com.apple.laf.AquaHighlighter$AquaHighlightPainter.paint(java.awt.Graphics,int,int,java.awt.Shape,javax.swing.text.JTextComponent)

    private static var paint_MethodID_2: jmethodID?

    open func paint( arg0: java_awt.Graphics?, arg1: Int, arg2: Int, arg3: java_awt.Shape?, arg4: javax_swing.JTextComponent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        __args[3] = JNIType.toJava( value: arg3, locals: &__locals )
        __args[4] = JNIType.toJava( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paint", methodSig: "(Ljava/awt/Graphics;IILjava/awt/Shape;Ljavax/swing/text/JTextComponent;)V", methodCache: &AquaHighlighter_AquaHighlightPainter.paint_MethodID_2, args: &__args, locals: &__locals )
    }

    override open func paint( _ _arg0: java_awt.Graphics?, _ _arg1: Int, _ _arg2: Int, _ _arg3: java_awt.Shape?, _ _arg4: javax_swing.JTextComponent? ) {
        paint( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// void com.apple.laf.AquaHighlighter$AquaHighlightPainter.setColor(javax.swing.text.JTextComponent)

    /// protected java.awt.Color com.apple.laf.AquaHighlighter$AquaHighlightPainter.getInactiveSelectionColor()

    private static var getInactiveSelectionColor_MethodID_3: jmethodID?

    open func getInactiveSelectionColor() -> java_awt.Color! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getInactiveSelectionColor", methodSig: "()Ljava/awt/Color;", methodCache: &AquaHighlighter_AquaHighlightPainter.getInactiveSelectionColor_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Color( javaObject: __return ) : nil
    }


    /// public java.awt.Shape com.apple.laf.AquaHighlighter$AquaHighlightPainter.paintLayer(java.awt.Graphics,int,int,java.awt.Shape,javax.swing.text.JTextComponent,javax.swing.text.View)

    private static var paintLayer_MethodID_4: jmethodID?

    open func paintLayer( arg0: java_awt.Graphics?, arg1: Int, arg2: Int, arg3: java_awt.Shape?, arg4: javax_swing.JTextComponent?, arg5: javax_swing.View? ) -> java_awt.Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        __args[3] = JNIType.toJava( value: arg3, locals: &__locals )
        __args[4] = JNIType.toJava( value: arg4, locals: &__locals )
        __args[5] = JNIType.toJava( value: arg5, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "paintLayer", methodSig: "(Ljava/awt/Graphics;IILjava/awt/Shape;Ljavax/swing/text/JTextComponent;Ljavax/swing/text/View;)Ljava/awt/Shape;", methodCache: &AquaHighlighter_AquaHighlightPainter.paintLayer_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.ShapeForward( javaObject: __return ) : nil
    }

    override open func paintLayer( _ _arg0: java_awt.Graphics?, _ _arg1: Int, _ _arg2: Int, _ _arg3: java_awt.Shape?, _ _arg4: javax_swing.JTextComponent?, _ _arg5: javax_swing.View? ) -> java_awt.Shape! {
        return paintLayer( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

}

