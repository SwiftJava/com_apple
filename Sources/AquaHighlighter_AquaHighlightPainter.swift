
import java_swift
import javax_swing
import java_lang
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:52:06 GMT 2016 ///

/// class com.apple.laf.AquaHighlighter$AquaHighlightPainter ///

open class AquaHighlighter_AquaHighlightPainter: javax_swing.DefaultHighlighter_DefaultHighlightPainter {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "com.apple.laf.AquaHighlighter$AquaHighlightPainter", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaHighlighter_AquaHighlightPainterJNIClass: jclass?

    /// java.awt.Color com.apple.laf.AquaHighlighter$AquaHighlightPainter.selectionColor

    /// java.awt.Color com.apple.laf.AquaHighlighter$AquaHighlightPainter.disabledSelectionColor

    /// private java.awt.Color javax.swing.text.DefaultHighlighter$DefaultHighlightPainter.color

    /// public com.apple.laf.AquaHighlighter$AquaHighlightPainter(java.awt.Color)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: java_awt.Color? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaHighlighter$AquaHighlightPainter", classCache: &AquaHighlighter_AquaHighlightPainter.AquaHighlighter_AquaHighlightPainterJNIClass, methodSig: "(Ljava/awt/Color;)V", methodCache: &AquaHighlighter_AquaHighlightPainter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: java_awt.Color? ) {
        self.init( arg0: _arg0 )
    }

    /// void com.apple.laf.AquaHighlighter$AquaHighlightPainter.setColor(javax.swing.text.JTextComponent)

    /// public void com.apple.laf.AquaHighlighter$AquaHighlightPainter.paint(java.awt.Graphics,int,int,java.awt.Shape,javax.swing.text.JTextComponent)

    /// public java.awt.Color com.apple.laf.AquaHighlighter$AquaHighlightPainter.getColor()

    /// protected java.awt.Color com.apple.laf.AquaHighlighter$AquaHighlightPainter.getInactiveSelectionColor()

    private static var getInactiveSelectionColor_MethodID_2: jmethodID?

    open func getInactiveSelectionColor() -> java_awt.Color! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getInactiveSelectionColor", methodSig: "()Ljava/awt/Color;", methodCache: &AquaHighlighter_AquaHighlightPainter.getInactiveSelectionColor_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Color( javaObject: __return ) : nil
    }


    /// public java.awt.Shape com.apple.laf.AquaHighlighter$AquaHighlightPainter.paintLayer(java.awt.Graphics,int,int,java.awt.Shape,javax.swing.text.JTextComponent,javax.swing.text.View)

}
