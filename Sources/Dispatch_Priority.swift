
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:52:04 GMT 2016 ///

/// class com.apple.concurrent.Dispatch$Priority ///

open class Dispatch_Priority: java_lang.Enum {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "com.apple.concurrent.Dispatch$Priority", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var Dispatch_PriorityJNIClass: jclass?

    /// public static final com.apple.concurrent.Dispatch$Priority com.apple.concurrent.Dispatch$Priority.LOW

    private static var LOW_FieldID: jfieldID?

    open static var LOW: Dispatch_Priority! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "LOW", fieldType: "Lcom/apple/concurrent/Dispatch$Priority;", fieldCache: &LOW_FieldID, className: "com/apple/concurrent/Dispatch$Priority", classCache: &Dispatch_PriorityJNIClass )
            return __value != nil ? Dispatch_Priority( javaObject: __value ) : nil
        }
    }

    /// public static final com.apple.concurrent.Dispatch$Priority com.apple.concurrent.Dispatch$Priority.NORMAL

    private static var NORMAL_FieldID: jfieldID?

    open static var NORMAL: Dispatch_Priority! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "NORMAL", fieldType: "Lcom/apple/concurrent/Dispatch$Priority;", fieldCache: &NORMAL_FieldID, className: "com/apple/concurrent/Dispatch$Priority", classCache: &Dispatch_PriorityJNIClass )
            return __value != nil ? Dispatch_Priority( javaObject: __value ) : nil
        }
    }

    /// public static final com.apple.concurrent.Dispatch$Priority com.apple.concurrent.Dispatch$Priority.HIGH

    private static var HIGH_FieldID: jfieldID?

    open static var HIGH: Dispatch_Priority! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "HIGH", fieldType: "Lcom/apple/concurrent/Dispatch$Priority;", fieldCache: &HIGH_FieldID, className: "com/apple/concurrent/Dispatch$Priority", classCache: &Dispatch_PriorityJNIClass )
            return __value != nil ? Dispatch_Priority( javaObject: __value ) : nil
        }
    }

    /// final int com.apple.concurrent.Dispatch$Priority.nativePriority

    /// private static final com.apple.concurrent.Dispatch$Priority[] com.apple.concurrent.Dispatch$Priority.$VALUES

    /// private final java.lang.String java.lang.Enum.name

    /// private final int java.lang.Enum.ordinal

    /// private com.apple.concurrent.Dispatch$Priority(java.lang.String,int,int)

    /// public static com.apple.concurrent.Dispatch$Priority[] com.apple.concurrent.Dispatch$Priority.values()

    private static var values_MethodID_1: jmethodID?

    open class func values() -> [Dispatch_Priority]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/concurrent/Dispatch$Priority", classCache: &Dispatch_PriorityJNIClass, methodName: "values", methodSig: "()[Lcom/apple/concurrent/Dispatch$Priority;", methodCache: &values_MethodID_1, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Dispatch_Priority](), from: __return )
    }


    /// public static com.apple.concurrent.Dispatch$Priority com.apple.concurrent.Dispatch$Priority.valueOf(java.lang.String)

    private static var valueOf_MethodID_2: jmethodID?

    open class func valueOf( arg0: String? ) -> Dispatch_Priority! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/concurrent/Dispatch$Priority", classCache: &Dispatch_PriorityJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Lcom/apple/concurrent/Dispatch$Priority;", methodCache: &valueOf_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dispatch_Priority( javaObject: __return ) : nil
    }

    open class func valueOf( _ _arg0: String? ) -> Dispatch_Priority! {
        return valueOf( arg0: _arg0 )
    }

}
