
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:52:04 GMT 2016 ///

/// interface com.apple.eawt.QuitHandler ///

public protocol QuitHandler: JavaProtocol {

    /// public abstract void com.apple.eawt.QuitHandler.handleQuitRequestWith(com.apple.eawt.AppEvent$QuitEvent,com.apple.eawt.QuitResponse)

    func handleQuitRequestWith( arg0: AppEvent_QuitEvent?, arg1: QuitResponse? )
    func handleQuitRequestWith( _ _arg0: AppEvent_QuitEvent?, _ _arg1: QuitResponse? )

}

open class QuitHandlerForward: JNIObjectForward, QuitHandler {

    private static var QuitHandlerJNIClass: jclass?

    /// public abstract void com.apple.eawt.QuitHandler.handleQuitRequestWith(com.apple.eawt.AppEvent$QuitEvent,com.apple.eawt.QuitResponse)

    private static var handleQuitRequestWith_MethodID_2: jmethodID?

    open func handleQuitRequestWith( arg0: AppEvent_QuitEvent?, arg1: QuitResponse? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "handleQuitRequestWith", methodSig: "(Lcom/apple/eawt/AppEvent$QuitEvent;Lcom/apple/eawt/QuitResponse;)V", methodCache: &QuitHandlerForward.handleQuitRequestWith_MethodID_2, args: &__args, locals: &__locals )
    }

    open func handleQuitRequestWith( _ _arg0: AppEvent_QuitEvent?, _ _arg1: QuitResponse? ) {
        handleQuitRequestWith( arg0: _arg0, arg1: _arg1 )
    }

}


private typealias QuitHandler_handleQuitRequestWith_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject?, _: jobject? ) -> ()

private func QuitHandler_handleQuitRequestWith_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject?, _ arg1: jobject? ) -> () {
    QuitHandlerBase.swiftObject( jniEnv: __env, javaObject: __this ).handleQuitRequestWith( arg0 != nil ? AppEvent_QuitEvent( javaObject: arg0 ) : nil, arg1 != nil ? QuitResponse( javaObject: arg1 ) : nil )
}

open class QuitHandlerBase: JNIObjectProxy, QuitHandler {

    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let QuitHandler_handleQuitRequestWith_0_thunk: QuitHandler_handleQuitRequestWith_0_type = QuitHandler_handleQuitRequestWith_0
            natives.append( JNINativeMethod( name: strdup("__handleQuitRequestWith"), signature: strdup("(Lcom/apple/eawt/AppEvent$QuitEvent;Lcom/apple/eawt/QuitResponse;)V"), fnPtr: unsafeBitCast( QuitHandler_handleQuitRequestWith_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/com_apple/QuitHandlerProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    public convenience init() {
        self.init( javaObject: nil )
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
        QuitHandlerBase.registerNatives()
        createProxy( javaClassName: "org/genie/com_apple/QuitHandlerProxy" )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> QuitHandlerBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: QuitHandlerBase.self )
    }

    /// public abstract void com.apple.eawt.QuitHandler.handleQuitRequestWith(com.apple.eawt.AppEvent$QuitEvent,com.apple.eawt.QuitResponse)

    open func handleQuitRequestWith( arg0: AppEvent_QuitEvent?, arg1: QuitResponse? ) /**/ {
    }

    open func handleQuitRequestWith( _ _arg0: AppEvent_QuitEvent?, _ _arg1: QuitResponse? ) /**/ {
        handleQuitRequestWith( arg0: _arg0, arg1: _arg1 )
    }

}
