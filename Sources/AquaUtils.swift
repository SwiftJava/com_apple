
import java_swift
import java_lang
import java_awt
import javax_swing

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:52:09 GMT 2016 ///

/// class com.apple.laf.AquaUtils ///

open class AquaUtils: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "com.apple.laf.AquaUtils", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaUtilsJNIClass: jclass?

    /// static final java.lang.String com.apple.laf.AquaUtils.ANIMATIONS_SYSTEM_PROPERTY

    /// private static final com.apple.laf.AquaUtils$LazySingleton com.apple.laf.AquaUtils.cImageCreator

    /// static final com.apple.laf.AquaUtils$LazySingleton com.apple.laf.AquaUtils.enableAnimations

    /// static final int com.apple.laf.AquaUtils.MENU_BLINK_DELAY

    /// private static com.apple.laf.AquaUtils$LazySingleton com.apple.laf.AquaUtils.getJComponentGetFlagMethod

    /// private static final java.lang.Integer com.apple.laf.AquaUtils.OPAQUE_SET_FLAG

    /// public com.apple.laf.AquaUtils()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaUtils", classCache: &AquaUtils.AquaUtilsJNIClass, methodSig: "()V", methodCache: &AquaUtils.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// static apple.awt.CImage$Creator com.apple.laf.AquaUtils.access$000()

    /// public static boolean com.apple.laf.AquaUtils.isLeftToRight(java.awt.Component)

    private static var isLeftToRight_MethodID_2: jmethodID?

    open class func isLeftToRight( arg0: java_awt.Component? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "com/apple/laf/AquaUtils", classCache: &AquaUtilsJNIClass, methodName: "isLeftToRight", methodSig: "(Ljava/awt/Component;)Z", methodCache: &isLeftToRight_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isLeftToRight( _ _arg0: java_awt.Component? ) -> Bool {
        return isLeftToRight( arg0: _arg0 )
    }

    /// static apple.awt.CImage$Creator com.apple.laf.AquaUtils.getCImageCreator()

    /// protected static java.awt.Image com.apple.laf.AquaUtils.generateSelectedDarkImage(java.awt.Image)

    private static var generateSelectedDarkImage_MethodID_3: jmethodID?

    open class func generateSelectedDarkImage( arg0: java_awt.Image? ) -> java_awt.Image! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaUtils", classCache: &AquaUtilsJNIClass, methodName: "generateSelectedDarkImage", methodSig: "(Ljava/awt/Image;)Ljava/awt/Image;", methodCache: &generateSelectedDarkImage_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Image( javaObject: __return ) : nil
    }

    open class func generateSelectedDarkImage( _ _arg0: java_awt.Image? ) -> java_awt.Image! {
        return generateSelectedDarkImage( arg0: _arg0 )
    }

    /// protected static void com.apple.laf.AquaUtils.blinkMenu(com.apple.laf.AquaUtils$Selectable)

    private static var blinkMenu_MethodID_4: jmethodID?

    open class func blinkMenu( arg0: /* com.apple.laf.AquaUtils$Selectable */ UnclassedProtocol? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallStaticVoidMethod( className: "com/apple/laf/AquaUtils", classCache: &AquaUtilsJNIClass, methodName: "blinkMenu", methodSig: "(Lcom/apple/laf/AquaUtils$Selectable;)V", methodCache: &blinkMenu_MethodID_4, args: &__args, locals: &__locals )
    }

    open class func blinkMenu( _ _arg0: /* com.apple.laf.AquaUtils$Selectable */ UnclassedProtocol? ) {
        blinkMenu( arg0: _arg0 )
    }

    /// static boolean com.apple.laf.AquaUtils.shouldUseOpaqueButtons()

    /// private static apple.awt.CImage$Creator com.apple.laf.AquaUtils.getCImageCreatorInternal()

    /// protected static java.awt.Image com.apple.laf.AquaUtils.generateDisabledImage(java.awt.Image)

    private static var generateDisabledImage_MethodID_5: jmethodID?

    open class func generateDisabledImage( arg0: java_awt.Image? ) -> java_awt.Image! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaUtils", classCache: &AquaUtilsJNIClass, methodName: "generateDisabledImage", methodSig: "(Ljava/awt/Image;)Ljava/awt/Image;", methodCache: &generateDisabledImage_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Image( javaObject: __return ) : nil
    }

    open class func generateDisabledImage( _ _arg0: java_awt.Image? ) -> java_awt.Image! {
        return generateDisabledImage( arg0: _arg0 )
    }

    /// protected static java.awt.Image com.apple.laf.AquaUtils.generateLightenedImage(java.awt.Image,int)

    private static var generateLightenedImage_MethodID_6: jmethodID?

    open class func generateLightenedImage( arg0: java_awt.Image?, arg1: Int ) -> java_awt.Image! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaUtils", classCache: &AquaUtilsJNIClass, methodName: "generateLightenedImage", methodSig: "(Ljava/awt/Image;I)Ljava/awt/Image;", methodCache: &generateLightenedImage_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Image( javaObject: __return ) : nil
    }

    open class func generateLightenedImage( _ _arg0: java_awt.Image?, _ _arg1: Int ) -> java_awt.Image! {
        return generateLightenedImage( arg0: _arg0, arg1: _arg1 )
    }

    /// protected static java.awt.Image com.apple.laf.AquaUtils.generateFilteredImage(java.awt.Image,java.awt.image.ImageFilter)

    private static var generateFilteredImage_MethodID_7: jmethodID?

    open class func generateFilteredImage( arg0: java_awt.Image?, arg1: java_awt.ImageFilter? ) -> java_awt.Image! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaUtils", classCache: &AquaUtilsJNIClass, methodName: "generateFilteredImage", methodSig: "(Ljava/awt/Image;Ljava/awt/image/ImageFilter;)Ljava/awt/Image;", methodCache: &generateFilteredImage_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Image( javaObject: __return ) : nil
    }

    open class func generateFilteredImage( _ _arg0: java_awt.Image?, _ _arg1: java_awt.ImageFilter? ) -> java_awt.Image! {
        return generateFilteredImage( arg0: _arg0, arg1: _arg1 )
    }

    /// static boolean com.apple.laf.AquaUtils.animationsEnabled()

    /// public static void com.apple.laf.AquaUtils.paintDropShadowText(java.awt.Graphics,java.awt.Font,java.awt.FontMetrics,int,int,int,int,java.awt.Color,java.awt.Color,java.lang.String)

    private static var paintDropShadowText_MethodID_8: jmethodID?

    open class func paintDropShadowText( arg0: java_awt.Graphics?, arg1: java_awt.Font?, arg2: java_awt.FontMetrics?, arg3: Int, arg4: Int, arg5: Int, arg6: Int, arg7: java_awt.Color?, arg8: java_awt.Color?, arg9: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 10 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        __args[7] = JNIType.encode( value: arg7, locals: &__locals )
        __args[8] = JNIType.encode( value: arg8, locals: &__locals )
        __args[9] = JNIType.encode( value: arg9, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "com/apple/laf/AquaUtils", classCache: &AquaUtilsJNIClass, methodName: "paintDropShadowText", methodSig: "(Ljava/awt/Graphics;Ljava/awt/Font;Ljava/awt/FontMetrics;IIIILjava/awt/Color;Ljava/awt/Color;Ljava/lang/String;)V", methodCache: &paintDropShadowText_MethodID_8, args: &__args, locals: &__locals )
    }

    open class func paintDropShadowText( _ _arg0: java_awt.Graphics?, _ _arg1: java_awt.Font?, _ _arg2: java_awt.FontMetrics?, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int, _ _arg6: Int, _ _arg7: java_awt.Color?, _ _arg8: java_awt.Color?, _ _arg9: String? ) {
        paintDropShadowText( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6, arg7: _arg7, arg8: _arg8, arg9: _arg9 )
    }

    /// static boolean com.apple.laf.AquaUtils.classExists(java.lang.ClassLoader,java.lang.String)

    /// protected static boolean com.apple.laf.AquaUtils.hasOpaqueBeenExplicitlySet(javax.swing.JComponent)

    private static var hasOpaqueBeenExplicitlySet_MethodID_9: jmethodID?

    open class func hasOpaqueBeenExplicitlySet( arg0: javax_swing.JComponent? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "com/apple/laf/AquaUtils", classCache: &AquaUtilsJNIClass, methodName: "hasOpaqueBeenExplicitlySet", methodSig: "(Ljavax/swing/JComponent;)Z", methodCache: &hasOpaqueBeenExplicitlySet_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func hasOpaqueBeenExplicitlySet( _ _arg0: javax_swing.JComponent? ) -> Bool {
        return hasOpaqueBeenExplicitlySet( arg0: _arg0 )
    }

}
