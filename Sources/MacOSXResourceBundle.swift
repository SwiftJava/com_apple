
import java_swift
import java_util
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:52:09 GMT 2016 ///

/// class com.apple.resources.MacOSXResourceBundle ///

open class MacOSXResourceBundle: java_util.PropertyResourceBundle {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "com.apple.resources.MacOSXResourceBundle", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var MacOSXResourceBundleJNIClass: jclass?

    /// private java.util.Map java.util.PropertyResourceBundle.lookup

    /// private static final int java.util.ResourceBundle.INITIAL_CACHE_SIZE

    /// private static final java.util.ResourceBundle java.util.ResourceBundle.NONEXISTENT_BUNDLE

    /// private static final java.util.concurrent.ConcurrentMap java.util.ResourceBundle.cacheList

    /// private static final java.lang.ref.ReferenceQueue java.util.ResourceBundle.referenceQueue

    /// protected java.util.ResourceBundle java.util.ResourceBundle.parent

    private static var parent_FieldID: jfieldID?

    override open var parent: java_util.ResourceBundle! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "parent", fieldType: "Ljava/util/ResourceBundle;", fieldCache: &MacOSXResourceBundle.parent_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_util.ResourceBundle( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "parent", fieldType: "Ljava/util/ResourceBundle;", fieldCache: &MacOSXResourceBundle.parent_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private java.util.Locale java.util.ResourceBundle.locale

    /// private java.lang.String java.util.ResourceBundle.name

    /// private volatile boolean java.util.ResourceBundle.expired

    /// private volatile java.util.ResourceBundle$CacheKey java.util.ResourceBundle.cacheKey

    /// private volatile java.util.Set java.util.ResourceBundle.keySet

    /// static final boolean java.util.ResourceBundle.$assertionsDisabled

    /// com.apple.resources.MacOSXResourceBundle(java.io.InputStream) throws java.io.IOException

    /// public static java.util.ResourceBundle com.apple.resources.MacOSXResourceBundle.getMacResourceBundle(java.lang.String) throws java.lang.Exception

    private static var getMacResourceBundle_MethodID_1: jmethodID?

    open class func getMacResourceBundle( arg0: String? ) throws /* java.lang.Exception */ -> java_util.ResourceBundle! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/resources/MacOSXResourceBundle", classCache: &MacOSXResourceBundleJNIClass, methodName: "getMacResourceBundle", methodSig: "(Ljava/lang/String;)Ljava/util/ResourceBundle;", methodCache: &getMacResourceBundle_MethodID_1, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.Exception( javaObject: throwable )
        }
        return __return != nil ? java_util.ResourceBundle( javaObject: __return ) : nil
    }

    open class func getMacResourceBundle( _ _arg0: String? ) throws /* java.lang.Exception */ -> java_util.ResourceBundle! {
        return try getMacResourceBundle( arg0: _arg0 )
    }

    /// public static java.util.ResourceBundle com.apple.resources.MacOSXResourceBundle.getMacResourceBundle(java.lang.String,java.lang.String) throws java.lang.Exception

    private static var getMacResourceBundle_MethodID_2: jmethodID?

    open class func getMacResourceBundle( arg0: String?, arg1: String? ) throws /* java.lang.Exception */ -> java_util.ResourceBundle! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/resources/MacOSXResourceBundle", classCache: &MacOSXResourceBundleJNIClass, methodName: "getMacResourceBundle", methodSig: "(Ljava/lang/String;Ljava/lang/String;)Ljava/util/ResourceBundle;", methodCache: &getMacResourceBundle_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.Exception( javaObject: throwable )
        }
        return __return != nil ? java_util.ResourceBundle( javaObject: __return ) : nil
    }

    open class func getMacResourceBundle( _ _arg0: String?, _ _arg1: String? ) throws /* java.lang.Exception */ -> java_util.ResourceBundle! {
        return try getMacResourceBundle( arg0: _arg0, arg1: _arg1 )
    }

    /// void com.apple.resources.MacOSXResourceBundle.setItsParent(java.util.ResourceBundle)

}
