
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class com.apple.laf.AquaImageFactory$NineSliceMetrics ///

open class AquaImageFactory_NineSliceMetrics: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaImageFactory_NineSliceMetricsJNIClass: jclass?

    /// public final int com.apple.laf.AquaImageFactory$NineSliceMetrics.eCut

    private static var eCut_FieldID: jfieldID?

    open var eCut: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "eCut", fieldType: "I", fieldCache: &AquaImageFactory_NineSliceMetrics.eCut_FieldID, object: javaObject )
            return Int(__value)
        }
    }

    /// public final int com.apple.laf.AquaImageFactory$NineSliceMetrics.minH

    private static var minH_FieldID: jfieldID?

    open var minH: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "minH", fieldType: "I", fieldCache: &AquaImageFactory_NineSliceMetrics.minH_FieldID, object: javaObject )
            return Int(__value)
        }
    }

    /// public final int com.apple.laf.AquaImageFactory$NineSliceMetrics.minW

    private static var minW_FieldID: jfieldID?

    open var minW: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "minW", fieldType: "I", fieldCache: &AquaImageFactory_NineSliceMetrics.minW_FieldID, object: javaObject )
            return Int(__value)
        }
    }

    /// public final int com.apple.laf.AquaImageFactory$NineSliceMetrics.nCut

    private static var nCut_FieldID: jfieldID?

    open var nCut: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "nCut", fieldType: "I", fieldCache: &AquaImageFactory_NineSliceMetrics.nCut_FieldID, object: javaObject )
            return Int(__value)
        }
    }

    /// public final int com.apple.laf.AquaImageFactory$NineSliceMetrics.sCut

    private static var sCut_FieldID: jfieldID?

    open var sCut: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "sCut", fieldType: "I", fieldCache: &AquaImageFactory_NineSliceMetrics.sCut_FieldID, object: javaObject )
            return Int(__value)
        }
    }

    /// public final boolean com.apple.laf.AquaImageFactory$NineSliceMetrics.showMiddle

    private static var showMiddle_FieldID: jfieldID?

    open var showMiddle: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "showMiddle", fieldType: "Z", fieldCache: &AquaImageFactory_NineSliceMetrics.showMiddle_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
    }

    /// public final boolean com.apple.laf.AquaImageFactory$NineSliceMetrics.stretchH

    private static var stretchH_FieldID: jfieldID?

    open var stretchH: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "stretchH", fieldType: "Z", fieldCache: &AquaImageFactory_NineSliceMetrics.stretchH_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
    }

    /// public final boolean com.apple.laf.AquaImageFactory$NineSliceMetrics.stretchV

    private static var stretchV_FieldID: jfieldID?

    open var stretchV: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "stretchV", fieldType: "Z", fieldCache: &AquaImageFactory_NineSliceMetrics.stretchV_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
    }

    /// public final int com.apple.laf.AquaImageFactory$NineSliceMetrics.wCut

    private static var wCut_FieldID: jfieldID?

    open var wCut: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "wCut", fieldType: "I", fieldCache: &AquaImageFactory_NineSliceMetrics.wCut_FieldID, object: javaObject )
            return Int(__value)
        }
    }

    /// public com.apple.laf.AquaImageFactory$NineSliceMetrics(int,int,int,int,int,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = jvalue( i: jint(arg2) )
        __args[3] = jvalue( i: jint(arg3) )
        __args[4] = jvalue( i: jint(arg4) )
        __args[5] = jvalue( i: jint(arg5) )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaImageFactory$NineSliceMetrics", classCache: &AquaImageFactory_NineSliceMetrics.AquaImageFactory_NineSliceMetricsJNIClass, methodSig: "(IIIIII)V", methodCache: &AquaImageFactory_NineSliceMetrics.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public com.apple.laf.AquaImageFactory$NineSliceMetrics(int,int,int,int,int,int,boolean)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Int, arg6: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = jvalue( i: jint(arg2) )
        __args[3] = jvalue( i: jint(arg3) )
        __args[4] = jvalue( i: jint(arg4) )
        __args[5] = jvalue( i: jint(arg5) )
        __args[6] = jvalue( z: jboolean(arg6 ? JNI_TRUE : JNI_FALSE) )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaImageFactory$NineSliceMetrics", classCache: &AquaImageFactory_NineSliceMetrics.AquaImageFactory_NineSliceMetricsJNIClass, methodSig: "(IIIIIIZ)V", methodCache: &AquaImageFactory_NineSliceMetrics.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int, _ _arg6: Bool ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public com.apple.laf.AquaImageFactory$NineSliceMetrics(int,int,int,int,int,int,boolean,boolean,boolean)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Int, arg6: Bool, arg7: Bool, arg8: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 9 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = jvalue( i: jint(arg2) )
        __args[3] = jvalue( i: jint(arg3) )
        __args[4] = jvalue( i: jint(arg4) )
        __args[5] = jvalue( i: jint(arg5) )
        __args[6] = jvalue( z: jboolean(arg6 ? JNI_TRUE : JNI_FALSE) )
        __args[7] = jvalue( z: jboolean(arg7 ? JNI_TRUE : JNI_FALSE) )
        __args[8] = jvalue( z: jboolean(arg8 ? JNI_TRUE : JNI_FALSE) )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaImageFactory$NineSliceMetrics", classCache: &AquaImageFactory_NineSliceMetrics.AquaImageFactory_NineSliceMetricsJNIClass, methodSig: "(IIIIIIZZZ)V", methodCache: &AquaImageFactory_NineSliceMetrics.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int, _ _arg6: Bool, _ _arg7: Bool, _ _arg8: Bool ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6, arg7: _arg7, arg8: _arg8 )
    }

}

