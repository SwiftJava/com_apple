
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home ///
/// Tue Aug 08 14:27:28 BST 2017 ///

/// class com.apple.laf.AquaImageFactory$SlicedImageControl ///

open class AquaImageFactory_SlicedImageControl: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaImageFactory_SlicedImageControlJNIClass: jclass?

    /// final java.awt.image.BufferedImage com.apple.laf.AquaImageFactory$SlicedImageControl.NW

    /// final java.awt.image.BufferedImage com.apple.laf.AquaImageFactory$SlicedImageControl.N

    /// final java.awt.image.BufferedImage com.apple.laf.AquaImageFactory$SlicedImageControl.NE

    /// final java.awt.image.BufferedImage com.apple.laf.AquaImageFactory$SlicedImageControl.W

    /// final java.awt.image.BufferedImage com.apple.laf.AquaImageFactory$SlicedImageControl.C

    /// final java.awt.image.BufferedImage com.apple.laf.AquaImageFactory$SlicedImageControl.E

    /// final java.awt.image.BufferedImage com.apple.laf.AquaImageFactory$SlicedImageControl.SW

    /// final java.awt.image.BufferedImage com.apple.laf.AquaImageFactory$SlicedImageControl.S

    /// final java.awt.image.BufferedImage com.apple.laf.AquaImageFactory$SlicedImageControl.SE

    /// final com.apple.laf.AquaImageFactory$NineSliceMetrics com.apple.laf.AquaImageFactory$SlicedImageControl.metrics

    /// final int com.apple.laf.AquaImageFactory$SlicedImageControl.totalWidth

    /// final int com.apple.laf.AquaImageFactory$SlicedImageControl.totalHeight

    /// final int com.apple.laf.AquaImageFactory$SlicedImageControl.centerColWidth

    /// final int com.apple.laf.AquaImageFactory$SlicedImageControl.centerRowHeight

    /// public com.apple.laf.AquaImageFactory$SlicedImageControl(java.awt.Image,com.apple.laf.AquaImageFactory$NineSliceMetrics)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: java_awt.Image?, arg1: AquaImageFactory_NineSliceMetrics? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaImageFactory$SlicedImageControl", classCache: &AquaImageFactory_SlicedImageControl.AquaImageFactory_SlicedImageControlJNIClass, methodSig: "(Ljava/awt/Image;Lcom/apple/laf/AquaImageFactory$NineSliceMetrics;)V", methodCache: &AquaImageFactory_SlicedImageControl.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: java_awt.Image?, _ _arg1: AquaImageFactory_NineSliceMetrics? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public com.apple.laf.AquaImageFactory$SlicedImageControl(java.awt.Image,int,int,int,int,boolean,boolean,boolean)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: java_awt.Image?, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Bool, arg6: Bool, arg7: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 8 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        __args[3] = JNIType.toJava( value: arg3, locals: &__locals )
        __args[4] = JNIType.toJava( value: arg4, locals: &__locals )
        __args[5] = JNIType.toJava( value: arg5, locals: &__locals )
        __args[6] = JNIType.toJava( value: arg6, locals: &__locals )
        __args[7] = JNIType.toJava( value: arg7, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaImageFactory$SlicedImageControl", classCache: &AquaImageFactory_SlicedImageControl.AquaImageFactory_SlicedImageControlJNIClass, methodSig: "(Ljava/awt/Image;IIIIZZZ)V", methodCache: &AquaImageFactory_SlicedImageControl.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: java_awt.Image?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Bool, _ _arg6: Bool, _ _arg7: Bool ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6, arg7: _arg7 )
    }

    /// public com.apple.laf.AquaImageFactory$SlicedImageControl(java.awt.Image,int,int,int,int,boolean)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: java_awt.Image?, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        __args[3] = JNIType.toJava( value: arg3, locals: &__locals )
        __args[4] = JNIType.toJava( value: arg4, locals: &__locals )
        __args[5] = JNIType.toJava( value: arg5, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaImageFactory$SlicedImageControl", classCache: &AquaImageFactory_SlicedImageControl.AquaImageFactory_SlicedImageControlJNIClass, methodSig: "(Ljava/awt/Image;IIIIZ)V", methodCache: &AquaImageFactory_SlicedImageControl.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: java_awt.Image?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Bool ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public com.apple.laf.AquaImageFactory$SlicedImageControl(java.awt.Image,int,int,int,int)

    private static var new_MethodID_4: jmethodID?

    public convenience init( arg0: java_awt.Image?, arg1: Int, arg2: Int, arg3: Int, arg4: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        __args[3] = JNIType.toJava( value: arg3, locals: &__locals )
        __args[4] = JNIType.toJava( value: arg4, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaImageFactory$SlicedImageControl", classCache: &AquaImageFactory_SlicedImageControl.AquaImageFactory_SlicedImageControlJNIClass, methodSig: "(Ljava/awt/Image;IIII)V", methodCache: &AquaImageFactory_SlicedImageControl.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: java_awt.Image?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public void com.apple.laf.AquaImageFactory$SlicedImageControl.paint(java.awt.Graphics,int,int,int,int)

    private static var paint_MethodID_5: jmethodID?

    open func paint( arg0: java_awt.Graphics?, arg1: Int, arg2: Int, arg3: Int, arg4: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        __args[3] = JNIType.toJava( value: arg3, locals: &__locals )
        __args[4] = JNIType.toJava( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paint", methodSig: "(Ljava/awt/Graphics;IIII)V", methodCache: &AquaImageFactory_SlicedImageControl.paint_MethodID_5, args: &__args, locals: &__locals )
    }

    open func paint( _ _arg0: java_awt.Graphics?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int ) {
        paint( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// static java.awt.image.BufferedImage com.apple.laf.AquaImageFactory$SlicedImageControl.createSlice(java.awt.Image,int,int,int,int)

    /// void com.apple.laf.AquaImageFactory$SlicedImageControl.paintStretchedMiddles(java.awt.Graphics,int,int)

    /// void com.apple.laf.AquaImageFactory$SlicedImageControl.paintCompressed(java.awt.Graphics,int,int)

}

