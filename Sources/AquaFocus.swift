
import java_swift
import java_awt
import javax_swing

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class com.apple.laf.AquaFocus ///

open class AquaFocus: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaFocusJNIClass: jclass?

    /// public com.apple.laf.AquaFocus()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaFocus", classCache: &AquaFocus.AquaFocusJNIClass, methodSig: "()V", methodCache: &AquaFocus.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public static javax.swing.Icon com.apple.laf.AquaFocus.createFocusedIcon(javax.swing.Icon,java.awt.Component,int)

    private static var createFocusedIcon_MethodID_2: jmethodID?

    open class func createFocusedIcon( arg0: javax_swing.Icon?, arg1: java_awt.Component?, arg2: Int ) -> javax_swing.Icon! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = jvalue( i: jint(arg2) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaFocus", classCache: &AquaFocusJNIClass, methodName: "createFocusedIcon", methodSig: "(Ljavax/swing/Icon;Ljava/awt/Component;I)Ljavax/swing/Icon;", methodCache: &createFocusedIcon_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.IconForward( javaObject: __return ) : nil
    }

    open class func createFocusedIcon( _ _arg0: javax_swing.Icon?, _ _arg1: java_awt.Component?, _ _arg2: Int ) -> javax_swing.Icon! {
        return createFocusedIcon( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// static boolean com.apple.laf.AquaFocus.paintFocus(java.awt.Graphics,com.apple.laf.AquaFocus$Drawable)

    // Skipping method: true false false false false 

}

