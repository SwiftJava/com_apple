
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home ///
/// Fri Aug 04 11:17:08 BST 2017 ///

/// class com.apple.eawt.ApplicationEvent ///

open class ApplicationEvent: java_util.EventObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ApplicationEventJNIClass: jclass?

    /// private java.lang.String com.apple.eawt.ApplicationEvent.fFilename

    /// private boolean com.apple.eawt.ApplicationEvent.fHandled

    /// private static final long java.util.EventObject.serialVersionUID

    /// protected transient java.lang.Object java.util.EventObject.source

    private static var source_FieldID: jfieldID?

    override open var source: java_swift.JavaObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "source", fieldType: "Ljava/lang/Object;", fieldCache: &ApplicationEvent.source_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_swift.JavaObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue != nil ? newValue! as JNIObject : nil, locals: &__locals )
            JNIField.SetObjectField( fieldName: "source", fieldType: "Ljava/lang/Object;", fieldCache: &ApplicationEvent.source_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// com.apple.eawt.ApplicationEvent(java.lang.Object)

    /// com.apple.eawt.ApplicationEvent(java.lang.Object,java.lang.String)

    /// public boolean com.apple.eawt.ApplicationEvent.isHandled()

    private static var isHandled_MethodID_1: jmethodID?

    open func isHandled() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isHandled", methodSig: "()Z", methodCache: &ApplicationEvent.isHandled_MethodID_1, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public void com.apple.eawt.ApplicationEvent.setHandled(boolean)

    private static var setHandled_MethodID_2: jmethodID?

    open func setHandled( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setHandled", methodSig: "(Z)V", methodCache: &ApplicationEvent.setHandled_MethodID_2, args: &__args, locals: &__locals )
    }

    open func setHandled( _ _arg0: Bool ) {
        setHandled( arg0: _arg0 )
    }

    /// public java.lang.String com.apple.eawt.ApplicationEvent.getFilename()

    private static var getFilename_MethodID_3: jmethodID?

    open func getFilename() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFilename", methodSig: "()Ljava/lang/String;", methodCache: &ApplicationEvent.getFilename_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: String(), from: __return )
    }


}

