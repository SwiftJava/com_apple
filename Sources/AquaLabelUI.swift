
import java_swift
import javax_swing
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class com.apple.laf.AquaLabelUI ///

open class AquaLabelUI: javax_swing.BasicLabelUI {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaLabelUIJNIClass: jclass?

    /// static final java.lang.String com.apple.laf.AquaLabelUI.DISABLED_COLOR_KEY

    // Skipping field: true false false false false false 

    /// protected static final com.apple.laf.AquaUtils$RecyclableSingleton com.apple.laf.AquaLabelUI.aquaLabelUI

    // Skipping field: false false false false false true 

    /// private static final java.lang.Object javax.swing.plaf.basic.BasicLabelUI.BASIC_LABEL_UI_KEY

    /// protected static javax.swing.plaf.basic.BasicLabelUI javax.swing.plaf.basic.BasicLabelUI.labelUI

    // Skipping field: false false false false false true 

    /// private java.awt.Rectangle javax.swing.plaf.basic.BasicLabelUI.paintIconR

    /// private java.awt.Rectangle javax.swing.plaf.basic.BasicLabelUI.paintTextR

    /// public com.apple.laf.AquaLabelUI()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaLabelUI", classCache: &AquaLabelUI.AquaLabelUIJNIClass, methodSig: "()V", methodCache: &AquaLabelUI.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public static javax.swing.plaf.ComponentUI com.apple.laf.AquaLabelUI.createUI(javax.swing.JComponent)

    private static var createUI_MethodID_2: jmethodID?

    open class func createUI( arg0: javax_swing.JComponent? ) -> javax_swing.ComponentUI! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaLabelUI", classCache: &AquaLabelUIJNIClass, methodName: "createUI", methodSig: "(Ljavax/swing/JComponent;)Ljavax/swing/plaf/ComponentUI;", methodCache: &createUI_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.ComponentUI( javaObject: __return ) : nil
    }

    override open class func createUI( _ _arg0: javax_swing.JComponent? ) -> javax_swing.ComponentUI! {
        return createUI( arg0: _arg0 )
    }

    /// protected java.awt.Color com.apple.laf.AquaLabelUI.getDisabledLabelColor(javax.swing.JLabel)

    private static var getDisabledLabelColor_MethodID_3: jmethodID?

    open func getDisabledLabelColor( arg0: javax_swing.JLabel? ) -> java_awt.Color! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDisabledLabelColor", methodSig: "(Ljavax/swing/JLabel;)Ljava/awt/Color;", methodCache: &AquaLabelUI.getDisabledLabelColor_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Color( javaObject: __return ) : nil
    }

    open func getDisabledLabelColor( _ _arg0: javax_swing.JLabel? ) -> java_awt.Color! {
        return getDisabledLabelColor( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaLabelUI.installListeners(javax.swing.JLabel)

    private static var installListeners_MethodID_4: jmethodID?

    open func installListeners( arg0: javax_swing.JLabel? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installListeners", methodSig: "(Ljavax/swing/JLabel;)V", methodCache: &AquaLabelUI.installListeners_MethodID_4, args: &__args, locals: &__locals )
    }

    override open func installListeners( _ _arg0: javax_swing.JLabel? ) {
        installListeners( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaLabelUI.paintDisabledText(javax.swing.JLabel,java.awt.Graphics,java.lang.String,int,int)

    private static var paintDisabledText_MethodID_5: jmethodID?

    open func paintDisabledText( arg0: javax_swing.JLabel?, arg1: java_awt.Graphics?, arg2: String?, arg3: Int, arg4: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        __args[3] = jvalue( i: jint(arg3) )
        __args[4] = jvalue( i: jint(arg4) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintDisabledText", methodSig: "(Ljavax/swing/JLabel;Ljava/awt/Graphics;Ljava/lang/String;II)V", methodCache: &AquaLabelUI.paintDisabledText_MethodID_5, args: &__args, locals: &__locals )
    }

    override open func paintDisabledText( _ _arg0: javax_swing.JLabel?, _ _arg1: java_awt.Graphics?, _ _arg2: String?, _ _arg3: Int, _ _arg4: Int ) {
        paintDisabledText( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// protected void com.apple.laf.AquaLabelUI.paintEnabledText(javax.swing.JLabel,java.awt.Graphics,java.lang.String,int,int)

    private static var paintEnabledText_MethodID_6: jmethodID?

    open func paintEnabledText( arg0: javax_swing.JLabel?, arg1: java_awt.Graphics?, arg2: String?, arg3: Int, arg4: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        __args[3] = jvalue( i: jint(arg3) )
        __args[4] = jvalue( i: jint(arg4) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintEnabledText", methodSig: "(Ljavax/swing/JLabel;Ljava/awt/Graphics;Ljava/lang/String;II)V", methodCache: &AquaLabelUI.paintEnabledText_MethodID_6, args: &__args, locals: &__locals )
    }

    override open func paintEnabledText( _ _arg0: javax_swing.JLabel?, _ _arg1: java_awt.Graphics?, _ _arg2: String?, _ _arg3: Int, _ _arg4: Int ) {
        paintEnabledText( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// protected void com.apple.laf.AquaLabelUI.uninstallListeners(javax.swing.JLabel)

    private static var uninstallListeners_MethodID_7: jmethodID?

    open func uninstallListeners( arg0: javax_swing.JLabel? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallListeners", methodSig: "(Ljavax/swing/JLabel;)V", methodCache: &AquaLabelUI.uninstallListeners_MethodID_7, args: &__args, locals: &__locals )
    }

    override open func uninstallListeners( _ _arg0: javax_swing.JLabel? ) {
        uninstallListeners( arg0: _arg0 )
    }

}

