
import java_swift
import javax_swing

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class com.apple.laf.ClientPropertyApplicator ///

open class ClientPropertyApplicator: java_swift.JavaObject, /* interface java.beans.PropertyChangeListener */ UnavailableProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ClientPropertyApplicatorJNIClass: jclass?

    /// private final java.util.Map com.apple.laf.ClientPropertyApplicator.properties

    /// public com.apple.laf.ClientPropertyApplicator(com.apple.laf.ClientPropertyApplicator$Property[])

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: [ClientPropertyApplicator_Property]? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/ClientPropertyApplicator", classCache: &ClientPropertyApplicator.ClientPropertyApplicatorJNIClass, methodSig: "([Lcom/apple/laf/ClientPropertyApplicator$Property;)V", methodCache: &ClientPropertyApplicator.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: [ClientPropertyApplicator_Property]? ) {
        self.init( arg0: _arg0 )
    }

    /// void com.apple.laf.ClientPropertyApplicator.applyProperty(java.lang.Object,java.lang.String,java.lang.Object)

    // Skipping method: true false false false false 

    /// public void com.apple.laf.ClientPropertyApplicator.attachAndApplyClientProperties(javax.swing.JComponent)

    private static var attachAndApplyClientProperties_MethodID_2: jmethodID?

    open func attachAndApplyClientProperties( arg0: javax_swing.JComponent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "attachAndApplyClientProperties", methodSig: "(Ljavax/swing/JComponent;)V", methodCache: &ClientPropertyApplicator.attachAndApplyClientProperties_MethodID_2, args: &__args, locals: &__locals )
    }

    open func attachAndApplyClientProperties( _ _arg0: javax_swing.JComponent? ) {
        attachAndApplyClientProperties( arg0: _arg0 )
    }

    /// public java.lang.Object com.apple.laf.ClientPropertyApplicator.convertJComponentToTarget(javax.swing.JComponent)

    private static var convertJComponentToTarget_MethodID_3: jmethodID?

    open func convertJComponentToTarget( arg0: javax_swing.JComponent? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "convertJComponentToTarget", methodSig: "(Ljavax/swing/JComponent;)Ljava/lang/Object;", methodCache: &ClientPropertyApplicator.convertJComponentToTarget_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func convertJComponentToTarget( _ _arg0: javax_swing.JComponent? ) -> java_swift.JavaObject! {
        return convertJComponentToTarget( arg0: _arg0 )
    }

    /// public void com.apple.laf.ClientPropertyApplicator.propertyChange(java.beans.PropertyChangeEvent)

    private static var propertyChange_MethodID_4: jmethodID?

    open func propertyChange( evt: /* class java.beans.PropertyChangeEvent */ UnavailableObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: evt, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "propertyChange", methodSig: "(Ljava/beans/PropertyChangeEvent;)V", methodCache: &ClientPropertyApplicator.propertyChange_MethodID_4, args: &__args, locals: &__locals )
    }

    open func propertyChange( _ _evt: /* class java.beans.PropertyChangeEvent */ UnavailableObject? ) {
        propertyChange( evt: _evt )
    }

    /// public void com.apple.laf.ClientPropertyApplicator.removeFrom(javax.swing.JComponent)

    private static var removeFrom_MethodID_5: jmethodID?

    open func removeFrom( arg0: javax_swing.JComponent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeFrom", methodSig: "(Ljavax/swing/JComponent;)V", methodCache: &ClientPropertyApplicator.removeFrom_MethodID_5, args: &__args, locals: &__locals )
    }

    open func removeFrom( _ _arg0: javax_swing.JComponent? ) {
        removeFrom( arg0: _arg0 )
    }

}

