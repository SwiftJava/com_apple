
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:52:05 GMT 2016 ///

/// class com.apple.laf.AquaCachingPainter ///

open class AquaCachingPainter: /* com.apple.laf.AquaPainter */ UnclassedObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "com.apple.laf.AquaCachingPainter", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaCachingPainterJNIClass: jclass?

    /// final java.util.HashMap com.apple.laf.AquaCachingPainter.map

    /// final int com.apple.laf.AquaCachingPainter.sliceWidth

    /// final int com.apple.laf.AquaCachingPainter.sliceHeight

    /// final int com.apple.laf.AquaCachingPainter.westCut

    /// final int com.apple.laf.AquaCachingPainter.eastCut

    /// final int com.apple.laf.AquaCachingPainter.northCut

    /// final int com.apple.laf.AquaCachingPainter.southCut

    /// final java.awt.Rectangle com.apple.laf.AquaPainter.boundsRect

    /// final apple.laf.JRSUIControl com.apple.laf.AquaPainter.control

    /// apple.laf.JRSUIState com.apple.laf.AquaPainter.state

    /// public com.apple.laf.AquaCachingPainter(apple.laf.JRSUIControl,apple.laf.JRSUIState,int,int,int,int,int,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: /* apple.laf.JRSUIControl */ UnclassedObject?, arg1: /* apple.laf.JRSUIState */ UnclassedObject?, arg2: Int, arg3: Int, arg4: Int, arg5: Int, arg6: Int, arg7: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 8 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        __args[7] = JNIType.encode( value: arg7, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaCachingPainter", classCache: &AquaCachingPainter.AquaCachingPainterJNIClass, methodSig: "(Lapple/laf/JRSUIControl;Lapple/laf/JRSUIState;IIIIII)V", methodCache: &AquaCachingPainter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: /* apple.laf.JRSUIControl */ UnclassedObject?, _ _arg1: /* apple.laf.JRSUIState */ UnclassedObject?, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int, _ _arg6: Int, _ _arg7: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6, arg7: _arg7 )
    }

    /// void com.apple.laf.AquaCachingPainter.paint(java.awt.Graphics,java.awt.Component,int,int,int,int)

    /// void com.apple.laf.AquaCachingPainter.paint(sun.java2d.SunGraphics2D,apple.laf.JRSUIState,java.awt.Component)

}
