
import java_swift
import javax_swing
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class com.apple.laf.AquaScrollBarUI ///

open class AquaScrollBarUI: javax_swing.ScrollBarUI {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaScrollBarUIJNIClass: jclass?

    /// static final int com.apple.laf.AquaScrollBarUI.MIN_ARROW_COLLAPSE_SIZE

    // Skipping field: true false false false false false 

    /// static final com.apple.laf.AquaUtils$RecyclableSingleton com.apple.laf.AquaScrollBarUI.hitToPressedPartMap

    // Skipping field: true false false false false false 

    /// private static final int com.apple.laf.AquaScrollBarUI.kInitialDelay

    /// private static final int com.apple.laf.AquaScrollBarUI.kNormalDelay

    /// protected boolean com.apple.laf.AquaScrollBarUI.fIsDragging

    private static var fIsDragging_FieldID: jfieldID?

    open var fIsDragging: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "fIsDragging", fieldType: "Z", fieldCache: &AquaScrollBarUI.fIsDragging_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "fIsDragging", fieldType: "Z", fieldCache: &AquaScrollBarUI.fIsDragging_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected com.apple.laf.AquaScrollBarUI$ModelListener com.apple.laf.AquaScrollBarUI.fModelListener

    private static var fModelListener_FieldID: jfieldID?

    open var fModelListener: /* class com.apple.laf.AquaScrollBarUI$ModelListener */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "fModelListener", fieldType: "Lcom/apple/laf/AquaScrollBarUI$ModelListener;", fieldCache: &AquaScrollBarUI.fModelListener_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class com.apple.laf.AquaScrollBarUI$ModelListener */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "fModelListener", fieldType: "Lcom/apple/laf/AquaScrollBarUI$ModelListener;", fieldCache: &AquaScrollBarUI.fModelListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected apple.laf.JRSUIConstants$Hit com.apple.laf.AquaScrollBarUI.fMousePart

    private static var fMousePart_FieldID: jfieldID?

    open var fMousePart: /* class apple.laf.JRSUIConstants$Hit */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "fMousePart", fieldType: "Lapple/laf/JRSUIConstants$Hit;", fieldCache: &AquaScrollBarUI.fMousePart_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class apple.laf.JRSUIConstants$Hit */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "fMousePart", fieldType: "Lapple/laf/JRSUIConstants$Hit;", fieldCache: &AquaScrollBarUI.fMousePart_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.beans.PropertyChangeListener com.apple.laf.AquaScrollBarUI.fPropertyChangeListener

    private static var fPropertyChangeListener_FieldID: jfieldID?

    open var fPropertyChangeListener: /* interface java.beans.PropertyChangeListener */ UnavailableProtocol! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "fPropertyChangeListener", fieldType: "Ljava/beans/PropertyChangeListener;", fieldCache: &AquaScrollBarUI.fPropertyChangeListener_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* interface java.beans.PropertyChangeListener */ UnavailableProtocolForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "fPropertyChangeListener", fieldType: "Ljava/beans/PropertyChangeListener;", fieldCache: &AquaScrollBarUI.fPropertyChangeListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.JScrollBar com.apple.laf.AquaScrollBarUI.fScrollBar

    private static var fScrollBar_FieldID: jfieldID?

    open var fScrollBar: javax_swing.JScrollBar! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "fScrollBar", fieldType: "Ljavax/swing/JScrollBar;", fieldCache: &AquaScrollBarUI.fScrollBar_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.JScrollBar( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "fScrollBar", fieldType: "Ljavax/swing/JScrollBar;", fieldCache: &AquaScrollBarUI.fScrollBar_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected com.apple.laf.AquaScrollBarUI$ScrollListener com.apple.laf.AquaScrollBarUI.fScrollListener

    private static var fScrollListener_FieldID: jfieldID?

    open var fScrollListener: /* class com.apple.laf.AquaScrollBarUI$ScrollListener */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "fScrollListener", fieldType: "Lcom/apple/laf/AquaScrollBarUI$ScrollListener;", fieldCache: &AquaScrollBarUI.fScrollListener_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class com.apple.laf.AquaScrollBarUI$ScrollListener */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "fScrollListener", fieldType: "Lcom/apple/laf/AquaScrollBarUI$ScrollListener;", fieldCache: &AquaScrollBarUI.fScrollListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.Timer com.apple.laf.AquaScrollBarUI.fScrollTimer

    private static var fScrollTimer_FieldID: jfieldID?

    open var fScrollTimer: javax_swing.Timer! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "fScrollTimer", fieldType: "Ljavax/swing/Timer;", fieldCache: &AquaScrollBarUI.fScrollTimer_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.Timer( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "fScrollTimer", fieldType: "Ljavax/swing/Timer;", fieldCache: &AquaScrollBarUI.fScrollTimer_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected apple.laf.JRSUIConstants$Hit com.apple.laf.AquaScrollBarUI.fTrackHighlight

    private static var fTrackHighlight_FieldID: jfieldID?

    open var fTrackHighlight: /* class apple.laf.JRSUIConstants$Hit */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "fTrackHighlight", fieldType: "Lapple/laf/JRSUIConstants$Hit;", fieldCache: &AquaScrollBarUI.fTrackHighlight_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class apple.laf.JRSUIConstants$Hit */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "fTrackHighlight", fieldType: "Lapple/laf/JRSUIConstants$Hit;", fieldCache: &AquaScrollBarUI.fTrackHighlight_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected com.apple.laf.AquaScrollBarUI$TrackListener com.apple.laf.AquaScrollBarUI.fTrackListener

    private static var fTrackListener_FieldID: jfieldID?

    open var fTrackListener: /* class com.apple.laf.AquaScrollBarUI$TrackListener */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "fTrackListener", fieldType: "Lcom/apple/laf/AquaScrollBarUI$TrackListener;", fieldCache: &AquaScrollBarUI.fTrackListener_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class com.apple.laf.AquaScrollBarUI$TrackListener */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "fTrackListener", fieldType: "Lcom/apple/laf/AquaScrollBarUI$TrackListener;", fieldCache: &AquaScrollBarUI.fTrackListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected final com.apple.laf.AquaPainter com.apple.laf.AquaScrollBarUI.painter

    private static var painter_FieldID: jfieldID?

    open var painter: /* class com.apple.laf.AquaPainter */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "painter", fieldType: "Lcom/apple/laf/AquaPainter;", fieldCache: &AquaScrollBarUI.painter_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class com.apple.laf.AquaPainter */ UnavailableObject( javaObject: __value ) : nil
        }
    }

    /// public com.apple.laf.AquaScrollBarUI()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaScrollBarUI", classCache: &AquaScrollBarUI.AquaScrollBarUIJNIClass, methodSig: "()V", methodCache: &AquaScrollBarUI.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public static javax.swing.plaf.ComponentUI com.apple.laf.AquaScrollBarUI.createUI(javax.swing.JComponent)

    private static var createUI_MethodID_2: jmethodID?

    open class func createUI( arg0: javax_swing.JComponent? ) -> javax_swing.ComponentUI! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaScrollBarUI", classCache: &AquaScrollBarUIJNIClass, methodName: "createUI", methodSig: "(Ljavax/swing/JComponent;)Ljavax/swing/plaf/ComponentUI;", methodCache: &createUI_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.ComponentUI( javaObject: __return ) : nil
    }

    override open class func createUI( _ _arg0: javax_swing.JComponent? ) -> javax_swing.ComponentUI! {
        return createUI( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaScrollBarUI.configureScrollBarColors()

    private static var configureScrollBarColors_MethodID_3: jmethodID?

    open func configureScrollBarColors() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "configureScrollBarColors", methodSig: "()V", methodCache: &AquaScrollBarUI.configureScrollBarColors_MethodID_3, args: &__args, locals: &__locals )
    }


    /// protected com.apple.laf.AquaScrollBarUI$ModelListener com.apple.laf.AquaScrollBarUI.createModelListener()

    private static var createModelListener_MethodID_4: jmethodID?

    open func createModelListener() -> /* class com.apple.laf.AquaScrollBarUI$ModelListener */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createModelListener", methodSig: "()Lcom/apple/laf/AquaScrollBarUI$ModelListener;", methodCache: &AquaScrollBarUI.createModelListener_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class com.apple.laf.AquaScrollBarUI$ModelListener */ UnavailableObject( javaObject: __return ) : nil
    }


    /// protected java.beans.PropertyChangeListener com.apple.laf.AquaScrollBarUI.createPropertyChangeListener()

    private static var createPropertyChangeListener_MethodID_5: jmethodID?

    open func createPropertyChangeListener() -> /* interface java.beans.PropertyChangeListener */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createPropertyChangeListener", methodSig: "()Ljava/beans/PropertyChangeListener;", methodCache: &AquaScrollBarUI.createPropertyChangeListener_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface java.beans.PropertyChangeListener */ UnavailableProtocolForward( javaObject: __return ) : nil
    }


    /// protected com.apple.laf.AquaScrollBarUI$ScrollListener com.apple.laf.AquaScrollBarUI.createScrollListener()

    private static var createScrollListener_MethodID_6: jmethodID?

    open func createScrollListener() -> /* class com.apple.laf.AquaScrollBarUI$ScrollListener */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createScrollListener", methodSig: "()Lcom/apple/laf/AquaScrollBarUI$ScrollListener;", methodCache: &AquaScrollBarUI.createScrollListener_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class com.apple.laf.AquaScrollBarUI$ScrollListener */ UnavailableObject( javaObject: __return ) : nil
    }


    /// protected com.apple.laf.AquaScrollBarUI$TrackListener com.apple.laf.AquaScrollBarUI.createTrackListener()

    private static var createTrackListener_MethodID_7: jmethodID?

    open func createTrackListener() -> /* class com.apple.laf.AquaScrollBarUI$TrackListener */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createTrackListener", methodSig: "()Lcom/apple/laf/AquaScrollBarUI$TrackListener;", methodCache: &AquaScrollBarUI.createTrackListener_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class com.apple.laf.AquaScrollBarUI$TrackListener */ UnavailableObject( javaObject: __return ) : nil
    }


    /// protected java.awt.Rectangle com.apple.laf.AquaScrollBarUI.getDragBounds()

    private static var getDragBounds_MethodID_8: jmethodID?

    open func getDragBounds() -> java_awt.Rectangle! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDragBounds", methodSig: "()Ljava/awt/Rectangle;", methodCache: &AquaScrollBarUI.getDragBounds_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Rectangle( javaObject: __return ) : nil
    }


    /// public java.awt.Dimension com.apple.laf.AquaScrollBarUI.getMaximumSize(javax.swing.JComponent)

    private static var getMaximumSize_MethodID_9: jmethodID?

    open func getMaximumSize( arg0: javax_swing.JComponent? ) -> java_awt.Dimension! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMaximumSize", methodSig: "(Ljavax/swing/JComponent;)Ljava/awt/Dimension;", methodCache: &AquaScrollBarUI.getMaximumSize_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }

    override open func getMaximumSize( _ _arg0: javax_swing.JComponent? ) -> java_awt.Dimension! {
        return getMaximumSize( arg0: _arg0 )
    }

    /// public java.awt.Dimension com.apple.laf.AquaScrollBarUI.getMinimumSize(javax.swing.JComponent)

    private static var getMinimumSize_MethodID_10: jmethodID?

    open func getMinimumSize( arg0: javax_swing.JComponent? ) -> java_awt.Dimension! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMinimumSize", methodSig: "(Ljavax/swing/JComponent;)Ljava/awt/Dimension;", methodCache: &AquaScrollBarUI.getMinimumSize_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }

    override open func getMinimumSize( _ _arg0: javax_swing.JComponent? ) -> java_awt.Dimension! {
        return getMinimumSize( arg0: _arg0 )
    }

    /// protected apple.laf.JRSUIConstants$Hit com.apple.laf.AquaScrollBarUI.getPartHit(int,int)

    private static var getPartHit_MethodID_11: jmethodID?

    open func getPartHit( arg0: Int, arg1: Int ) -> /* class apple.laf.JRSUIConstants$Hit */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPartHit", methodSig: "(II)Lapple/laf/JRSUIConstants$Hit;", methodCache: &AquaScrollBarUI.getPartHit_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class apple.laf.JRSUIConstants$Hit */ UnavailableObject( javaObject: __return ) : nil
    }

    open func getPartHit( _ _arg0: Int, _ _arg1: Int ) -> /* class apple.laf.JRSUIConstants$Hit */ UnavailableObject! {
        return getPartHit( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.Dimension com.apple.laf.AquaScrollBarUI.getPreferredSize(javax.swing.JComponent)

    private static var getPreferredSize_MethodID_12: jmethodID?

    open func getPreferredSize( arg0: javax_swing.JComponent? ) -> java_awt.Dimension! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPreferredSize", methodSig: "(Ljavax/swing/JComponent;)Ljava/awt/Dimension;", methodCache: &AquaScrollBarUI.getPreferredSize_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }

    override open func getPreferredSize( _ _arg0: javax_swing.JComponent? ) -> java_awt.Dimension! {
        return getPreferredSize( arg0: _arg0 )
    }

    /// protected apple.laf.JRSUIConstants$ScrollBarPart com.apple.laf.AquaScrollBarUI.getPressedPart()

    private static var getPressedPart_MethodID_13: jmethodID?

    open func getPressedPart() -> /* class apple.laf.JRSUIConstants$ScrollBarPart */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPressedPart", methodSig: "()Lapple/laf/JRSUIConstants$ScrollBarPart;", methodCache: &AquaScrollBarUI.getPressedPart_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class apple.laf.JRSUIConstants$ScrollBarPart */ UnavailableObject( javaObject: __return ) : nil
    }


    /// java.awt.Point com.apple.laf.AquaScrollBarUI.getScrollToHereStartPoint(int,int)

    // Skipping method: true false false false false 

    /// protected apple.laf.JRSUIConstants$State com.apple.laf.AquaScrollBarUI.getState(javax.swing.JComponent,apple.laf.JRSUIConstants$ScrollBarPart)

    private static var getState_MethodID_14: jmethodID?

    open func getState( arg0: javax_swing.JComponent?, arg1: /* class apple.laf.JRSUIConstants$ScrollBarPart */ UnavailableObject? ) -> /* class apple.laf.JRSUIConstants$State */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getState", methodSig: "(Ljavax/swing/JComponent;Lapple/laf/JRSUIConstants$ScrollBarPart;)Lapple/laf/JRSUIConstants$State;", methodCache: &AquaScrollBarUI.getState_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class apple.laf.JRSUIConstants$State */ UnavailableObject( javaObject: __return ) : nil
    }

    open func getState( _ _arg0: javax_swing.JComponent?, _ _arg1: /* class apple.laf.JRSUIConstants$ScrollBarPart */ UnavailableObject? ) -> /* class apple.laf.JRSUIConstants$State */ UnavailableObject! {
        return getState( arg0: _arg0, arg1: _arg1 )
    }

    /// float com.apple.laf.AquaScrollBarUI.getThumbPercent()

    // Skipping method: true false false false false 

    /// float com.apple.laf.AquaScrollBarUI.getThumbStart()

    // Skipping method: true false false false false 

    /// protected java.awt.Rectangle com.apple.laf.AquaScrollBarUI.getTrackBounds()

    private static var getTrackBounds_MethodID_15: jmethodID?

    open func getTrackBounds() -> java_awt.Rectangle! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTrackBounds", methodSig: "()Ljava/awt/Rectangle;", methodCache: &AquaScrollBarUI.getTrackBounds_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Rectangle( javaObject: __return ) : nil
    }


    /// protected void com.apple.laf.AquaScrollBarUI.installListeners()

    private static var installListeners_MethodID_16: jmethodID?

    open func installListeners() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installListeners", methodSig: "()V", methodCache: &AquaScrollBarUI.installListeners_MethodID_16, args: &__args, locals: &__locals )
    }


    /// public void com.apple.laf.AquaScrollBarUI.installUI(javax.swing.JComponent)

    private static var installUI_MethodID_17: jmethodID?

    open func installUI( arg0: javax_swing.JComponent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installUI", methodSig: "(Ljavax/swing/JComponent;)V", methodCache: &AquaScrollBarUI.installUI_MethodID_17, args: &__args, locals: &__locals )
    }

    override open func installUI( _ _arg0: javax_swing.JComponent? ) {
        installUI( arg0: _arg0 )
    }

    /// boolean com.apple.laf.AquaScrollBarUI.isHorizontal()

    // Skipping method: true false false false false 

    /// public void com.apple.laf.AquaScrollBarUI.layoutContainer(java.awt.Container)

    private static var layoutContainer_MethodID_18: jmethodID?

    open func layoutContainer( arg0: java_awt.Container? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "layoutContainer", methodSig: "(Ljava/awt/Container;)V", methodCache: &AquaScrollBarUI.layoutContainer_MethodID_18, args: &__args, locals: &__locals )
    }

    open func layoutContainer( _ _arg0: java_awt.Container? ) {
        layoutContainer( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaScrollBarUI.paint(java.awt.Graphics,javax.swing.JComponent)

    private static var paint_MethodID_19: jmethodID?

    open func paint( arg0: java_awt.Graphics?, arg1: javax_swing.JComponent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paint", methodSig: "(Ljava/awt/Graphics;Ljavax/swing/JComponent;)V", methodCache: &AquaScrollBarUI.paint_MethodID_19, args: &__args, locals: &__locals )
    }

    override open func paint( _ _arg0: java_awt.Graphics?, _ _arg1: javax_swing.JComponent? ) {
        paint( arg0: _arg0, arg1: _arg1 )
    }

    /// protected void com.apple.laf.AquaScrollBarUI.scrollByBlock(int)

    private static var scrollByBlock_MethodID_20: jmethodID?

    open func scrollByBlock( arg0: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "scrollByBlock", methodSig: "(I)V", methodCache: &AquaScrollBarUI.scrollByBlock_MethodID_20, args: &__args, locals: &__locals )
    }

    open func scrollByBlock( _ _arg0: Int ) {
        scrollByBlock( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaScrollBarUI.scrollByUnit(int)

    private static var scrollByUnit_MethodID_21: jmethodID?

    open func scrollByUnit( arg0: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "scrollByUnit", methodSig: "(I)V", methodCache: &AquaScrollBarUI.scrollByUnit_MethodID_21, args: &__args, locals: &__locals )
    }

    open func scrollByUnit( _ _arg0: Int ) {
        scrollByUnit( arg0: _arg0 )
    }

    /// protected boolean com.apple.laf.AquaScrollBarUI.shouldShowArrows()

    private static var shouldShowArrows_MethodID_22: jmethodID?

    open func shouldShowArrows() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "shouldShowArrows", methodSig: "()Z", methodCache: &AquaScrollBarUI.shouldShowArrows_MethodID_22, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// protected void com.apple.laf.AquaScrollBarUI.startTimer(boolean)

    private static var startTimer_MethodID_23: jmethodID?

    open func startTimer( arg0: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(arg0 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "startTimer", methodSig: "(Z)V", methodCache: &AquaScrollBarUI.startTimer_MethodID_23, args: &__args, locals: &__locals )
    }

    open func startTimer( _ _arg0: Bool ) {
        startTimer( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaScrollBarUI.syncState(javax.swing.JComponent)

    private static var syncState_MethodID_24: jmethodID?

    open func syncState( arg0: javax_swing.JComponent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "syncState", methodSig: "(Ljavax/swing/JComponent;)V", methodCache: &AquaScrollBarUI.syncState_MethodID_24, args: &__args, locals: &__locals )
    }

    open func syncState( _ _arg0: javax_swing.JComponent? ) {
        syncState( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaScrollBarUI.uninstallListeners()

    private static var uninstallListeners_MethodID_25: jmethodID?

    open func uninstallListeners() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallListeners", methodSig: "()V", methodCache: &AquaScrollBarUI.uninstallListeners_MethodID_25, args: &__args, locals: &__locals )
    }


    /// public void com.apple.laf.AquaScrollBarUI.uninstallUI(javax.swing.JComponent)

    private static var uninstallUI_MethodID_26: jmethodID?

    open func uninstallUI( arg0: javax_swing.JComponent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallUI", methodSig: "(Ljavax/swing/JComponent;)V", methodCache: &AquaScrollBarUI.uninstallUI_MethodID_26, args: &__args, locals: &__locals )
    }

    override open func uninstallUI( _ _arg0: javax_swing.JComponent? ) {
        uninstallUI( arg0: _arg0 )
    }

}

