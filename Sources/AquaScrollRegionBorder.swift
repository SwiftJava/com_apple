
import java_swift
import javax_swing
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class com.apple.laf.AquaScrollRegionBorder ///

open class AquaScrollRegionBorder: AquaBorder {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaScrollRegionBorderJNIClass: jclass?

    /// static final com.apple.laf.AquaUtils$RecyclableSingletonFromDefaultConstructor com.apple.laf.AquaScrollRegionBorder.instance

    // Skipping field: true false false false false false 

    /// protected final com.apple.laf.AquaPainter com.apple.laf.AquaBorder.painter

    private static var painter_FieldID: jfieldID?

    override open var painter: /* class com.apple.laf.AquaPainter */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "painter", fieldType: "Lcom/apple/laf/AquaPainter;", fieldCache: &AquaScrollRegionBorder.painter_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class com.apple.laf.AquaPainter */ UnavailableObject( javaObject: __value ) : nil
        }
    }

    /// protected final com.apple.laf.AquaUtilControlSize$SizeDescriptor com.apple.laf.AquaBorder.sizeDescriptor

    private static var sizeDescriptor_FieldID: jfieldID?

    override open var sizeDescriptor: AquaUtilControlSize_SizeDescriptor! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "sizeDescriptor", fieldType: "Lcom/apple/laf/AquaUtilControlSize$SizeDescriptor;", fieldCache: &AquaScrollRegionBorder.sizeDescriptor_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? AquaUtilControlSize_SizeDescriptor( javaObject: __value ) : nil
        }
    }

    /// protected com.apple.laf.AquaUtilControlSize$SizeVariant com.apple.laf.AquaBorder.sizeVariant

    private static var sizeVariant_FieldID: jfieldID?

    override open var sizeVariant: AquaUtilControlSize_SizeVariant! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "sizeVariant", fieldType: "Lcom/apple/laf/AquaUtilControlSize$SizeVariant;", fieldCache: &AquaScrollRegionBorder.sizeVariant_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? AquaUtilControlSize_SizeVariant( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "sizeVariant", fieldType: "Lcom/apple/laf/AquaUtilControlSize$SizeVariant;", fieldCache: &AquaScrollRegionBorder.sizeVariant_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// public com.apple.laf.AquaScrollRegionBorder()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaScrollRegionBorder", classCache: &AquaScrollRegionBorder.AquaScrollRegionBorderJNIClass, methodSig: "()V", methodCache: &AquaScrollRegionBorder.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public static com.apple.laf.AquaScrollRegionBorder com.apple.laf.AquaScrollRegionBorder.getScrollRegionBorder()

    private static var getScrollRegionBorder_MethodID_2: jmethodID?

    open class func getScrollRegionBorder() -> AquaScrollRegionBorder! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaScrollRegionBorder", classCache: &AquaScrollRegionBorderJNIClass, methodName: "getScrollRegionBorder", methodSig: "()Lcom/apple/laf/AquaScrollRegionBorder;", methodCache: &getScrollRegionBorder_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AquaScrollRegionBorder( javaObject: __return ) : nil
    }


    /// protected com.apple.laf.AquaPainter com.apple.laf.AquaScrollRegionBorder.createPainter()

    private static var createPainter_MethodID_3: jmethodID?

    override open func createPainter() -> /* class com.apple.laf.AquaPainter */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createPainter", methodSig: "()Lcom/apple/laf/AquaPainter;", methodCache: &AquaScrollRegionBorder.createPainter_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class com.apple.laf.AquaPainter */ UnavailableObject( javaObject: __return ) : nil
    }


    /// protected apple.laf.JRSUIConstants$State com.apple.laf.AquaScrollRegionBorder.getState(javax.swing.JComponent)

    private static var getState_MethodID_4: jmethodID?

    open func getState( arg0: javax_swing.JComponent? ) -> /* class apple.laf.JRSUIConstants$State */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getState", methodSig: "(Ljavax/swing/JComponent;)Lapple/laf/JRSUIConstants$State;", methodCache: &AquaScrollRegionBorder.getState_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class apple.laf.JRSUIConstants$State */ UnavailableObject( javaObject: __return ) : nil
    }

    open func getState( _ _arg0: javax_swing.JComponent? ) -> /* class apple.laf.JRSUIConstants$State */ UnavailableObject! {
        return getState( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaScrollRegionBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)

    // Skipping method: false true false false false 

}

