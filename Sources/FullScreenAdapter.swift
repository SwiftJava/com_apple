
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class com.apple.eawt.FullScreenAdapter ///

open class FullScreenAdapter: java_swift.JavaObject, FullScreenListener {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var FullScreenAdapterJNIClass: jclass?

    /// public com.apple.eawt.FullScreenAdapter()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "com/apple/eawt/FullScreenAdapter", classCache: &FullScreenAdapter.FullScreenAdapterJNIClass, methodSig: "()V", methodCache: &FullScreenAdapter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void com.apple.eawt.FullScreenAdapter.windowEnteredFullScreen(com.apple.eawt.AppEvent$FullScreenEvent)

    private static var windowEnteredFullScreen_MethodID_2: jmethodID?

    open func windowEnteredFullScreen( arg0: AppEvent_FullScreenEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "windowEnteredFullScreen", methodSig: "(Lcom/apple/eawt/AppEvent$FullScreenEvent;)V", methodCache: &FullScreenAdapter.windowEnteredFullScreen_MethodID_2, args: &__args, locals: &__locals )
    }

    open func windowEnteredFullScreen( _ _arg0: AppEvent_FullScreenEvent? ) {
        windowEnteredFullScreen( arg0: _arg0 )
    }

    /// public void com.apple.eawt.FullScreenAdapter.windowEnteringFullScreen(com.apple.eawt.AppEvent$FullScreenEvent)

    private static var windowEnteringFullScreen_MethodID_3: jmethodID?

    open func windowEnteringFullScreen( arg0: AppEvent_FullScreenEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "windowEnteringFullScreen", methodSig: "(Lcom/apple/eawt/AppEvent$FullScreenEvent;)V", methodCache: &FullScreenAdapter.windowEnteringFullScreen_MethodID_3, args: &__args, locals: &__locals )
    }

    open func windowEnteringFullScreen( _ _arg0: AppEvent_FullScreenEvent? ) {
        windowEnteringFullScreen( arg0: _arg0 )
    }

    /// public void com.apple.eawt.FullScreenAdapter.windowExitedFullScreen(com.apple.eawt.AppEvent$FullScreenEvent)

    private static var windowExitedFullScreen_MethodID_4: jmethodID?

    open func windowExitedFullScreen( arg0: AppEvent_FullScreenEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "windowExitedFullScreen", methodSig: "(Lcom/apple/eawt/AppEvent$FullScreenEvent;)V", methodCache: &FullScreenAdapter.windowExitedFullScreen_MethodID_4, args: &__args, locals: &__locals )
    }

    open func windowExitedFullScreen( _ _arg0: AppEvent_FullScreenEvent? ) {
        windowExitedFullScreen( arg0: _arg0 )
    }

    /// public void com.apple.eawt.FullScreenAdapter.windowExitingFullScreen(com.apple.eawt.AppEvent$FullScreenEvent)

    private static var windowExitingFullScreen_MethodID_5: jmethodID?

    open func windowExitingFullScreen( arg0: AppEvent_FullScreenEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "windowExitingFullScreen", methodSig: "(Lcom/apple/eawt/AppEvent$FullScreenEvent;)V", methodCache: &FullScreenAdapter.windowExitingFullScreen_MethodID_5, args: &__args, locals: &__locals )
    }

    open func windowExitingFullScreen( _ _arg0: AppEvent_FullScreenEvent? ) {
        windowExitingFullScreen( arg0: _arg0 )
    }

}

private typealias FullScreenAdapter_equals_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> jboolean

private func FullScreenAdapter_equals_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ arg0: jobject? ) -> jboolean {
    let __return = FullScreenAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).equals( arg0: arg0 != nil ? java_swift.JavaObject( javaObject: arg0 ) : nil )
    var __locals = [jobject]()
    return JNI.check( jvalue( z: jboolean(__return ? JNI_TRUE : JNI_FALSE) ).z, &__locals, removeLast: true )
}

private typealias FullScreenAdapter_hashCode_2_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong ) -> jint

private func FullScreenAdapter_hashCode_2( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong ) -> jint {
    let __return = FullScreenAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).hashCode( )
    var __locals = [jobject]()
    return JNI.check( jvalue( i: jint(__return) ).i, &__locals, removeLast: true )
}

private typealias FullScreenAdapter_toString_5_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong ) -> jobject?

private func FullScreenAdapter_toString_5( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong ) -> jobject? {
    let __return = FullScreenAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).toString( )
    var __locals = [jobject]()
    return JNI.check( JNIType.toJava( value: __return, locals: &__locals ).l, &__locals, removeLast: true )
}

private typealias FullScreenAdapter_windowEnteredFullScreen_9_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func FullScreenAdapter_windowEnteredFullScreen_9( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ arg0: jobject? ) -> () {
    FullScreenAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).windowEnteredFullScreen( arg0: arg0 != nil ? AppEvent_FullScreenEvent( javaObject: arg0 ) : nil )
}

private typealias FullScreenAdapter_windowEnteringFullScreen_10_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func FullScreenAdapter_windowEnteringFullScreen_10( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ arg0: jobject? ) -> () {
    FullScreenAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).windowEnteringFullScreen( arg0: arg0 != nil ? AppEvent_FullScreenEvent( javaObject: arg0 ) : nil )
}

private typealias FullScreenAdapter_windowExitedFullScreen_11_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func FullScreenAdapter_windowExitedFullScreen_11( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ arg0: jobject? ) -> () {
    FullScreenAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).windowExitedFullScreen( arg0: arg0 != nil ? AppEvent_FullScreenEvent( javaObject: arg0 ) : nil )
}

private typealias FullScreenAdapter_windowExitingFullScreen_12_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func FullScreenAdapter_windowExitingFullScreen_12( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ arg0: jobject? ) -> () {
    FullScreenAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).windowExitingFullScreen( arg0: arg0 != nil ? AppEvent_FullScreenEvent( javaObject: arg0 ) : nil )
}

fileprivate class FullScreenAdapterLocal_: JNIObjectProxy<FullScreenAdapter> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let FullScreenAdapter_equals_0_thunk: FullScreenAdapter_equals_0_type = FullScreenAdapter_equals_0
        natives.append( JNINativeMethod( name: strdup("__equals"), signature: strdup("(JLjava/lang/Object;)Z"), fnPtr: unsafeBitCast( FullScreenAdapter_equals_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let FullScreenAdapter_hashCode_2_thunk: FullScreenAdapter_hashCode_2_type = FullScreenAdapter_hashCode_2
        natives.append( JNINativeMethod( name: strdup("__hashCode"), signature: strdup("(J)I"), fnPtr: unsafeBitCast( FullScreenAdapter_hashCode_2_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let FullScreenAdapter_toString_5_thunk: FullScreenAdapter_toString_5_type = FullScreenAdapter_toString_5
        natives.append( JNINativeMethod( name: strdup("__toString"), signature: strdup("(J)Ljava/lang/String;"), fnPtr: unsafeBitCast( FullScreenAdapter_toString_5_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let FullScreenAdapter_windowEnteredFullScreen_9_thunk: FullScreenAdapter_windowEnteredFullScreen_9_type = FullScreenAdapter_windowEnteredFullScreen_9
        natives.append( JNINativeMethod( name: strdup("__windowEnteredFullScreen"), signature: strdup("(JLcom/apple/eawt/AppEvent$FullScreenEvent;)V"), fnPtr: unsafeBitCast( FullScreenAdapter_windowEnteredFullScreen_9_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let FullScreenAdapter_windowEnteringFullScreen_10_thunk: FullScreenAdapter_windowEnteringFullScreen_10_type = FullScreenAdapter_windowEnteringFullScreen_10
        natives.append( JNINativeMethod( name: strdup("__windowEnteringFullScreen"), signature: strdup("(JLcom/apple/eawt/AppEvent$FullScreenEvent;)V"), fnPtr: unsafeBitCast( FullScreenAdapter_windowEnteringFullScreen_10_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let FullScreenAdapter_windowExitedFullScreen_11_thunk: FullScreenAdapter_windowExitedFullScreen_11_type = FullScreenAdapter_windowExitedFullScreen_11
        natives.append( JNINativeMethod( name: strdup("__windowExitedFullScreen"), signature: strdup("(JLcom/apple/eawt/AppEvent$FullScreenEvent;)V"), fnPtr: unsafeBitCast( FullScreenAdapter_windowExitedFullScreen_11_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let FullScreenAdapter_windowExitingFullScreen_12_thunk: FullScreenAdapter_windowExitingFullScreen_12_type = FullScreenAdapter_windowExitingFullScreen_12
        natives.append( JNINativeMethod( name: strdup("__windowExitingFullScreen"), signature: strdup("(JLcom/apple/eawt/AppEvent$FullScreenEvent;)V"), fnPtr: unsafeBitCast( FullScreenAdapter_windowExitingFullScreen_12_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        natives.withUnsafeBufferPointer {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr.baseAddress, jint(nativesPtr.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/com_apple/FullScreenAdapterProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

open class FullScreenAdapterBase: FullScreenAdapter {

    private static var FullScreenAdapterBaseJNIClass: jclass? = FullScreenAdapterLocal_.proxyClass()

    private lazy var __local: FullScreenAdapterLocal_? = FullScreenAdapterLocal_( owned: self, proto: self )

    override open func clearLocal() {
        __local = nil
    }

    open func inherit( _ parent: JNIObjectProtocol ) {
        parent.withJavaObject {
            self.javaObject = $0
            self.__local?.takeOwnership(javaObject: $0)
        }
    }

    /// public com.apple.eawt.FullScreenAdapter()

    private static var new_MethodID_6: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )

        self.init( javaObject: nil )
        __args[0] = __local!.swiftValue()

        let __object = JNIMethod.NewObject( className: "org/swiftjava/com_apple/FullScreenAdapterProxy", classCache: &FullScreenAdapterBase.FullScreenAdapterBaseJNIClass, methodSig: "(J)V", methodCache: &FullScreenAdapterBase.new_MethodID_6, args: &__args, locals: &__locals )
        self.javaObject = __object
        JNI.DeleteLocalRef( __object )
    }

}
