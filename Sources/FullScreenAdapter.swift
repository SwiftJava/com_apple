
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:52:04 GMT 2016 ///

/// class com.apple.eawt.FullScreenAdapter ///

open class FullScreenAdapter: java_lang.JavaObject, FullScreenListener {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "com.apple.eawt.FullScreenAdapter", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var FullScreenAdapterJNIClass: jclass?

    /// public com.apple.eawt.FullScreenAdapter()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "com/apple/eawt/FullScreenAdapter", classCache: &FullScreenAdapter.FullScreenAdapterJNIClass, methodSig: "()V", methodCache: &FullScreenAdapter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void com.apple.eawt.FullScreenAdapter.windowEnteringFullScreen(com.apple.eawt.AppEvent$FullScreenEvent)

    private static var windowEnteringFullScreen_MethodID_2: jmethodID?

    open func windowEnteringFullScreen( arg0: AppEvent_FullScreenEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "windowEnteringFullScreen", methodSig: "(Lcom/apple/eawt/AppEvent$FullScreenEvent;)V", methodCache: &FullScreenAdapter.windowEnteringFullScreen_MethodID_2, args: &__args, locals: &__locals )
    }

    open func windowEnteringFullScreen( _ _arg0: AppEvent_FullScreenEvent? ) {
        windowEnteringFullScreen( arg0: _arg0 )
    }

    /// public void com.apple.eawt.FullScreenAdapter.windowEnteredFullScreen(com.apple.eawt.AppEvent$FullScreenEvent)

    private static var windowEnteredFullScreen_MethodID_3: jmethodID?

    open func windowEnteredFullScreen( arg0: AppEvent_FullScreenEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "windowEnteredFullScreen", methodSig: "(Lcom/apple/eawt/AppEvent$FullScreenEvent;)V", methodCache: &FullScreenAdapter.windowEnteredFullScreen_MethodID_3, args: &__args, locals: &__locals )
    }

    open func windowEnteredFullScreen( _ _arg0: AppEvent_FullScreenEvent? ) {
        windowEnteredFullScreen( arg0: _arg0 )
    }

    /// public void com.apple.eawt.FullScreenAdapter.windowExitingFullScreen(com.apple.eawt.AppEvent$FullScreenEvent)

    private static var windowExitingFullScreen_MethodID_4: jmethodID?

    open func windowExitingFullScreen( arg0: AppEvent_FullScreenEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "windowExitingFullScreen", methodSig: "(Lcom/apple/eawt/AppEvent$FullScreenEvent;)V", methodCache: &FullScreenAdapter.windowExitingFullScreen_MethodID_4, args: &__args, locals: &__locals )
    }

    open func windowExitingFullScreen( _ _arg0: AppEvent_FullScreenEvent? ) {
        windowExitingFullScreen( arg0: _arg0 )
    }

    /// public void com.apple.eawt.FullScreenAdapter.windowExitedFullScreen(com.apple.eawt.AppEvent$FullScreenEvent)

    private static var windowExitedFullScreen_MethodID_5: jmethodID?

    open func windowExitedFullScreen( arg0: AppEvent_FullScreenEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "windowExitedFullScreen", methodSig: "(Lcom/apple/eawt/AppEvent$FullScreenEvent;)V", methodCache: &FullScreenAdapter.windowExitedFullScreen_MethodID_5, args: &__args, locals: &__locals )
    }

    open func windowExitedFullScreen( _ _arg0: AppEvent_FullScreenEvent? ) {
        windowExitedFullScreen( arg0: _arg0 )
    }

}
private typealias FullScreenAdapter_windowEnteringFullScreen_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func FullScreenAdapter_windowEnteringFullScreen_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    FullScreenAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).windowEnteringFullScreen( arg0 != nil ? AppEvent_FullScreenEvent( javaObject: arg0 ) : nil )
}

private typealias FullScreenAdapter_windowEnteredFullScreen_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func FullScreenAdapter_windowEnteredFullScreen_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    FullScreenAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).windowEnteredFullScreen( arg0 != nil ? AppEvent_FullScreenEvent( javaObject: arg0 ) : nil )
}

private typealias FullScreenAdapter_windowExitingFullScreen_2_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func FullScreenAdapter_windowExitingFullScreen_2( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    FullScreenAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).windowExitingFullScreen( arg0 != nil ? AppEvent_FullScreenEvent( javaObject: arg0 ) : nil )
}

private typealias FullScreenAdapter_windowExitedFullScreen_3_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func FullScreenAdapter_windowExitedFullScreen_3( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    FullScreenAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).windowExitedFullScreen( arg0 != nil ? AppEvent_FullScreenEvent( javaObject: arg0 ) : nil )
}

private typealias FullScreenAdapter_equals_7_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> jboolean

private func FullScreenAdapter_equals_7( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> jboolean {
    let __return = FullScreenAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).equals( arg0 != nil ? java_lang.JavaObject( javaObject: arg0 ) : nil )
    return JNIType.encode( value: __return, locals: nil ).z
}

private typealias FullScreenAdapter_toString_8_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject? ) -> jobject?

private func FullScreenAdapter_toString_8( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject? ) -> jobject? {
    let __return = FullScreenAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).toString( )
    return JNIType.encode( value: __return, locals: nil ).l
}

private typealias FullScreenAdapter_hashCode_9_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject? ) -> jint

private func FullScreenAdapter_hashCode_9( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject? ) -> jint {
    let __return = FullScreenAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).hashCode( )
    return JNIType.encode( value: __return, locals: nil ).i
}

open class FullScreenAdapterBase: FullScreenAdapter {

    private static var FullScreenAdapterBaseJNIClass: jclass?
    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let FullScreenAdapter_windowEnteringFullScreen_0_thunk: FullScreenAdapter_windowEnteringFullScreen_0_type = FullScreenAdapter_windowEnteringFullScreen_0
            natives.append( JNINativeMethod( name: strdup("__windowEnteringFullScreen"), signature: strdup("(Lcom/apple/eawt/AppEvent$FullScreenEvent;)V"), fnPtr: unsafeBitCast( FullScreenAdapter_windowEnteringFullScreen_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let FullScreenAdapter_windowEnteredFullScreen_1_thunk: FullScreenAdapter_windowEnteredFullScreen_1_type = FullScreenAdapter_windowEnteredFullScreen_1
            natives.append( JNINativeMethod( name: strdup("__windowEnteredFullScreen"), signature: strdup("(Lcom/apple/eawt/AppEvent$FullScreenEvent;)V"), fnPtr: unsafeBitCast( FullScreenAdapter_windowEnteredFullScreen_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let FullScreenAdapter_windowExitingFullScreen_2_thunk: FullScreenAdapter_windowExitingFullScreen_2_type = FullScreenAdapter_windowExitingFullScreen_2
            natives.append( JNINativeMethod( name: strdup("__windowExitingFullScreen"), signature: strdup("(Lcom/apple/eawt/AppEvent$FullScreenEvent;)V"), fnPtr: unsafeBitCast( FullScreenAdapter_windowExitingFullScreen_2_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let FullScreenAdapter_windowExitedFullScreen_3_thunk: FullScreenAdapter_windowExitedFullScreen_3_type = FullScreenAdapter_windowExitedFullScreen_3
            natives.append( JNINativeMethod( name: strdup("__windowExitedFullScreen"), signature: strdup("(Lcom/apple/eawt/AppEvent$FullScreenEvent;)V"), fnPtr: unsafeBitCast( FullScreenAdapter_windowExitedFullScreen_3_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let FullScreenAdapter_equals_7_thunk: FullScreenAdapter_equals_7_type = FullScreenAdapter_equals_7
            natives.append( JNINativeMethod( name: strdup("__equals"), signature: strdup("(Ljava/lang/Object;)Z"), fnPtr: unsafeBitCast( FullScreenAdapter_equals_7_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let FullScreenAdapter_toString_8_thunk: FullScreenAdapter_toString_8_type = FullScreenAdapter_toString_8
            natives.append( JNINativeMethod( name: strdup("__toString"), signature: strdup("()Ljava/lang/String;"), fnPtr: unsafeBitCast( FullScreenAdapter_toString_8_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let FullScreenAdapter_hashCode_9_thunk: FullScreenAdapter_hashCode_9_type = FullScreenAdapter_hashCode_9
            natives.append( JNINativeMethod( name: strdup("__hashCode"), signature: strdup("()I"), fnPtr: unsafeBitCast( FullScreenAdapter_hashCode_9_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/com_apple/FullScreenAdapterProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    override open var javaObject: jobject? {
        get {
            return super.javaObject
        }
        set(newValue) {
            super.javaObject = newValue
            FullScreenAdapterBase.registerNatives()
            updateSwiftObject()
        }
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> FullScreenAdapterBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: FullScreenAdapterBase.self )
    }

    /// public com.apple.eawt.FullScreenAdapter()

    private static var new_MethodID_6: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()

        self.init( javaObject: nil )
        __args[0] = swiftValue()

        let __object = JNIMethod.NewObject( className: "org/genie/com_apple/FullScreenAdapterProxy", classCache: &FullScreenAdapterBase.FullScreenAdapterBaseJNIClass, methodSig: "(J)V", methodCache: &FullScreenAdapterBase.new_MethodID_6, args: &__args, locals: &__locals )
        self.javaObject = __object
        JNI.DeleteLocalRef( __object )
    }

}
