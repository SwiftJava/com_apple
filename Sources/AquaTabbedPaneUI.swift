
import java_swift
import java_awt
import java_lang
import javax_swing

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class com.apple.laf.AquaTabbedPaneUI ///

open class AquaTabbedPaneUI: AquaTabbedPaneCopyFromBasicUI {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaTabbedPaneUIJNIClass: jclass?

    /// private static final int com.apple.laf.AquaTabbedPaneUI.TAB_BORDER_INSET

    /// static com.apple.laf.AquaTabbedPaneUI$AlterRects[] com.apple.laf.AquaTabbedPaneUI.alterRects

    // Skipping field: true false false false false false 

    /// private static final int com.apple.laf.AquaTabbedPaneUI.kLargeTabHeight

    /// private static final int com.apple.laf.AquaTabbedPaneUI.kMaxIconSize

    /// private static final double com.apple.laf.AquaTabbedPaneUI.kNinetyDegrees

    /// private static final int com.apple.laf.AquaTabbedPaneUI.kSmallTabHeight

    /// protected final java.awt.Insets com.apple.laf.AquaTabbedPaneUI.contentDrawingInsets

    private static var contentDrawingInsets_FieldID: jfieldID?

    open var contentDrawingInsets: java_awt.Insets! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "contentDrawingInsets", fieldType: "Ljava/awt/Insets;", fieldCache: &AquaTabbedPaneUI.contentDrawingInsets_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Insets( javaObject: __value ) : nil
        }
    }

    /// protected final java.awt.Insets com.apple.laf.AquaTabbedPaneUI.currentContentBorderInsets

    private static var currentContentBorderInsets_FieldID: jfieldID?

    open var currentContentBorderInsets: java_awt.Insets! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "currentContentBorderInsets", fieldType: "Ljava/awt/Insets;", fieldCache: &AquaTabbedPaneUI.currentContentBorderInsets_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Insets( javaObject: __value ) : nil
        }
    }

    /// protected final java.awt.Insets com.apple.laf.AquaTabbedPaneUI.currentContentDrawingInsets

    private static var currentContentDrawingInsets_FieldID: jfieldID?

    open var currentContentDrawingInsets: java_awt.Insets! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "currentContentDrawingInsets", fieldType: "Ljava/awt/Insets;", fieldCache: &AquaTabbedPaneUI.currentContentDrawingInsets_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Insets( javaObject: __value ) : nil
        }
    }

    /// final java.awt.Rectangle com.apple.laf.AquaTabbedPaneUI.fContentRect

    // Skipping field: true false false false false false 

    /// final java.awt.Rectangle com.apple.laf.AquaTabbedPaneUI.fIconRect

    // Skipping field: true false false false false false 

    /// final java.awt.Rectangle com.apple.laf.AquaTabbedPaneUI.fTextRect

    // Skipping field: true false false false false false 

    /// protected boolean com.apple.laf.AquaTabbedPaneUI.hasAvoidedFirstFocus

    private static var hasAvoidedFirstFocus_FieldID: jfieldID?

    open var hasAvoidedFirstFocus: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "hasAvoidedFirstFocus", fieldType: "Z", fieldCache: &AquaTabbedPaneUI.hasAvoidedFirstFocus_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "hasAvoidedFirstFocus", fieldType: "Z", fieldCache: &AquaTabbedPaneUI.hasAvoidedFirstFocus_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected java.lang.Boolean com.apple.laf.AquaTabbedPaneUI.isDefaultFocusReceiver

    private static var isDefaultFocusReceiver_FieldID: jfieldID?

    open var isDefaultFocusReceiver: java_lang.Boolean! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "isDefaultFocusReceiver", fieldType: "Ljava/lang/Boolean;", fieldCache: &AquaTabbedPaneUI.isDefaultFocusReceiver_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_lang.Boolean( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "isDefaultFocusReceiver", fieldType: "Ljava/lang/Boolean;", fieldCache: &AquaTabbedPaneUI.isDefaultFocusReceiver_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected final com.apple.laf.AquaPainter com.apple.laf.AquaTabbedPaneUI.painter

    private static var painter_FieldID: jfieldID?

    open var painter: /* class com.apple.laf.AquaPainter */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "painter", fieldType: "Lcom/apple/laf/AquaPainter;", fieldCache: &AquaTabbedPaneUI.painter_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class com.apple.laf.AquaPainter */ UnavailableObject( javaObject: __value ) : nil
        }
    }

    /// protected boolean com.apple.laf.AquaTabbedPaneUI.popupSelectionChanged

    private static var popupSelectionChanged_FieldID: jfieldID?

    open var popupSelectionChanged: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "popupSelectionChanged", fieldType: "Z", fieldCache: &AquaTabbedPaneUI.popupSelectionChanged_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "popupSelectionChanged", fieldType: "Z", fieldCache: &AquaTabbedPaneUI.popupSelectionChanged_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected int com.apple.laf.AquaTabbedPaneUI.pressedTab

    private static var pressedTab_FieldID: jfieldID?

    open var pressedTab: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "pressedTab", fieldType: "I", fieldCache: &AquaTabbedPaneUI.pressedTab_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "pressedTab", fieldType: "I", fieldCache: &AquaTabbedPaneUI.pressedTab_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected final com.apple.laf.AquaTabbedPaneTabState com.apple.laf.AquaTabbedPaneUI.visibleTabState

    private static var visibleTabState_FieldID: jfieldID?

    open var visibleTabState: /* class com.apple.laf.AquaTabbedPaneTabState */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "visibleTabState", fieldType: "Lcom/apple/laf/AquaTabbedPaneTabState;", fieldCache: &AquaTabbedPaneUI.visibleTabState_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class com.apple.laf.AquaTabbedPaneTabState */ UnavailableObject( javaObject: __value ) : nil
        }
    }

    /// private static final int com.apple.laf.AquaTabbedPaneCopyFromBasicUI.CROP_SEGMENT

    /// private static int[] com.apple.laf.AquaTabbedPaneCopyFromBasicUI.xCropLen

    /// private static int[] com.apple.laf.AquaTabbedPaneCopyFromBasicUI.yCropLen

    /// private int com.apple.laf.AquaTabbedPaneCopyFromBasicUI.baseline

    /// protected transient java.awt.Rectangle com.apple.laf.AquaTabbedPaneCopyFromBasicUI.calcRect

    private static var calcRect_FieldID: jfieldID?

    override open var calcRect: java_awt.Rectangle! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "calcRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &AquaTabbedPaneUI.calcRect_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Rectangle( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "calcRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &AquaTabbedPaneUI.calcRect_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean com.apple.laf.AquaTabbedPaneCopyFromBasicUI.calculatedBaseline

    /// protected java.awt.Insets com.apple.laf.AquaTabbedPaneCopyFromBasicUI.contentBorderInsets

    private static var contentBorderInsets_FieldID: jfieldID?

    override open var contentBorderInsets: java_awt.Insets! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "contentBorderInsets", fieldType: "Ljava/awt/Insets;", fieldCache: &AquaTabbedPaneUI.contentBorderInsets_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Insets( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "contentBorderInsets", fieldType: "Ljava/awt/Insets;", fieldCache: &AquaTabbedPaneUI.contentBorderInsets_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean com.apple.laf.AquaTabbedPaneCopyFromBasicUI.contentOpaque

    /// private final java.awt.Insets com.apple.laf.AquaTabbedPaneCopyFromBasicUI.currentPadInsets

    /// private final java.awt.Insets com.apple.laf.AquaTabbedPaneCopyFromBasicUI.currentTabAreaInsets

    /// protected java.awt.Color com.apple.laf.AquaTabbedPaneCopyFromBasicUI.darkShadow

    private static var darkShadow_FieldID: jfieldID?

    override open var darkShadow: java_awt.Color! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "darkShadow", fieldType: "Ljava/awt/Color;", fieldCache: &AquaTabbedPaneUI.darkShadow_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Color( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "darkShadow", fieldType: "Ljava/awt/Color;", fieldCache: &AquaTabbedPaneUI.darkShadow_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.KeyStroke com.apple.laf.AquaTabbedPaneCopyFromBasicUI.downKey

    private static var downKey_FieldID: jfieldID?

    override open var downKey: javax_swing.KeyStroke! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "downKey", fieldType: "Ljavax/swing/KeyStroke;", fieldCache: &AquaTabbedPaneUI.downKey_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.KeyStroke( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "downKey", fieldType: "Ljavax/swing/KeyStroke;", fieldCache: &AquaTabbedPaneUI.downKey_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Color com.apple.laf.AquaTabbedPaneCopyFromBasicUI.focus

    private static var focus_FieldID: jfieldID?

    override open var focus: java_awt.Color! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "focus", fieldType: "Ljava/awt/Color;", fieldCache: &AquaTabbedPaneUI.focus_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Color( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "focus", fieldType: "Ljava/awt/Color;", fieldCache: &AquaTabbedPaneUI.focus_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private int com.apple.laf.AquaTabbedPaneCopyFromBasicUI.focusIndex

    /// protected java.awt.event.FocusListener com.apple.laf.AquaTabbedPaneCopyFromBasicUI.focusListener

    private static var focusListener_FieldID: jfieldID?

    override open var focusListener: java_awt.FocusListener! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "focusListener", fieldType: "Ljava/awt/event/FocusListener;", fieldCache: &AquaTabbedPaneUI.focusListener_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.FocusListenerForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "focusListener", fieldType: "Ljava/awt/event/FocusListener;", fieldCache: &AquaTabbedPaneUI.focusListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private com.apple.laf.AquaTabbedPaneCopyFromBasicUI$Handler com.apple.laf.AquaTabbedPaneCopyFromBasicUI.handler

    /// protected java.awt.Color com.apple.laf.AquaTabbedPaneCopyFromBasicUI.highlight

    private static var highlight_FieldID: jfieldID?

    override open var highlight: java_awt.Color! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "highlight", fieldType: "Ljava/awt/Color;", fieldCache: &AquaTabbedPaneUI.highlight_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Color( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "highlight", fieldType: "Ljava/awt/Color;", fieldCache: &AquaTabbedPaneUI.highlight_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private java.util.Vector com.apple.laf.AquaTabbedPaneCopyFromBasicUI.htmlViews

    /// private boolean com.apple.laf.AquaTabbedPaneCopyFromBasicUI.isRunsDirty

    /// protected javax.swing.KeyStroke com.apple.laf.AquaTabbedPaneCopyFromBasicUI.leftKey

    private static var leftKey_FieldID: jfieldID?

    override open var leftKey: javax_swing.KeyStroke! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "leftKey", fieldType: "Ljavax/swing/KeyStroke;", fieldCache: &AquaTabbedPaneUI.leftKey_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.KeyStroke( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "leftKey", fieldType: "Ljavax/swing/KeyStroke;", fieldCache: &AquaTabbedPaneUI.leftKey_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Color com.apple.laf.AquaTabbedPaneCopyFromBasicUI.lightHighlight

    private static var lightHighlight_FieldID: jfieldID?

    override open var lightHighlight: java_awt.Color! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "lightHighlight", fieldType: "Ljava/awt/Color;", fieldCache: &AquaTabbedPaneUI.lightHighlight_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Color( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "lightHighlight", fieldType: "Ljava/awt/Color;", fieldCache: &AquaTabbedPaneUI.lightHighlight_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int com.apple.laf.AquaTabbedPaneCopyFromBasicUI.maxTabHeight

    private static var maxTabHeight_FieldID: jfieldID?

    override open var maxTabHeight: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "maxTabHeight", fieldType: "I", fieldCache: &AquaTabbedPaneUI.maxTabHeight_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "maxTabHeight", fieldType: "I", fieldCache: &AquaTabbedPaneUI.maxTabHeight_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int com.apple.laf.AquaTabbedPaneCopyFromBasicUI.maxTabWidth

    private static var maxTabWidth_FieldID: jfieldID?

    override open var maxTabWidth: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "maxTabWidth", fieldType: "I", fieldCache: &AquaTabbedPaneUI.maxTabWidth_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "maxTabWidth", fieldType: "I", fieldCache: &AquaTabbedPaneUI.maxTabWidth_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// private javax.swing.InputMap com.apple.laf.AquaTabbedPaneCopyFromBasicUI.mnemonicInputMap

    /// private java.util.Hashtable com.apple.laf.AquaTabbedPaneCopyFromBasicUI.mnemonicToIndexMap

    /// protected java.awt.event.MouseListener com.apple.laf.AquaTabbedPaneCopyFromBasicUI.mouseListener

    private static var mouseListener_FieldID: jfieldID?

    override open var mouseListener: java_awt.MouseListener! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "mouseListener", fieldType: "Ljava/awt/event/MouseListener;", fieldCache: &AquaTabbedPaneUI.mouseListener_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.MouseListenerForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "mouseListener", fieldType: "Ljava/awt/event/MouseListener;", fieldCache: &AquaTabbedPaneUI.mouseListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.beans.PropertyChangeListener com.apple.laf.AquaTabbedPaneCopyFromBasicUI.propertyChangeListener

    private static var propertyChangeListener_FieldID: jfieldID?

    override open var propertyChangeListener: /* interface java.beans.PropertyChangeListener */ UnavailableProtocol! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "propertyChangeListener", fieldType: "Ljava/beans/PropertyChangeListener;", fieldCache: &AquaTabbedPaneUI.propertyChangeListener_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* interface java.beans.PropertyChangeListener */ UnavailableProtocolForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "propertyChangeListener", fieldType: "Ljava/beans/PropertyChangeListener;", fieldCache: &AquaTabbedPaneUI.propertyChangeListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Rectangle[] com.apple.laf.AquaTabbedPaneCopyFromBasicUI.rects

    private static var rects_FieldID: jfieldID?

    override open var rects: [Rectangle]! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "rects", fieldType: "[Ljava/awt/Rectangle;", fieldCache: &AquaTabbedPaneUI.rects_FieldID, object: javaObject )
            return JNIType.toSwift( type: [Rectangle].self, from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "rects", fieldType: "[Ljava/awt/Rectangle;", fieldCache: &AquaTabbedPaneUI.rects_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.KeyStroke com.apple.laf.AquaTabbedPaneCopyFromBasicUI.rightKey

    private static var rightKey_FieldID: jfieldID?

    override open var rightKey: javax_swing.KeyStroke! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "rightKey", fieldType: "Ljavax/swing/KeyStroke;", fieldCache: &AquaTabbedPaneUI.rightKey_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.KeyStroke( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "rightKey", fieldType: "Ljavax/swing/KeyStroke;", fieldCache: &AquaTabbedPaneUI.rightKey_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private int com.apple.laf.AquaTabbedPaneCopyFromBasicUI.rolloverTabIndex

    /// protected int com.apple.laf.AquaTabbedPaneCopyFromBasicUI.runCount

    private static var runCount_FieldID: jfieldID?

    override open var runCount: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "runCount", fieldType: "I", fieldCache: &AquaTabbedPaneUI.runCount_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "runCount", fieldType: "I", fieldCache: &AquaTabbedPaneUI.runCount_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// private java.awt.Color com.apple.laf.AquaTabbedPaneCopyFromBasicUI.selectedColor

    /// protected int com.apple.laf.AquaTabbedPaneCopyFromBasicUI.selectedRun

    private static var selectedRun_FieldID: jfieldID?

    override open var selectedRun: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "selectedRun", fieldType: "I", fieldCache: &AquaTabbedPaneUI.selectedRun_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "selectedRun", fieldType: "I", fieldCache: &AquaTabbedPaneUI.selectedRun_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected java.awt.Insets com.apple.laf.AquaTabbedPaneCopyFromBasicUI.selectedTabPadInsets

    private static var selectedTabPadInsets_FieldID: jfieldID?

    override open var selectedTabPadInsets: java_awt.Insets! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "selectedTabPadInsets", fieldType: "Ljava/awt/Insets;", fieldCache: &AquaTabbedPaneUI.selectedTabPadInsets_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Insets( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "selectedTabPadInsets", fieldType: "Ljava/awt/Insets;", fieldCache: &AquaTabbedPaneUI.selectedTabPadInsets_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Color com.apple.laf.AquaTabbedPaneCopyFromBasicUI.shadow

    private static var shadow_FieldID: jfieldID?

    override open var shadow: java_awt.Color! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "shadow", fieldType: "Ljava/awt/Color;", fieldCache: &AquaTabbedPaneUI.shadow_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Color( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "shadow", fieldType: "Ljava/awt/Color;", fieldCache: &AquaTabbedPaneUI.shadow_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Insets com.apple.laf.AquaTabbedPaneCopyFromBasicUI.tabAreaInsets

    private static var tabAreaInsets_FieldID: jfieldID?

    override open var tabAreaInsets: java_awt.Insets! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "tabAreaInsets", fieldType: "Ljava/awt/Insets;", fieldCache: &AquaTabbedPaneUI.tabAreaInsets_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Insets( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "tabAreaInsets", fieldType: "Ljava/awt/Insets;", fieldCache: &AquaTabbedPaneUI.tabAreaInsets_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.event.ChangeListener com.apple.laf.AquaTabbedPaneCopyFromBasicUI.tabChangeListener

    private static var tabChangeListener_FieldID: jfieldID?

    override open var tabChangeListener: javax_swing.ChangeListener! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "tabChangeListener", fieldType: "Ljavax/swing/event/ChangeListener;", fieldCache: &AquaTabbedPaneUI.tabChangeListener_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.ChangeListenerForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "tabChangeListener", fieldType: "Ljavax/swing/event/ChangeListener;", fieldCache: &AquaTabbedPaneUI.tabChangeListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private com.apple.laf.AquaTabbedPaneCopyFromBasicUI$TabContainer com.apple.laf.AquaTabbedPaneCopyFromBasicUI.tabContainer

    /// protected java.awt.Insets com.apple.laf.AquaTabbedPaneCopyFromBasicUI.tabInsets

    private static var tabInsets_FieldID: jfieldID?

    override open var tabInsets: java_awt.Insets! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "tabInsets", fieldType: "Ljava/awt/Insets;", fieldCache: &AquaTabbedPaneUI.tabInsets_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Insets( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "tabInsets", fieldType: "Ljava/awt/Insets;", fieldCache: &AquaTabbedPaneUI.tabInsets_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.JTabbedPane com.apple.laf.AquaTabbedPaneCopyFromBasicUI.tabPane

    private static var tabPane_FieldID: jfieldID?

    override open var tabPane: javax_swing.JTabbedPane! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "tabPane", fieldType: "Ljavax/swing/JTabbedPane;", fieldCache: &AquaTabbedPaneUI.tabPane_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.JTabbedPane( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "tabPane", fieldType: "Ljavax/swing/JTabbedPane;", fieldCache: &AquaTabbedPaneUI.tabPane_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int com.apple.laf.AquaTabbedPaneCopyFromBasicUI.tabRunOverlay

    private static var tabRunOverlay_FieldID: jfieldID?

    override open var tabRunOverlay: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "tabRunOverlay", fieldType: "I", fieldCache: &AquaTabbedPaneUI.tabRunOverlay_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "tabRunOverlay", fieldType: "I", fieldCache: &AquaTabbedPaneUI.tabRunOverlay_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int[] com.apple.laf.AquaTabbedPaneCopyFromBasicUI.tabRuns

    private static var tabRuns_FieldID: jfieldID?

    override open var tabRuns: [Int32]! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "tabRuns", fieldType: "[I", fieldCache: &AquaTabbedPaneUI.tabRuns_FieldID, object: javaObject )
            return JNIType.toSwift( type: [Int32].self, from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "tabRuns", fieldType: "[I", fieldCache: &AquaTabbedPaneUI.tabRuns_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private com.apple.laf.AquaTabbedPaneCopyFromBasicUI$ScrollableTabSupport com.apple.laf.AquaTabbedPaneCopyFromBasicUI.tabScroller

    /// private boolean com.apple.laf.AquaTabbedPaneCopyFromBasicUI.tabsOpaque

    /// private boolean com.apple.laf.AquaTabbedPaneCopyFromBasicUI.tabsOverlapBorder

    /// protected int com.apple.laf.AquaTabbedPaneCopyFromBasicUI.textIconGap

    private static var textIconGap_FieldID: jfieldID?

    override open var textIconGap: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "textIconGap", fieldType: "I", fieldCache: &AquaTabbedPaneUI.textIconGap_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "textIconGap", fieldType: "I", fieldCache: &AquaTabbedPaneUI.textIconGap_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected javax.swing.KeyStroke com.apple.laf.AquaTabbedPaneCopyFromBasicUI.upKey

    private static var upKey_FieldID: jfieldID?

    override open var upKey: javax_swing.KeyStroke! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "upKey", fieldType: "Ljavax/swing/KeyStroke;", fieldCache: &AquaTabbedPaneUI.upKey_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.KeyStroke( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "upKey", fieldType: "Ljavax/swing/KeyStroke;", fieldCache: &AquaTabbedPaneUI.upKey_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private java.awt.Component com.apple.laf.AquaTabbedPaneCopyFromBasicUI.visibleComponent

    /// public static final int javax.swing.SwingConstants.BOTTOM

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.CENTER

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.EAST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.HORIZONTAL

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.LEADING

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.LEFT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NEXT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NORTH

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NORTH_EAST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NORTH_WEST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.PREVIOUS

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.RIGHT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.SOUTH

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.SOUTH_EAST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.SOUTH_WEST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.TOP

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.TRAILING

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.VERTICAL

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.WEST

    // Skipping field: false true false false false false 

    /// public com.apple.laf.AquaTabbedPaneUI()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaTabbedPaneUI", classCache: &AquaTabbedPaneUI.AquaTabbedPaneUIJNIClass, methodSig: "()V", methodCache: &AquaTabbedPaneUI.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public static javax.swing.plaf.ComponentUI com.apple.laf.AquaTabbedPaneUI.createUI(javax.swing.JComponent)

    private static var createUI_MethodID_2: jmethodID?

    override open class func createUI( arg0: javax_swing.JComponent? ) -> javax_swing.ComponentUI! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaTabbedPaneUI", classCache: &AquaTabbedPaneUIJNIClass, methodName: "createUI", methodSig: "(Ljavax/swing/JComponent;)Ljavax/swing/plaf/ComponentUI;", methodCache: &createUI_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.ComponentUI( javaObject: __return ) : nil
    }

    override open class func createUI( _ _arg0: javax_swing.JComponent? ) -> javax_swing.ComponentUI! {
        return createUI( arg0: _arg0 )
    }

    /// protected static com.apple.laf.AquaTabbedPaneUI$AlterRects com.apple.laf.AquaTabbedPaneUI.getAlterationFor(int)

    private static var getAlterationFor_MethodID_3: jmethodID?

    open class func getAlterationFor( arg0: Int ) -> /* class com.apple.laf.AquaTabbedPaneUI$AlterRects */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaTabbedPaneUI", classCache: &AquaTabbedPaneUIJNIClass, methodName: "getAlterationFor", methodSig: "(I)Lcom/apple/laf/AquaTabbedPaneUI$AlterRects;", methodCache: &getAlterationFor_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class com.apple.laf.AquaTabbedPaneUI$AlterRects */ UnavailableObject( javaObject: __return ) : nil
    }

    open class func getAlterationFor( _ _arg0: Int ) -> /* class com.apple.laf.AquaTabbedPaneUI$AlterRects */ UnavailableObject! {
        return getAlterationFor( arg0: _arg0 )
    }

    /// protected static apple.laf.JRSUIConstants$SegmentPosition com.apple.laf.AquaTabbedPaneUI.getSegmentPosition(boolean,boolean,boolean)

    private static var getSegmentPosition_MethodID_4: jmethodID?

    open class func getSegmentPosition( arg0: Bool, arg1: Bool, arg2: Bool ) -> /* class apple.laf.JRSUIConstants$SegmentPosition */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = jvalue( z: jboolean(arg0 ? JNI_TRUE : JNI_FALSE) )
        __args[1] = jvalue( z: jboolean(arg1 ? JNI_TRUE : JNI_FALSE) )
        __args[2] = jvalue( z: jboolean(arg2 ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaTabbedPaneUI", classCache: &AquaTabbedPaneUIJNIClass, methodName: "getSegmentPosition", methodSig: "(ZZZ)Lapple/laf/JRSUIConstants$SegmentPosition;", methodCache: &getSegmentPosition_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class apple.laf.JRSUIConstants$SegmentPosition */ UnavailableObject( javaObject: __return ) : nil
    }

    open class func getSegmentPosition( _ _arg0: Bool, _ _arg1: Bool, _ _arg2: Bool ) -> /* class apple.laf.JRSUIConstants$SegmentPosition */ UnavailableObject! {
        return getSegmentPosition( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// private static boolean com.apple.laf.AquaTabbedPaneUI.isScrollTabIndex(int)

    /// protected static void com.apple.laf.AquaTabbedPaneUI.rotateInsets(java.awt.Insets,java.awt.Insets,int)

    private static var rotateInsets_MethodID_5: jmethodID?

    override open class func rotateInsets( arg0: java_awt.Insets?, arg1: java_awt.Insets?, arg2: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = jvalue( i: jint(arg2) )
        JNIMethod.CallStaticVoidMethod( className: "com/apple/laf/AquaTabbedPaneUI", classCache: &AquaTabbedPaneUIJNIClass, methodName: "rotateInsets", methodSig: "(Ljava/awt/Insets;Ljava/awt/Insets;I)V", methodCache: &rotateInsets_MethodID_5, args: &__args, locals: &__locals )
    }

    override open class func rotateInsets( _ _arg0: java_awt.Insets?, _ _arg1: java_awt.Insets?, _ _arg2: Int ) {
        rotateInsets( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// protected static void com.apple.laf.AquaTabbedPaneUI.transposeRect(java.awt.Rectangle)

    private static var transposeRect_MethodID_6: jmethodID?

    open class func transposeRect( arg0: java_awt.Rectangle? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "com/apple/laf/AquaTabbedPaneUI", classCache: &AquaTabbedPaneUIJNIClass, methodName: "transposeRect", methodSig: "(Ljava/awt/Rectangle;)V", methodCache: &transposeRect_MethodID_6, args: &__args, locals: &__locals )
    }

    open class func transposeRect( _ _arg0: java_awt.Rectangle? ) {
        transposeRect( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaTabbedPaneUI.assureRectsCreated(int)

    private static var assureRectsCreated_MethodID_7: jmethodID?

    override open func assureRectsCreated( arg0: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "assureRectsCreated", methodSig: "(I)V", methodCache: &AquaTabbedPaneUI.assureRectsCreated_MethodID_7, args: &__args, locals: &__locals )
    }

    override open func assureRectsCreated( _ _arg0: Int ) {
        assureRectsCreated( arg0: _arg0 )
    }

    /// protected int com.apple.laf.AquaTabbedPaneUI.calculateTabHeight(int,int,int)

    private static var calculateTabHeight_MethodID_8: jmethodID?

    override open func calculateTabHeight( arg0: Int, arg1: Int, arg2: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = jvalue( i: jint(arg2) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "calculateTabHeight", methodSig: "(III)I", methodCache: &AquaTabbedPaneUI.calculateTabHeight_MethodID_8, args: &__args, locals: &__locals )
        return Int(__return)
    }

    override open func calculateTabHeight( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int ) -> Int {
        return calculateTabHeight( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// protected javax.swing.event.ChangeListener com.apple.laf.AquaTabbedPaneUI.createChangeListener()

    private static var createChangeListener_MethodID_9: jmethodID?

    override open func createChangeListener() -> javax_swing.ChangeListener! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createChangeListener", methodSig: "()Ljavax/swing/event/ChangeListener;", methodCache: &AquaTabbedPaneUI.createChangeListener_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.ChangeListenerForward( javaObject: __return ) : nil
    }


    /// protected java.awt.event.FocusListener com.apple.laf.AquaTabbedPaneUI.createFocusListener()

    private static var createFocusListener_MethodID_10: jmethodID?

    override open func createFocusListener() -> java_awt.FocusListener! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createFocusListener", methodSig: "()Ljava/awt/event/FocusListener;", methodCache: &AquaTabbedPaneUI.createFocusListener_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.FocusListenerForward( javaObject: __return ) : nil
    }


    /// protected java.awt.LayoutManager com.apple.laf.AquaTabbedPaneUI.createLayoutManager()

    private static var createLayoutManager_MethodID_11: jmethodID?

    override open func createLayoutManager() -> java_awt.LayoutManager! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createLayoutManager", methodSig: "()Ljava/awt/LayoutManager;", methodCache: &AquaTabbedPaneUI.createLayoutManager_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.LayoutManagerForward( javaObject: __return ) : nil
    }


    /// protected java.awt.event.MouseListener com.apple.laf.AquaTabbedPaneUI.createMouseListener()

    private static var createMouseListener_MethodID_12: jmethodID?

    override open func createMouseListener() -> java_awt.MouseListener! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createMouseListener", methodSig: "()Ljava/awt/event/MouseListener;", methodCache: &AquaTabbedPaneUI.createMouseListener_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.MouseListenerForward( javaObject: __return ) : nil
    }


    /// protected java.beans.PropertyChangeListener com.apple.laf.AquaTabbedPaneUI.createPropertyChangeListener()

    private static var createPropertyChangeListener_MethodID_13: jmethodID?

    override open func createPropertyChangeListener() -> /* interface java.beans.PropertyChangeListener */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createPropertyChangeListener", methodSig: "()Ljava/beans/PropertyChangeListener;", methodCache: &AquaTabbedPaneUI.createPropertyChangeListener_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface java.beans.PropertyChangeListener */ UnavailableProtocolForward( javaObject: __return ) : nil
    }


    /// protected void com.apple.laf.AquaTabbedPaneUI.fillTabWithBackground(java.awt.Graphics,java.awt.Rectangle,int,boolean,boolean,java.awt.Color)

    private static var fillTabWithBackground_MethodID_14: jmethodID?

    open func fillTabWithBackground( arg0: java_awt.Graphics?, arg1: java_awt.Rectangle?, arg2: Int, arg3: Bool, arg4: Bool, arg5: java_awt.Color? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = jvalue( i: jint(arg2) )
        __args[3] = jvalue( z: jboolean(arg3 ? JNI_TRUE : JNI_FALSE) )
        __args[4] = jvalue( z: jboolean(arg4 ? JNI_TRUE : JNI_FALSE) )
        __args[5] = JNIType.toJava( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "fillTabWithBackground", methodSig: "(Ljava/awt/Graphics;Ljava/awt/Rectangle;IZZLjava/awt/Color;)V", methodCache: &AquaTabbedPaneUI.fillTabWithBackground_MethodID_14, args: &__args, locals: &__locals )
    }

    open func fillTabWithBackground( _ _arg0: java_awt.Graphics?, _ _arg1: java_awt.Rectangle?, _ _arg2: Int, _ _arg3: Bool, _ _arg4: Bool, _ _arg5: java_awt.Color? ) {
        fillTabWithBackground( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// protected java.awt.Insets com.apple.laf.AquaTabbedPaneUI.getContentBorderInsets(int)

    private static var getContentBorderInsets_MethodID_15: jmethodID?

    override open func getContentBorderInsets( arg0: Int ) -> java_awt.Insets! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getContentBorderInsets", methodSig: "(I)Ljava/awt/Insets;", methodCache: &AquaTabbedPaneUI.getContentBorderInsets_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Insets( javaObject: __return ) : nil
    }

    override open func getContentBorderInsets( _ _arg0: Int ) -> java_awt.Insets! {
        return getContentBorderInsets( arg0: _arg0 )
    }

    /// protected java.awt.Insets com.apple.laf.AquaTabbedPaneUI.getContentDrawingInsets(int)

    private static var getContentDrawingInsets_MethodID_16: jmethodID?

    open func getContentDrawingInsets( arg0: Int ) -> java_awt.Insets! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getContentDrawingInsets", methodSig: "(I)Ljava/awt/Insets;", methodCache: &AquaTabbedPaneUI.getContentDrawingInsets_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Insets( javaObject: __return ) : nil
    }

    open func getContentDrawingInsets( _ _arg0: Int ) -> java_awt.Insets! {
        return getContentDrawingInsets( arg0: _arg0 )
    }

    /// protected apple.laf.JRSUIConstants$Direction com.apple.laf.AquaTabbedPaneUI.getDirection()

    private static var getDirection_MethodID_17: jmethodID?

    open func getDirection() -> /* class apple.laf.JRSUIConstants$Direction */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDirection", methodSig: "()Lapple/laf/JRSUIConstants$Direction;", methodCache: &AquaTabbedPaneUI.getDirection_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class apple.laf.JRSUIConstants$Direction */ UnavailableObject( javaObject: __return ) : nil
    }


    /// protected javax.swing.Icon com.apple.laf.AquaTabbedPaneUI.getIconForScrollTab(int,int,boolean)

    private static var getIconForScrollTab_MethodID_18: jmethodID?

    open func getIconForScrollTab( arg0: Int, arg1: Int, arg2: Bool ) -> javax_swing.Icon! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = jvalue( z: jboolean(arg2 ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getIconForScrollTab", methodSig: "(IIZ)Ljavax/swing/Icon;", methodCache: &AquaTabbedPaneUI.getIconForScrollTab_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.IconForward( javaObject: __return ) : nil
    }

    open func getIconForScrollTab( _ _arg0: Int, _ _arg1: Int, _ _arg2: Bool ) -> javax_swing.Icon! {
        return getIconForScrollTab( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// protected javax.swing.Icon com.apple.laf.AquaTabbedPaneUI.getIconForTab(int)

    private static var getIconForTab_MethodID_19: jmethodID?

    override open func getIconForTab( arg0: Int ) -> javax_swing.Icon! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getIconForTab", methodSig: "(I)Ljavax/swing/Icon;", methodCache: &AquaTabbedPaneUI.getIconForTab_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.IconForward( javaObject: __return ) : nil
    }

    override open func getIconForTab( _ _arg0: Int ) -> javax_swing.Icon! {
        return getIconForTab( arg0: _arg0 )
    }

    /// protected apple.laf.JRSUIConstants$SegmentLeadingSeparator com.apple.laf.AquaTabbedPaneUI.getSegmentLeadingSeparator(int,int,boolean)

    private static var getSegmentLeadingSeparator_MethodID_20: jmethodID?

    open func getSegmentLeadingSeparator( arg0: Int, arg1: Int, arg2: Bool ) -> /* class apple.laf.JRSUIConstants$SegmentLeadingSeparator */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = jvalue( z: jboolean(arg2 ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSegmentLeadingSeparator", methodSig: "(IIZ)Lapple/laf/JRSUIConstants$SegmentLeadingSeparator;", methodCache: &AquaTabbedPaneUI.getSegmentLeadingSeparator_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class apple.laf.JRSUIConstants$SegmentLeadingSeparator */ UnavailableObject( javaObject: __return ) : nil
    }

    open func getSegmentLeadingSeparator( _ _arg0: Int, _ _arg1: Int, _ _arg2: Bool ) -> /* class apple.laf.JRSUIConstants$SegmentLeadingSeparator */ UnavailableObject! {
        return getSegmentLeadingSeparator( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// protected apple.laf.JRSUIConstants$SegmentTrailingSeparator com.apple.laf.AquaTabbedPaneUI.getSegmentTrailingSeparator(int,int,boolean)

    private static var getSegmentTrailingSeparator_MethodID_21: jmethodID?

    open func getSegmentTrailingSeparator( arg0: Int, arg1: Int, arg2: Bool ) -> /* class apple.laf.JRSUIConstants$SegmentTrailingSeparator */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = jvalue( z: jboolean(arg2 ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSegmentTrailingSeparator", methodSig: "(IIZ)Lapple/laf/JRSUIConstants$SegmentTrailingSeparator;", methodCache: &AquaTabbedPaneUI.getSegmentTrailingSeparator_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class apple.laf.JRSUIConstants$SegmentTrailingSeparator */ UnavailableObject( javaObject: __return ) : nil
    }

    open func getSegmentTrailingSeparator( _ _arg0: Int, _ _arg1: Int, _ _arg2: Bool ) -> /* class apple.laf.JRSUIConstants$SegmentTrailingSeparator */ UnavailableObject! {
        return getSegmentTrailingSeparator( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// protected apple.laf.JRSUIConstants$State com.apple.laf.AquaTabbedPaneUI.getState(int,boolean,boolean)

    private static var getState_MethodID_22: jmethodID?

    open func getState( arg0: Int, arg1: Bool, arg2: Bool ) -> /* class apple.laf.JRSUIConstants$State */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( z: jboolean(arg1 ? JNI_TRUE : JNI_FALSE) )
        __args[2] = jvalue( z: jboolean(arg2 ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getState", methodSig: "(IZZ)Lapple/laf/JRSUIConstants$State;", methodCache: &AquaTabbedPaneUI.getState_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class apple.laf.JRSUIConstants$State */ UnavailableObject( javaObject: __return ) : nil
    }

    open func getState( _ _arg0: Int, _ _arg1: Bool, _ _arg2: Bool ) -> /* class apple.laf.JRSUIConstants$State */ UnavailableObject! {
        return getState( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.awt.Rectangle com.apple.laf.AquaTabbedPaneUI.getTabBounds(javax.swing.JTabbedPane,int)

    // Skipping method: false true false false false 

    /// protected java.awt.Insets com.apple.laf.AquaTabbedPaneUI.getTabInsets(int,int)

    private static var getTabInsets_MethodID_23: jmethodID?

    override open func getTabInsets( arg0: Int, arg1: Int ) -> java_awt.Insets! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTabInsets", methodSig: "(II)Ljava/awt/Insets;", methodCache: &AquaTabbedPaneUI.getTabInsets_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Insets( javaObject: __return ) : nil
    }

    override open func getTabInsets( _ _arg0: Int, _ _arg1: Int ) -> java_awt.Insets! {
        return getTabInsets( arg0: _arg0, arg1: _arg1 )
    }

    /// protected int com.apple.laf.AquaTabbedPaneUI.getTabLabelShiftX(int,int,boolean)

    private static var getTabLabelShiftX_MethodID_24: jmethodID?

    override open func getTabLabelShiftX( arg0: Int, arg1: Int, arg2: Bool ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = jvalue( z: jboolean(arg2 ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getTabLabelShiftX", methodSig: "(IIZ)I", methodCache: &AquaTabbedPaneUI.getTabLabelShiftX_MethodID_24, args: &__args, locals: &__locals )
        return Int(__return)
    }

    override open func getTabLabelShiftX( _ _arg0: Int, _ _arg1: Int, _ _arg2: Bool ) -> Int {
        return getTabLabelShiftX( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// protected int com.apple.laf.AquaTabbedPaneUI.getTabLabelShiftY(int,int,boolean)

    private static var getTabLabelShiftY_MethodID_25: jmethodID?

    override open func getTabLabelShiftY( arg0: Int, arg1: Int, arg2: Bool ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = jvalue( z: jboolean(arg2 ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getTabLabelShiftY", methodSig: "(IIZ)I", methodCache: &AquaTabbedPaneUI.getTabLabelShiftY_MethodID_25, args: &__args, locals: &__locals )
        return Int(__return)
    }

    override open func getTabLabelShiftY( _ _arg0: Int, _ _arg1: Int, _ _arg2: Bool ) -> Int {
        return getTabLabelShiftY( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// protected void com.apple.laf.AquaTabbedPaneUI.installDefaults()

    private static var installDefaults_MethodID_26: jmethodID?

    override open func installDefaults() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installDefaults", methodSig: "()V", methodCache: &AquaTabbedPaneUI.installDefaults_MethodID_26, args: &__args, locals: &__locals )
    }


    /// protected void com.apple.laf.AquaTabbedPaneUI.installListeners()

    private static var installListeners_MethodID_27: jmethodID?

    override open func installListeners() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installListeners", methodSig: "()V", methodCache: &AquaTabbedPaneUI.installListeners_MethodID_27, args: &__args, locals: &__locals )
    }


    /// protected boolean com.apple.laf.AquaTabbedPaneUI.isTabBeforeSelectedTab(int,int,boolean)

    private static var isTabBeforeSelectedTab_MethodID_28: jmethodID?

    open func isTabBeforeSelectedTab( arg0: Int, arg1: Int, arg2: Bool ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = jvalue( z: jboolean(arg2 ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isTabBeforeSelectedTab", methodSig: "(IIZ)Z", methodCache: &AquaTabbedPaneUI.isTabBeforeSelectedTab_MethodID_28, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func isTabBeforeSelectedTab( _ _arg0: Int, _ _arg1: Int, _ _arg2: Bool ) -> Bool {
        return isTabBeforeSelectedTab( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public boolean com.apple.laf.AquaTabbedPaneUI.isTabVisible(int)

    private static var isTabVisible_MethodID_29: jmethodID?

    open func isTabVisible( arg0: Int ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isTabVisible", methodSig: "(I)Z", methodCache: &AquaTabbedPaneUI.isTabVisible_MethodID_29, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func isTabVisible( _ _arg0: Int ) -> Bool {
        return isTabVisible( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaTabbedPaneUI.paint(java.awt.Graphics,javax.swing.JComponent)

    // Skipping method: false true false false false 

    /// protected void com.apple.laf.AquaTabbedPaneUI.paintAllTabs(java.awt.Graphics,java.awt.Rectangle,int,int,boolean,boolean,boolean)

    private static var paintAllTabs_MethodID_30: jmethodID?

    open func paintAllTabs( arg0: java_awt.Graphics?, arg1: java_awt.Rectangle?, arg2: Int, arg3: Int, arg4: Bool, arg5: Bool, arg6: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = jvalue( i: jint(arg2) )
        __args[3] = jvalue( i: jint(arg3) )
        __args[4] = jvalue( z: jboolean(arg4 ? JNI_TRUE : JNI_FALSE) )
        __args[5] = jvalue( z: jboolean(arg5 ? JNI_TRUE : JNI_FALSE) )
        __args[6] = jvalue( z: jboolean(arg6 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintAllTabs", methodSig: "(Ljava/awt/Graphics;Ljava/awt/Rectangle;IIZZZ)V", methodCache: &AquaTabbedPaneUI.paintAllTabs_MethodID_30, args: &__args, locals: &__locals )
    }

    open func paintAllTabs( _ _arg0: java_awt.Graphics?, _ _arg1: java_awt.Rectangle?, _ _arg2: Int, _ _arg3: Int, _ _arg4: Bool, _ _arg5: Bool, _ _arg6: Bool ) {
        paintAllTabs( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// protected void com.apple.laf.AquaTabbedPaneUI.paintCUITab(java.awt.Graphics,int,java.awt.Rectangle,boolean,boolean,boolean,int)

    private static var paintCUITab_MethodID_31: jmethodID?

    open func paintCUITab( arg0: java_awt.Graphics?, arg1: Int, arg2: java_awt.Rectangle?, arg3: Bool, arg4: Bool, arg5: Bool, arg6: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        __args[3] = jvalue( z: jboolean(arg3 ? JNI_TRUE : JNI_FALSE) )
        __args[4] = jvalue( z: jboolean(arg4 ? JNI_TRUE : JNI_FALSE) )
        __args[5] = jvalue( z: jboolean(arg5 ? JNI_TRUE : JNI_FALSE) )
        __args[6] = jvalue( i: jint(arg6) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintCUITab", methodSig: "(Ljava/awt/Graphics;ILjava/awt/Rectangle;ZZZI)V", methodCache: &AquaTabbedPaneUI.paintCUITab_MethodID_31, args: &__args, locals: &__locals )
    }

    open func paintCUITab( _ _arg0: java_awt.Graphics?, _ _arg1: Int, _ _arg2: java_awt.Rectangle?, _ _arg3: Bool, _ _arg4: Bool, _ _arg5: Bool, _ _arg6: Int ) {
        paintCUITab( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// protected void com.apple.laf.AquaTabbedPaneUI.paintContentBorder(java.awt.Graphics,int,int)

    private static var paintContentBorder_MethodID_32: jmethodID?

    override open func paintContentBorder( arg0: java_awt.Graphics?, arg1: Int, arg2: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = jvalue( i: jint(arg2) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintContentBorder", methodSig: "(Ljava/awt/Graphics;II)V", methodCache: &AquaTabbedPaneUI.paintContentBorder_MethodID_32, args: &__args, locals: &__locals )
    }

    override open func paintContentBorder( _ _arg0: java_awt.Graphics?, _ _arg1: Int, _ _arg2: Int ) {
        paintContentBorder( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// protected void com.apple.laf.AquaTabbedPaneUI.paintContents(java.awt.Graphics,int,int,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,boolean)

    private static var paintContents_MethodID_33: jmethodID?

    open func paintContents( arg0: java_awt.Graphics?, arg1: Int, arg2: Int, arg3: java_awt.Rectangle?, arg4: java_awt.Rectangle?, arg5: java_awt.Rectangle?, arg6: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = jvalue( i: jint(arg2) )
        __args[3] = JNIType.toJava( value: arg3, locals: &__locals )
        __args[4] = JNIType.toJava( value: arg4, locals: &__locals )
        __args[5] = JNIType.toJava( value: arg5, locals: &__locals )
        __args[6] = jvalue( z: jboolean(arg6 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintContents", methodSig: "(Ljava/awt/Graphics;IILjava/awt/Rectangle;Ljava/awt/Rectangle;Ljava/awt/Rectangle;Z)V", methodCache: &AquaTabbedPaneUI.paintContents_MethodID_33, args: &__args, locals: &__locals )
    }

    open func paintContents( _ _arg0: java_awt.Graphics?, _ _arg1: Int, _ _arg2: Int, _ _arg3: java_awt.Rectangle?, _ _arg4: java_awt.Rectangle?, _ _arg5: java_awt.Rectangle?, _ _arg6: Bool ) {
        paintContents( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// protected void com.apple.laf.AquaTabbedPaneUI.paintScrollingTabs(java.awt.Graphics,java.awt.Rectangle,int,int,boolean,boolean,boolean)

    private static var paintScrollingTabs_MethodID_34: jmethodID?

    open func paintScrollingTabs( arg0: java_awt.Graphics?, arg1: java_awt.Rectangle?, arg2: Int, arg3: Int, arg4: Bool, arg5: Bool, arg6: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = jvalue( i: jint(arg2) )
        __args[3] = jvalue( i: jint(arg3) )
        __args[4] = jvalue( z: jboolean(arg4 ? JNI_TRUE : JNI_FALSE) )
        __args[5] = jvalue( z: jboolean(arg5 ? JNI_TRUE : JNI_FALSE) )
        __args[6] = jvalue( z: jboolean(arg6 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintScrollingTabs", methodSig: "(Ljava/awt/Graphics;Ljava/awt/Rectangle;IIZZZ)V", methodCache: &AquaTabbedPaneUI.paintScrollingTabs_MethodID_34, args: &__args, locals: &__locals )
    }

    open func paintScrollingTabs( _ _arg0: java_awt.Graphics?, _ _arg1: java_awt.Rectangle?, _ _arg2: Int, _ _arg3: Int, _ _arg4: Bool, _ _arg5: Bool, _ _arg6: Bool ) {
        paintScrollingTabs( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// protected void com.apple.laf.AquaTabbedPaneUI.paintTabNormal(java.awt.Graphics,int,int,boolean,boolean,boolean)

    private static var paintTabNormal_MethodID_35: jmethodID?

    open func paintTabNormal( arg0: java_awt.Graphics?, arg1: Int, arg2: Int, arg3: Bool, arg4: Bool, arg5: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = jvalue( i: jint(arg2) )
        __args[3] = jvalue( z: jboolean(arg3 ? JNI_TRUE : JNI_FALSE) )
        __args[4] = jvalue( z: jboolean(arg4 ? JNI_TRUE : JNI_FALSE) )
        __args[5] = jvalue( z: jboolean(arg5 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintTabNormal", methodSig: "(Ljava/awt/Graphics;IIZZZ)V", methodCache: &AquaTabbedPaneUI.paintTabNormal_MethodID_35, args: &__args, locals: &__locals )
    }

    open func paintTabNormal( _ _arg0: java_awt.Graphics?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Bool, _ _arg4: Bool, _ _arg5: Bool ) {
        paintTabNormal( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// protected void com.apple.laf.AquaTabbedPaneUI.paintTabNormalFromRect(java.awt.Graphics,int,java.awt.Rectangle,int,java.awt.Rectangle,java.awt.Rectangle,boolean,boolean,boolean)

    private static var paintTabNormalFromRect_MethodID_36: jmethodID?

    open func paintTabNormalFromRect( arg0: java_awt.Graphics?, arg1: Int, arg2: java_awt.Rectangle?, arg3: Int, arg4: java_awt.Rectangle?, arg5: java_awt.Rectangle?, arg6: Bool, arg7: Bool, arg8: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 9 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        __args[3] = jvalue( i: jint(arg3) )
        __args[4] = JNIType.toJava( value: arg4, locals: &__locals )
        __args[5] = JNIType.toJava( value: arg5, locals: &__locals )
        __args[6] = jvalue( z: jboolean(arg6 ? JNI_TRUE : JNI_FALSE) )
        __args[7] = jvalue( z: jboolean(arg7 ? JNI_TRUE : JNI_FALSE) )
        __args[8] = jvalue( z: jboolean(arg8 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintTabNormalFromRect", methodSig: "(Ljava/awt/Graphics;ILjava/awt/Rectangle;ILjava/awt/Rectangle;Ljava/awt/Rectangle;ZZZ)V", methodCache: &AquaTabbedPaneUI.paintTabNormalFromRect_MethodID_36, args: &__args, locals: &__locals )
    }

    open func paintTabNormalFromRect( _ _arg0: java_awt.Graphics?, _ _arg1: Int, _ _arg2: java_awt.Rectangle?, _ _arg3: Int, _ _arg4: java_awt.Rectangle?, _ _arg5: java_awt.Rectangle?, _ _arg6: Bool, _ _arg7: Bool, _ _arg8: Bool ) {
        paintTabNormalFromRect( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6, arg7: _arg7, arg8: _arg8 )
    }

    /// protected void com.apple.laf.AquaTabbedPaneUI.paintTitle(java.awt.Graphics2D,java.awt.Font,java.awt.FontMetrics,java.awt.Rectangle,int,java.lang.String)

    private static var paintTitle_MethodID_37: jmethodID?

    open func paintTitle( arg0: java_awt.Graphics2D?, arg1: java_awt.Font?, arg2: java_awt.FontMetrics?, arg3: java_awt.Rectangle?, arg4: Int, arg5: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        __args[3] = JNIType.toJava( value: arg3, locals: &__locals )
        __args[4] = jvalue( i: jint(arg4) )
        __args[5] = JNIType.toJava( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintTitle", methodSig: "(Ljava/awt/Graphics2D;Ljava/awt/Font;Ljava/awt/FontMetrics;Ljava/awt/Rectangle;ILjava/lang/String;)V", methodCache: &AquaTabbedPaneUI.paintTitle_MethodID_37, args: &__args, locals: &__locals )
    }

    open func paintTitle( _ _arg0: java_awt.Graphics2D?, _ _arg1: java_awt.Font?, _ _arg2: java_awt.FontMetrics?, _ _arg3: java_awt.Rectangle?, _ _arg4: Int, _ _arg5: String? ) {
        paintTitle( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// protected void com.apple.laf.AquaTabbedPaneUI.repaintContentBorderEdge()

    private static var repaintContentBorderEdge_MethodID_38: jmethodID?

    open func repaintContentBorderEdge() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "repaintContentBorderEdge", methodSig: "()V", methodCache: &AquaTabbedPaneUI.repaintContentBorderEdge_MethodID_38, args: &__args, locals: &__locals )
    }


    /// protected void com.apple.laf.AquaTabbedPaneUI.rotateGraphics(java.awt.Graphics2D,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,int)

    private static var rotateGraphics_MethodID_39: jmethodID?

    open func rotateGraphics( arg0: java_awt.Graphics2D?, arg1: java_awt.Rectangle?, arg2: java_awt.Rectangle?, arg3: java_awt.Rectangle?, arg4: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        __args[3] = JNIType.toJava( value: arg3, locals: &__locals )
        __args[4] = jvalue( i: jint(arg4) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "rotateGraphics", methodSig: "(Ljava/awt/Graphics2D;Ljava/awt/Rectangle;Ljava/awt/Rectangle;Ljava/awt/Rectangle;I)V", methodCache: &AquaTabbedPaneUI.rotateGraphics_MethodID_39, args: &__args, locals: &__locals )
    }

    open func rotateGraphics( _ _arg0: java_awt.Graphics2D?, _ _arg1: java_awt.Rectangle?, _ _arg2: java_awt.Rectangle?, _ _arg3: java_awt.Rectangle?, _ _arg4: Int ) {
        rotateGraphics( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// protected boolean com.apple.laf.AquaTabbedPaneUI.shouldRepaintSelectedTabOnMouseDown()

    private static var shouldRepaintSelectedTabOnMouseDown_MethodID_40: jmethodID?

    open func shouldRepaintSelectedTabOnMouseDown() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "shouldRepaintSelectedTabOnMouseDown", methodSig: "()Z", methodCache: &AquaTabbedPaneUI.shouldRepaintSelectedTabOnMouseDown_MethodID_40, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// protected boolean com.apple.laf.AquaTabbedPaneUI.shouldRotateTabRuns(int)

    private static var shouldRotateTabRuns_MethodID_41: jmethodID?

    override open func shouldRotateTabRuns( arg0: Int ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "shouldRotateTabRuns", methodSig: "(I)Z", methodCache: &AquaTabbedPaneUI.shouldRotateTabRuns_MethodID_41, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func shouldRotateTabRuns( _ _arg0: Int ) -> Bool {
        return shouldRotateTabRuns( arg0: _arg0 )
    }

    /// public int com.apple.laf.AquaTabbedPaneUI.tabForCoordinate(javax.swing.JTabbedPane,int,int)

    // Skipping method: false true false false false 

    /// protected void com.apple.laf.AquaTabbedPaneUI.uninstallDefaults()

    private static var uninstallDefaults_MethodID_42: jmethodID?

    override open func uninstallDefaults() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallDefaults", methodSig: "()V", methodCache: &AquaTabbedPaneUI.uninstallDefaults_MethodID_42, args: &__args, locals: &__locals )
    }


}

