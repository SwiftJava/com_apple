
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class com.apple.laf.ClientPropertyApplicator$Property ///

open class ClientPropertyApplicator_Property: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ClientPropertyApplicator_PropertyJNIClass: jclass?

    /// final java.lang.String com.apple.laf.ClientPropertyApplicator$Property.name

    // Skipping field: true false false false false false 

    /// public com.apple.laf.ClientPropertyApplicator$Property(java.lang.String)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/ClientPropertyApplicator$Property", classCache: &ClientPropertyApplicator_Property.ClientPropertyApplicator_PropertyJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &ClientPropertyApplicator_Property.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String? ) {
        self.init( arg0: _arg0 )
    }

    /// public abstract void com.apple.laf.ClientPropertyApplicator$Property.applyProperty(java.lang.Object,java.lang.Object)

    private static var applyProperty_MethodID_2: jmethodID?

    open func applyProperty( arg0: java_swift.JavaObject?, arg1: java_swift.JavaObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "applyProperty", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)V", methodCache: &ClientPropertyApplicator_Property.applyProperty_MethodID_2, args: &__args, locals: &__locals )
    }

    open func applyProperty( _ _arg0: java_swift.JavaObject?, _ _arg1: java_swift.JavaObject? ) {
        applyProperty( arg0: _arg0, arg1: _arg1 )
    }

}

