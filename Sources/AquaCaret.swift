
import java_swift
import javax_swing
import java_awt
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class com.apple.laf.AquaCaret ///

open class AquaCaret: javax_swing.DefaultCaret, javax_swing.UIResource {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaCaretJNIClass: jclass?

    /// final javax.swing.text.JTextComponent com.apple.laf.AquaCaret.c

    // Skipping field: true false false false false false 

    /// boolean com.apple.laf.AquaCaret.fPainting

    // Skipping field: true false false false false false 

    /// final boolean com.apple.laf.AquaCaret.isMultiLineEditor

    // Skipping field: true false false false false false 

    /// boolean com.apple.laf.AquaCaret.mFocused

    // Skipping field: true false false false false false 

    /// private boolean com.apple.laf.AquaCaret.shouldSelectAllOnFocus

    /// public static final int javax.swing.text.DefaultCaret.ALWAYS_UPDATE

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.text.DefaultCaret.NEVER_UPDATE

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.text.DefaultCaret.UPDATE_WHEN_ON_EDT

    // Skipping field: false true false false false false 

    /// private static transient javax.swing.Action javax.swing.text.DefaultCaret.selectLine

    /// private static transient javax.swing.Action javax.swing.text.DefaultCaret.selectWord

    /// boolean javax.swing.text.DefaultCaret.active

    // Skipping field: true false false false false false 

    /// private float javax.swing.text.DefaultCaret.aspectRatio

    /// private int javax.swing.text.DefaultCaret.caretWidth

    /// protected transient javax.swing.event.ChangeEvent javax.swing.text.DefaultCaret.changeEvent

    private static var changeEvent_FieldID: jfieldID?

    override open var changeEvent: javax_swing.ChangeEvent! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "changeEvent", fieldType: "Ljavax/swing/event/ChangeEvent;", fieldCache: &AquaCaret.changeEvent_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.ChangeEvent( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "changeEvent", fieldType: "Ljavax/swing/event/ChangeEvent;", fieldCache: &AquaCaret.changeEvent_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// javax.swing.text.JTextComponent javax.swing.text.DefaultCaret.component

    // Skipping field: true false false false false false 

    /// int javax.swing.text.DefaultCaret.dot

    // Skipping field: true false false false false false 

    /// transient javax.swing.text.Position$Bias javax.swing.text.DefaultCaret.dotBias

    // Skipping field: true false false false false false 

    /// boolean javax.swing.text.DefaultCaret.dotLTR

    // Skipping field: true false false false false false 

    /// private transient javax.swing.text.NavigationFilter$FilterBypass javax.swing.text.DefaultCaret.filterBypass

    /// private transient int[] javax.swing.text.DefaultCaret.flagXPoints

    /// private transient int[] javax.swing.text.DefaultCaret.flagYPoints

    /// javax.swing.Timer javax.swing.text.DefaultCaret.flasher

    // Skipping field: true false false false false false 

    /// private boolean javax.swing.text.DefaultCaret.forceCaretPositionChange

    /// transient javax.swing.text.DefaultCaret$Handler javax.swing.text.DefaultCaret.handler

    // Skipping field: true false false false false false 

    /// protected javax.swing.event.EventListenerList javax.swing.text.DefaultCaret.listenerList

    private static var listenerList_FieldID: jfieldID?

    override open var listenerList: javax_swing.EventListenerList! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "listenerList", fieldType: "Ljavax/swing/event/EventListenerList;", fieldCache: &AquaCaret.listenerList_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.EventListenerList( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "listenerList", fieldType: "Ljavax/swing/event/EventListenerList;", fieldCache: &AquaCaret.listenerList_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// java.awt.Point javax.swing.text.DefaultCaret.magicCaretPosition

    // Skipping field: true false false false false false 

    /// int javax.swing.text.DefaultCaret.mark

    // Skipping field: true false false false false false 

    /// transient javax.swing.text.Position$Bias javax.swing.text.DefaultCaret.markBias

    // Skipping field: true false false false false false 

    /// boolean javax.swing.text.DefaultCaret.markLTR

    // Skipping field: true false false false false false 

    /// private boolean javax.swing.text.DefaultCaret.ownsSelection

    /// private transient java.awt.event.MouseEvent javax.swing.text.DefaultCaret.selectedWordEvent

    /// java.lang.Object javax.swing.text.DefaultCaret.selectionTag

    // Skipping field: true false false false false false 

    /// boolean javax.swing.text.DefaultCaret.selectionVisible

    // Skipping field: true false false false false false 

    /// private transient boolean javax.swing.text.DefaultCaret.shouldHandleRelease

    /// int javax.swing.text.DefaultCaret.updatePolicy

    // Skipping field: true false false false false false 

    /// boolean javax.swing.text.DefaultCaret.visible

    // Skipping field: true false false false false false 

    /// private static final long java.awt.Rectangle.serialVersionUID

    /// public int java.awt.Rectangle.height

    private static var height_FieldID: jfieldID?

    override open var height: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "height", fieldType: "I", fieldCache: &AquaCaret.height_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "height", fieldType: "I", fieldCache: &AquaCaret.height_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// public int java.awt.Rectangle.width

    private static var width_FieldID: jfieldID?

    override open var width: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "width", fieldType: "I", fieldCache: &AquaCaret.width_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "width", fieldType: "I", fieldCache: &AquaCaret.width_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// public int java.awt.Rectangle.x

    private static var x_FieldID: jfieldID?

    override open var x: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "x", fieldType: "I", fieldCache: &AquaCaret.x_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "x", fieldType: "I", fieldCache: &AquaCaret.x_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// public int java.awt.Rectangle.y

    private static var y_FieldID: jfieldID?

    override open var y: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "y", fieldType: "I", fieldCache: &AquaCaret.y_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "y", fieldType: "I", fieldCache: &AquaCaret.y_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// public static final int java.awt.geom.Rectangle2D.OUT_BOTTOM

    // Skipping field: false true false false false false 

    /// public static final int java.awt.geom.Rectangle2D.OUT_LEFT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.geom.Rectangle2D.OUT_RIGHT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.geom.Rectangle2D.OUT_TOP

    // Skipping field: false true false false false false 

    /// public com.apple.laf.AquaCaret(java.awt.Window,javax.swing.text.JTextComponent)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: java_awt.Window?, arg1: javax_swing.JTextComponent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaCaret", classCache: &AquaCaret.AquaCaretJNIClass, methodSig: "(Ljava/awt/Window;Ljavax/swing/text/JTextComponent;)V", methodCache: &AquaCaret.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: java_awt.Window?, _ _arg1: javax_swing.JTextComponent? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// protected synchronized void com.apple.laf.AquaCaret.damage(java.awt.Rectangle)

    private static var damage_MethodID_2: jmethodID?

    open func damage( arg0: java_awt.Rectangle? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "damage", methodSig: "(Ljava/awt/Rectangle;)V", methodCache: &AquaCaret.damage_MethodID_2, args: &__args, locals: &__locals )
    }

    override open func damage( _ _arg0: java_awt.Rectangle? ) {
        damage( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaCaret.fireStateChanged()

    private static var fireStateChanged_MethodID_3: jmethodID?

    override open func fireStateChanged() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "fireStateChanged", methodSig: "()V", methodCache: &AquaCaret.fireStateChanged_MethodID_3, args: &__args, locals: &__locals )
    }


    /// public void com.apple.laf.AquaCaret.focusGained(java.awt.event.FocusEvent)

    private static var focusGained_MethodID_4: jmethodID?

    open func focusGained( arg0: java_awt.FocusEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "focusGained", methodSig: "(Ljava/awt/event/FocusEvent;)V", methodCache: &AquaCaret.focusGained_MethodID_4, args: &__args, locals: &__locals )
    }

    override open func focusGained( _ _arg0: java_awt.FocusEvent? ) {
        focusGained( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaCaret.focusLost(java.awt.event.FocusEvent)

    private static var focusLost_MethodID_5: jmethodID?

    open func focusLost( arg0: java_awt.FocusEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "focusLost", methodSig: "(Ljava/awt/event/FocusEvent;)V", methodCache: &AquaCaret.focusLost_MethodID_5, args: &__args, locals: &__locals )
    }

    override open func focusLost( _ _arg0: java_awt.FocusEvent? ) {
        focusLost( arg0: _arg0 )
    }

    /// protected javax.swing.text.Highlighter$HighlightPainter com.apple.laf.AquaCaret.getSelectionPainter()

    private static var getSelectionPainter_MethodID_6: jmethodID?

    override open func getSelectionPainter() -> javax_swing.Highlighter_HighlightPainter! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSelectionPainter", methodSig: "()Ljavax/swing/text/Highlighter$HighlightPainter;", methodCache: &AquaCaret.getSelectionPainter_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.Highlighter_HighlightPainterForward( javaObject: __return ) : nil
    }


    /// public void com.apple.laf.AquaCaret.mousePressed(java.awt.event.MouseEvent)

    private static var mousePressed_MethodID_7: jmethodID?

    open func mousePressed( arg0: java_awt.MouseEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "mousePressed", methodSig: "(Ljava/awt/event/MouseEvent;)V", methodCache: &AquaCaret.mousePressed_MethodID_7, args: &__args, locals: &__locals )
    }

    override open func mousePressed( _ _arg0: java_awt.MouseEvent? ) {
        mousePressed( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaCaret.paint(java.awt.Graphics)

    private static var paint_MethodID_8: jmethodID?

    open func paint( arg0: java_awt.Graphics? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paint", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &AquaCaret.paint_MethodID_8, args: &__args, locals: &__locals )
    }

    override open func paint( _ _arg0: java_awt.Graphics? ) {
        paint( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaCaret.propertyChange(java.beans.PropertyChangeEvent)

    private static var propertyChange_MethodID_9: jmethodID?

    open func propertyChange( evt: /* class java.beans.PropertyChangeEvent */ UnavailableObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: evt, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "propertyChange", methodSig: "(Ljava/beans/PropertyChangeEvent;)V", methodCache: &AquaCaret.propertyChange_MethodID_9, args: &__args, locals: &__locals )
    }

    open func propertyChange( _ _evt: /* class java.beans.PropertyChangeEvent */ UnavailableObject? ) {
        propertyChange( evt: _evt )
    }

    /// public void com.apple.laf.AquaCaret.setVisible(boolean)

    private static var setVisible_MethodID_10: jmethodID?

    open func setVisible( arg0: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(arg0 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setVisible", methodSig: "(Z)V", methodCache: &AquaCaret.setVisible_MethodID_10, args: &__args, locals: &__locals )
    }

    override open func setVisible( _ _arg0: Bool ) {
        setVisible( arg0: _arg0 )
    }

}

