
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class com.apple.eawt.FullScreenUtilities ///

open class FullScreenUtilities: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var FullScreenUtilitiesJNIClass: jclass?

    /// com.apple.eawt.FullScreenUtilities()

    // Skipping init: true false false 

    /// public static void com.apple.eawt.FullScreenUtilities.addFullScreenListenerTo(java.awt.Window,com.apple.eawt.FullScreenListener)

    private static var addFullScreenListenerTo_MethodID_1: jmethodID?

    open class func addFullScreenListenerTo( arg0: java_awt.Window?, arg1: FullScreenListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "com/apple/eawt/FullScreenUtilities", classCache: &FullScreenUtilitiesJNIClass, methodName: "addFullScreenListenerTo", methodSig: "(Ljava/awt/Window;Lcom/apple/eawt/FullScreenListener;)V", methodCache: &addFullScreenListenerTo_MethodID_1, args: &__args, locals: &__locals )
    }

    open class func addFullScreenListenerTo( _ _arg0: java_awt.Window?, _ _arg1: FullScreenListener? ) {
        addFullScreenListenerTo( arg0: _arg0, arg1: _arg1 )
    }

    /// public static void com.apple.eawt.FullScreenUtilities.removeFullScreenListenerFrom(java.awt.Window,com.apple.eawt.FullScreenListener)

    private static var removeFullScreenListenerFrom_MethodID_2: jmethodID?

    open class func removeFullScreenListenerFrom( arg0: java_awt.Window?, arg1: FullScreenListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "com/apple/eawt/FullScreenUtilities", classCache: &FullScreenUtilitiesJNIClass, methodName: "removeFullScreenListenerFrom", methodSig: "(Ljava/awt/Window;Lcom/apple/eawt/FullScreenListener;)V", methodCache: &removeFullScreenListenerFrom_MethodID_2, args: &__args, locals: &__locals )
    }

    open class func removeFullScreenListenerFrom( _ _arg0: java_awt.Window?, _ _arg1: FullScreenListener? ) {
        removeFullScreenListenerFrom( arg0: _arg0, arg1: _arg1 )
    }

    /// public static void com.apple.eawt.FullScreenUtilities.setWindowCanFullScreen(java.awt.Window,boolean)

    private static var setWindowCanFullScreen_MethodID_3: jmethodID?

    open class func setWindowCanFullScreen( arg0: java_awt.Window?, arg1: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = jvalue( z: jboolean(arg1 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallStaticVoidMethod( className: "com/apple/eawt/FullScreenUtilities", classCache: &FullScreenUtilitiesJNIClass, methodName: "setWindowCanFullScreen", methodSig: "(Ljava/awt/Window;Z)V", methodCache: &setWindowCanFullScreen_MethodID_3, args: &__args, locals: &__locals )
    }

    open class func setWindowCanFullScreen( _ _arg0: java_awt.Window?, _ _arg1: Bool ) {
        setWindowCanFullScreen( arg0: _arg0, arg1: _arg1 )
    }

}

