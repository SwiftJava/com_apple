
import java_swift
import javax_swing
import java_util
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class com.apple.laf.AquaTreeUI ///

open class AquaTreeUI: javax_swing.BasicTreeUI {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaTreeUIJNIClass: jclass?

    /// private static final int com.apple.laf.AquaTreeUI.HORIZ_LINE_STYLE

    /// private static final java.lang.String com.apple.laf.AquaTreeUI.HORIZ_STYLE_STRING

    /// private static final int com.apple.laf.AquaTreeUI.LEG_LINE_STYLE

    /// private static final java.lang.String com.apple.laf.AquaTreeUI.LEG_LINE_STYLE_STRING

    /// private static final java.lang.String com.apple.laf.AquaTreeUI.LINE_STYLE

    /// private static final int com.apple.laf.AquaTreeUI.NO_LINE_STYLE

    /// private static final java.lang.String com.apple.laf.AquaTreeUI.NO_STYLE_STRING

    /// protected int com.apple.laf.AquaTreeUI.fAnimationFrame

    private static var fAnimationFrame_FieldID: jfieldID?

    open var fAnimationFrame: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "fAnimationFrame", fieldType: "I", fieldCache: &AquaTreeUI.fAnimationFrame_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "fAnimationFrame", fieldType: "I", fieldCache: &AquaTreeUI.fAnimationFrame_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected boolean com.apple.laf.AquaTreeUI.fIsInBounds

    private static var fIsInBounds_FieldID: jfieldID?

    open var fIsInBounds: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "fIsInBounds", fieldType: "Z", fieldCache: &AquaTreeUI.fIsInBounds_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "fIsInBounds", fieldType: "Z", fieldCache: &AquaTreeUI.fIsInBounds_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected boolean com.apple.laf.AquaTreeUI.fIsPressed

    private static var fIsPressed_FieldID: jfieldID?

    open var fIsPressed: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "fIsPressed", fieldType: "Z", fieldCache: &AquaTreeUI.fIsPressed_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "fIsPressed", fieldType: "Z", fieldCache: &AquaTreeUI.fIsPressed_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected com.apple.laf.AquaTreeUI$TreeArrowMouseInputHandler com.apple.laf.AquaTreeUI.fMouseHandler

    private static var fMouseHandler_FieldID: jfieldID?

    open var fMouseHandler: /* class com.apple.laf.AquaTreeUI$TreeArrowMouseInputHandler */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "fMouseHandler", fieldType: "Lcom/apple/laf/AquaTreeUI$TreeArrowMouseInputHandler;", fieldCache: &AquaTreeUI.fMouseHandler_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class com.apple.laf.AquaTreeUI$TreeArrowMouseInputHandler */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "fMouseHandler", fieldType: "Lcom/apple/laf/AquaTreeUI$TreeArrowMouseInputHandler;", fieldCache: &AquaTreeUI.fMouseHandler_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.tree.TreePath com.apple.laf.AquaTreeUI.fTrackingPath

    private static var fTrackingPath_FieldID: jfieldID?

    open var fTrackingPath: javax_swing.TreePath! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "fTrackingPath", fieldType: "Ljavax/swing/tree/TreePath;", fieldCache: &AquaTreeUI.fTrackingPath_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.TreePath( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "fTrackingPath", fieldType: "Ljavax/swing/tree/TreePath;", fieldCache: &AquaTreeUI.fTrackingPath_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private int com.apple.laf.AquaTreeUI.lineStyle

    /// private final java.beans.PropertyChangeListener com.apple.laf.AquaTreeUI.lineStyleListener

    /// protected final com.apple.laf.AquaPainter com.apple.laf.AquaTreeUI.painter

    private static var painter_FieldID: jfieldID?

    open var painter: /* class com.apple.laf.AquaPainter */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "painter", fieldType: "Lcom/apple/laf/AquaPainter;", fieldCache: &AquaTreeUI.painter_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class com.apple.laf.AquaPainter */ UnavailableObject( javaObject: __value ) : nil
        }
    }

    /// private static final java.lang.StringBuilder javax.swing.plaf.basic.BasicTreeUI.BASELINE_COMPONENT_KEY

    /// private static final javax.swing.plaf.basic.BasicTreeUI$Actions javax.swing.plaf.basic.BasicTreeUI.SHARED_ACTION

    /// private static final javax.swing.TransferHandler javax.swing.plaf.basic.BasicTreeUI.defaultTransferHandler

    /// protected transient javax.swing.tree.TreeCellEditor javax.swing.plaf.basic.BasicTreeUI.cellEditor

    private static var cellEditor_FieldID: jfieldID?

    override open var cellEditor: javax_swing.TreeCellEditor! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "cellEditor", fieldType: "Ljavax/swing/tree/TreeCellEditor;", fieldCache: &AquaTreeUI.cellEditor_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.TreeCellEditorForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "cellEditor", fieldType: "Ljavax/swing/tree/TreeCellEditor;", fieldCache: &AquaTreeUI.cellEditor_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private javax.swing.event.CellEditorListener javax.swing.plaf.basic.BasicTreeUI.cellEditorListener

    /// protected transient javax.swing.Icon javax.swing.plaf.basic.BasicTreeUI.collapsedIcon

    private static var collapsedIcon_FieldID: jfieldID?

    override open var collapsedIcon: javax_swing.Icon! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "collapsedIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaTreeUI.collapsedIcon_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.IconForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "collapsedIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaTreeUI.collapsedIcon_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private java.awt.event.ComponentListener javax.swing.plaf.basic.BasicTreeUI.componentListener

    /// protected boolean javax.swing.plaf.basic.BasicTreeUI.createdCellEditor

    private static var createdCellEditor_FieldID: jfieldID?

    override open var createdCellEditor: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "createdCellEditor", fieldType: "Z", fieldCache: &AquaTreeUI.createdCellEditor_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "createdCellEditor", fieldType: "Z", fieldCache: &AquaTreeUI.createdCellEditor_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected boolean javax.swing.plaf.basic.BasicTreeUI.createdRenderer

    private static var createdRenderer_FieldID: jfieldID?

    override open var createdRenderer: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "createdRenderer", fieldType: "Z", fieldCache: &AquaTreeUI.createdRenderer_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "createdRenderer", fieldType: "Z", fieldCache: &AquaTreeUI.createdRenderer_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected transient javax.swing.tree.TreeCellRenderer javax.swing.plaf.basic.BasicTreeUI.currentCellRenderer

    private static var currentCellRenderer_FieldID: jfieldID?

    override open var currentCellRenderer: javax_swing.TreeCellRenderer! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "currentCellRenderer", fieldType: "Ljavax/swing/tree/TreeCellRenderer;", fieldCache: &AquaTreeUI.currentCellRenderer_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.TreeCellRendererForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "currentCellRenderer", fieldType: "Ljavax/swing/tree/TreeCellRenderer;", fieldCache: &AquaTreeUI.currentCellRenderer_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int javax.swing.plaf.basic.BasicTreeUI.depthOffset

    private static var depthOffset_FieldID: jfieldID?

    override open var depthOffset: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "depthOffset", fieldType: "I", fieldCache: &AquaTreeUI.depthOffset_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "depthOffset", fieldType: "I", fieldCache: &AquaTreeUI.depthOffset_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected java.util.Hashtable javax.swing.plaf.basic.BasicTreeUI.drawingCache

    private static var drawingCache_FieldID: jfieldID?

    override open var drawingCache: java_util.Hashtable! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "drawingCache", fieldType: "Ljava/util/Hashtable;", fieldCache: &AquaTreeUI.drawingCache_FieldID, object: javaObject )
            return JNIType.toSwift( type: java_util.Hashtable.self, from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, mapClass: "java/util/Hashtable", locals: &__locals )
            JNIField.SetObjectField( fieldName: "drawingCache", fieldType: "Ljava/util/Hashtable;", fieldCache: &AquaTreeUI.drawingCache_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Component javax.swing.plaf.basic.BasicTreeUI.editingComponent

    private static var editingComponent_FieldID: jfieldID?

    override open var editingComponent: java_awt.Component! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "editingComponent", fieldType: "Ljava/awt/Component;", fieldCache: &AquaTreeUI.editingComponent_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Component( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "editingComponent", fieldType: "Ljava/awt/Component;", fieldCache: &AquaTreeUI.editingComponent_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.tree.TreePath javax.swing.plaf.basic.BasicTreeUI.editingPath

    private static var editingPath_FieldID: jfieldID?

    override open var editingPath: javax_swing.TreePath! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "editingPath", fieldType: "Ljavax/swing/tree/TreePath;", fieldCache: &AquaTreeUI.editingPath_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.TreePath( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "editingPath", fieldType: "Ljavax/swing/tree/TreePath;", fieldCache: &AquaTreeUI.editingPath_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int javax.swing.plaf.basic.BasicTreeUI.editingRow

    private static var editingRow_FieldID: jfieldID?

    override open var editingRow: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "editingRow", fieldType: "I", fieldCache: &AquaTreeUI.editingRow_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "editingRow", fieldType: "I", fieldCache: &AquaTreeUI.editingRow_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected boolean javax.swing.plaf.basic.BasicTreeUI.editorHasDifferentSize

    private static var editorHasDifferentSize_FieldID: jfieldID?

    override open var editorHasDifferentSize: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "editorHasDifferentSize", fieldType: "Z", fieldCache: &AquaTreeUI.editorHasDifferentSize_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "editorHasDifferentSize", fieldType: "Z", fieldCache: &AquaTreeUI.editorHasDifferentSize_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected transient javax.swing.Icon javax.swing.plaf.basic.BasicTreeUI.expandedIcon

    private static var expandedIcon_FieldID: jfieldID?

    override open var expandedIcon: javax_swing.Icon! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "expandedIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaTreeUI.expandedIcon_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.IconForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "expandedIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &AquaTreeUI.expandedIcon_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private java.awt.event.FocusListener javax.swing.plaf.basic.BasicTreeUI.focusListener

    /// private javax.swing.plaf.basic.BasicTreeUI$Handler javax.swing.plaf.basic.BasicTreeUI.handler

    /// private java.awt.Color javax.swing.plaf.basic.BasicTreeUI.hashColor

    /// private boolean javax.swing.plaf.basic.BasicTreeUI.ignoreLAChange

    /// private java.awt.event.KeyListener javax.swing.plaf.basic.BasicTreeUI.keyListener

    /// protected boolean javax.swing.plaf.basic.BasicTreeUI.largeModel

    private static var largeModel_FieldID: jfieldID?

    override open var largeModel: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "largeModel", fieldType: "Z", fieldCache: &AquaTreeUI.largeModel_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "largeModel", fieldType: "Z", fieldCache: &AquaTreeUI.largeModel_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected int javax.swing.plaf.basic.BasicTreeUI.lastSelectedRow

    private static var lastSelectedRow_FieldID: jfieldID?

    override open var lastSelectedRow: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "lastSelectedRow", fieldType: "I", fieldCache: &AquaTreeUI.lastSelectedRow_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "lastSelectedRow", fieldType: "I", fieldCache: &AquaTreeUI.lastSelectedRow_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// private int javax.swing.plaf.basic.BasicTreeUI.leadRow

    /// protected int javax.swing.plaf.basic.BasicTreeUI.leftChildIndent

    private static var leftChildIndent_FieldID: jfieldID?

    override open var leftChildIndent: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "leftChildIndent", fieldType: "I", fieldCache: &AquaTreeUI.leftChildIndent_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "leftChildIndent", fieldType: "I", fieldCache: &AquaTreeUI.leftChildIndent_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// private boolean javax.swing.plaf.basic.BasicTreeUI.leftToRight

    /// private boolean javax.swing.plaf.basic.BasicTreeUI.lineTypeDashed

    /// private java.awt.event.MouseListener javax.swing.plaf.basic.BasicTreeUI.mouseListener

    /// protected javax.swing.tree.AbstractLayoutCache$NodeDimensions javax.swing.plaf.basic.BasicTreeUI.nodeDimensions

    private static var nodeDimensions_FieldID: jfieldID?

    override open var nodeDimensions: javax_swing.AbstractLayoutCache_NodeDimensions! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "nodeDimensions", fieldType: "Ljavax/swing/tree/AbstractLayoutCache$NodeDimensions;", fieldCache: &AquaTreeUI.nodeDimensions_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.AbstractLayoutCache_NodeDimensions( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "nodeDimensions", fieldType: "Ljavax/swing/tree/AbstractLayoutCache$NodeDimensions;", fieldCache: &AquaTreeUI.nodeDimensions_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean javax.swing.plaf.basic.BasicTreeUI.paintLines

    /// protected java.awt.Dimension javax.swing.plaf.basic.BasicTreeUI.preferredMinSize

    private static var preferredMinSize_FieldID: jfieldID?

    override open var preferredMinSize: java_awt.Dimension! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "preferredMinSize", fieldType: "Ljava/awt/Dimension;", fieldCache: &AquaTreeUI.preferredMinSize_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Dimension( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "preferredMinSize", fieldType: "Ljava/awt/Dimension;", fieldCache: &AquaTreeUI.preferredMinSize_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Dimension javax.swing.plaf.basic.BasicTreeUI.preferredSize

    private static var preferredSize_FieldID: jfieldID?

    override open var preferredSize: java_awt.Dimension! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "preferredSize", fieldType: "Ljava/awt/Dimension;", fieldCache: &AquaTreeUI.preferredSize_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Dimension( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "preferredSize", fieldType: "Ljava/awt/Dimension;", fieldCache: &AquaTreeUI.preferredSize_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private java.beans.PropertyChangeListener javax.swing.plaf.basic.BasicTreeUI.propertyChangeListener

    /// private java.awt.event.MouseEvent javax.swing.plaf.basic.BasicTreeUI.releaseEvent

    /// protected javax.swing.CellRendererPane javax.swing.plaf.basic.BasicTreeUI.rendererPane

    private static var rendererPane_FieldID: jfieldID?

    override open var rendererPane: javax_swing.CellRendererPane! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "rendererPane", fieldType: "Ljavax/swing/CellRendererPane;", fieldCache: &AquaTreeUI.rendererPane_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.CellRendererPane( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "rendererPane", fieldType: "Ljavax/swing/CellRendererPane;", fieldCache: &AquaTreeUI.rendererPane_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int javax.swing.plaf.basic.BasicTreeUI.rightChildIndent

    private static var rightChildIndent_FieldID: jfieldID?

    override open var rightChildIndent: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "rightChildIndent", fieldType: "I", fieldCache: &AquaTreeUI.rightChildIndent_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "rightChildIndent", fieldType: "I", fieldCache: &AquaTreeUI.rightChildIndent_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// private java.beans.PropertyChangeListener javax.swing.plaf.basic.BasicTreeUI.selectionModelPropertyChangeListener

    /// protected boolean javax.swing.plaf.basic.BasicTreeUI.stopEditingInCompleteEditing

    private static var stopEditingInCompleteEditing_FieldID: jfieldID?

    override open var stopEditingInCompleteEditing: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "stopEditingInCompleteEditing", fieldType: "Z", fieldCache: &AquaTreeUI.stopEditingInCompleteEditing_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "stopEditingInCompleteEditing", fieldType: "Z", fieldCache: &AquaTreeUI.stopEditingInCompleteEditing_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// private long javax.swing.plaf.basic.BasicTreeUI.timeFactor

    /// protected int javax.swing.plaf.basic.BasicTreeUI.totalChildIndent

    private static var totalChildIndent_FieldID: jfieldID?

    override open var totalChildIndent: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "totalChildIndent", fieldType: "I", fieldCache: &AquaTreeUI.totalChildIndent_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "totalChildIndent", fieldType: "I", fieldCache: &AquaTreeUI.totalChildIndent_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected javax.swing.JTree javax.swing.plaf.basic.BasicTreeUI.tree

    private static var tree_FieldID: jfieldID?

    override open var tree: javax_swing.JTree! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "tree", fieldType: "Ljavax/swing/JTree;", fieldCache: &AquaTreeUI.tree_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.JTree( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "tree", fieldType: "Ljavax/swing/JTree;", fieldCache: &AquaTreeUI.tree_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private javax.swing.event.TreeExpansionListener javax.swing.plaf.basic.BasicTreeUI.treeExpansionListener

    /// protected javax.swing.tree.TreeModel javax.swing.plaf.basic.BasicTreeUI.treeModel

    private static var treeModel_FieldID: jfieldID?

    override open var treeModel: javax_swing.TreeModel! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "treeModel", fieldType: "Ljavax/swing/tree/TreeModel;", fieldCache: &AquaTreeUI.treeModel_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.TreeModelForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "treeModel", fieldType: "Ljavax/swing/tree/TreeModel;", fieldCache: &AquaTreeUI.treeModel_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private javax.swing.event.TreeModelListener javax.swing.plaf.basic.BasicTreeUI.treeModelListener

    /// private javax.swing.event.TreeSelectionListener javax.swing.plaf.basic.BasicTreeUI.treeSelectionListener

    /// protected javax.swing.tree.TreeSelectionModel javax.swing.plaf.basic.BasicTreeUI.treeSelectionModel

    private static var treeSelectionModel_FieldID: jfieldID?

    override open var treeSelectionModel: javax_swing.TreeSelectionModel! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "treeSelectionModel", fieldType: "Ljavax/swing/tree/TreeSelectionModel;", fieldCache: &AquaTreeUI.treeSelectionModel_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.TreeSelectionModelForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "treeSelectionModel", fieldType: "Ljavax/swing/tree/TreeSelectionModel;", fieldCache: &AquaTreeUI.treeSelectionModel_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.tree.AbstractLayoutCache javax.swing.plaf.basic.BasicTreeUI.treeState

    private static var treeState_FieldID: jfieldID?

    override open var treeState: javax_swing.AbstractLayoutCache! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "treeState", fieldType: "Ljavax/swing/tree/AbstractLayoutCache;", fieldCache: &AquaTreeUI.treeState_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? javax_swing.AbstractLayoutCache( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "treeState", fieldType: "Ljavax/swing/tree/AbstractLayoutCache;", fieldCache: &AquaTreeUI.treeState_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected boolean javax.swing.plaf.basic.BasicTreeUI.validCachedPreferredSize

    private static var validCachedPreferredSize_FieldID: jfieldID?

    override open var validCachedPreferredSize: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "validCachedPreferredSize", fieldType: "Z", fieldCache: &AquaTreeUI.validCachedPreferredSize_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "validCachedPreferredSize", fieldType: "Z", fieldCache: &AquaTreeUI.validCachedPreferredSize_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// public com.apple.laf.AquaTreeUI()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaTreeUI", classCache: &AquaTreeUI.AquaTreeUIJNIClass, methodSig: "()V", methodCache: &AquaTreeUI.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$000(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$100(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$1000(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.tree.TreeModel com.apple.laf.AquaTreeUI.access$1100(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.tree.AbstractLayoutCache com.apple.laf.AquaTreeUI.access$1200(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$1300(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.tree.AbstractLayoutCache com.apple.laf.AquaTreeUI.access$1400(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$1500(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static void com.apple.laf.AquaTreeUI.access$1600(com.apple.laf.AquaTreeUI,javax.swing.tree.TreePath)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$1700(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$1800(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static boolean com.apple.laf.AquaTreeUI.access$1900(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$200(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$2000(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$2100(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$2200(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$2300(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$2400(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$2500(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$2600(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$2700(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$2800(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$2900(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$300(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$3000(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$3100(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$3200(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$400(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$500(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$600(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$700(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$800(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JTree com.apple.laf.AquaTreeUI.access$900(com.apple.laf.AquaTreeUI)

    // Skipping method: true false false false false 

    /// public static javax.swing.plaf.ComponentUI com.apple.laf.AquaTreeUI.createUI(javax.swing.JComponent)

    private static var createUI_MethodID_2: jmethodID?

    open class func createUI( arg0: javax_swing.JComponent? ) -> javax_swing.ComponentUI! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaTreeUI", classCache: &AquaTreeUIJNIClass, methodName: "createUI", methodSig: "(Ljavax/swing/JComponent;)Ljavax/swing/plaf/ComponentUI;", methodCache: &createUI_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.ComponentUI( javaObject: __return ) : nil
    }

    override open class func createUI( _ _arg0: javax_swing.JComponent? ) -> javax_swing.ComponentUI! {
        return createUI( arg0: _arg0 )
    }

    /// void com.apple.laf.AquaTreeUI.collapseAllNodes(javax.swing.tree.TreePath,int)

    // Skipping method: true false false false false 

    /// void com.apple.laf.AquaTreeUI.collapseNode(int,boolean)

    // Skipping method: true false false false false 

    /// protected java.awt.event.FocusListener com.apple.laf.AquaTreeUI.createFocusListener()

    private static var createFocusListener_MethodID_3: jmethodID?

    override open func createFocusListener() -> java_awt.FocusListener! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createFocusListener", methodSig: "()Ljava/awt/event/FocusListener;", methodCache: &AquaTreeUI.createFocusListener_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.FocusListenerForward( javaObject: __return ) : nil
    }


    /// protected java.beans.PropertyChangeListener com.apple.laf.AquaTreeUI.createPropertyChangeListener()

    private static var createPropertyChangeListener_MethodID_4: jmethodID?

    override open func createPropertyChangeListener() -> /* interface java.beans.PropertyChangeListener */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createPropertyChangeListener", methodSig: "()Ljava/beans/PropertyChangeListener;", methodCache: &AquaTreeUI.createPropertyChangeListener_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface java.beans.PropertyChangeListener */ UnavailableProtocolForward( javaObject: __return ) : nil
    }


    /// protected void com.apple.laf.AquaTreeUI.decodeLineStyle(java.lang.Object)

    private static var decodeLineStyle_MethodID_5: jmethodID?

    open func decodeLineStyle( arg0: java_swift.JavaObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "decodeLineStyle", methodSig: "(Ljava/lang/Object;)V", methodCache: &AquaTreeUI.decodeLineStyle_MethodID_5, args: &__args, locals: &__locals )
    }

    open func decodeLineStyle( _ _arg0: java_swift.JavaObject? ) {
        decodeLineStyle( arg0: _arg0 )
    }

    /// void com.apple.laf.AquaTreeUI.expandAllNodes(javax.swing.tree.TreePath,int)

    // Skipping method: true false false false false 

    /// void com.apple.laf.AquaTreeUI.expandNode(int,boolean)

    // Skipping method: true false false false false 

    /// public javax.swing.tree.TreePath com.apple.laf.AquaTreeUI.getClosestPathForLocation(javax.swing.JTree,int,int)

    private static var getClosestPathForLocation_MethodID_6: jmethodID?

    open func getClosestPathForLocation( arg0: javax_swing.JTree?, arg1: Int, arg2: Int ) -> javax_swing.TreePath! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = jvalue( i: jint(arg2) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getClosestPathForLocation", methodSig: "(Ljavax/swing/JTree;II)Ljavax/swing/tree/TreePath;", methodCache: &AquaTreeUI.getClosestPathForLocation_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.TreePath( javaObject: __return ) : nil
    }

    override open func getClosestPathForLocation( _ _arg0: javax_swing.JTree?, _ _arg1: Int, _ _arg2: Int ) -> javax_swing.TreePath! {
        return getClosestPathForLocation( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public javax.swing.Icon com.apple.laf.AquaTreeUI.getCollapsedIcon()

    // Skipping method: false true false false false 

    /// protected apple.laf.JRSUIConstants$Direction com.apple.laf.AquaTreeUI.getDirection(boolean,boolean)

    private static var getDirection_MethodID_7: jmethodID?

    open func getDirection( arg0: Bool, arg1: Bool ) -> /* class apple.laf.JRSUIConstants$Direction */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( z: jboolean(arg0 ? JNI_TRUE : JNI_FALSE) )
        __args[1] = jvalue( z: jboolean(arg1 ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDirection", methodSig: "(ZZ)Lapple/laf/JRSUIConstants$Direction;", methodCache: &AquaTreeUI.getDirection_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class apple.laf.JRSUIConstants$Direction */ UnavailableObject( javaObject: __return ) : nil
    }

    open func getDirection( _ _arg0: Bool, _ _arg1: Bool ) -> /* class apple.laf.JRSUIConstants$Direction */ UnavailableObject! {
        return getDirection( arg0: _arg0, arg1: _arg1 )
    }

    /// protected java.awt.Rectangle com.apple.laf.AquaTreeUI.getPathArrowBounds(javax.swing.tree.TreePath)

    private static var getPathArrowBounds_MethodID_8: jmethodID?

    open func getPathArrowBounds( arg0: javax_swing.TreePath? ) -> java_awt.Rectangle! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPathArrowBounds", methodSig: "(Ljavax/swing/tree/TreePath;)Ljava/awt/Rectangle;", methodCache: &AquaTreeUI.getPathArrowBounds_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Rectangle( javaObject: __return ) : nil
    }

    open func getPathArrowBounds( _ _arg0: javax_swing.TreePath? ) -> java_awt.Rectangle! {
        return getPathArrowBounds( arg0: _arg0 )
    }

    /// protected int com.apple.laf.AquaTreeUI.getRowForPath(javax.swing.tree.TreePath)

    private static var getRowForPath_MethodID_9: jmethodID?

    open func getRowForPath( arg0: javax_swing.TreePath? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getRowForPath", methodSig: "(Ljavax/swing/tree/TreePath;)I", methodCache: &AquaTreeUI.getRowForPath_MethodID_9, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func getRowForPath( _ _arg0: javax_swing.TreePath? ) -> Int {
        return getRowForPath( arg0: _arg0 )
    }

    /// protected apple.laf.JRSUIConstants$State com.apple.laf.AquaTreeUI.getState(javax.swing.tree.TreePath)

    private static var getState_MethodID_10: jmethodID?

    open func getState( arg0: javax_swing.TreePath? ) -> /* class apple.laf.JRSUIConstants$State */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getState", methodSig: "(Ljavax/swing/tree/TreePath;)Lapple/laf/JRSUIConstants$State;", methodCache: &AquaTreeUI.getState_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class apple.laf.JRSUIConstants$State */ UnavailableObject( javaObject: __return ) : nil
    }

    open func getState( _ _arg0: javax_swing.TreePath? ) -> /* class apple.laf.JRSUIConstants$State */ UnavailableObject! {
        return getState( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaTreeUI.handleExpandControlClick(javax.swing.tree.TreePath,int,int)

    private static var handleExpandControlClick_MethodID_11: jmethodID?

    open func handleExpandControlClick( arg0: javax_swing.TreePath?, arg1: Int, arg2: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = jvalue( i: jint(arg1) )
        __args[2] = jvalue( i: jint(arg2) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "handleExpandControlClick", methodSig: "(Ljavax/swing/tree/TreePath;II)V", methodCache: &AquaTreeUI.handleExpandControlClick_MethodID_11, args: &__args, locals: &__locals )
    }

    override open func handleExpandControlClick( _ _arg0: javax_swing.TreePath?, _ _arg1: Int, _ _arg2: Int ) {
        handleExpandControlClick( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// protected void com.apple.laf.AquaTreeUI.installKeyboardActions()

    private static var installKeyboardActions_MethodID_12: jmethodID?

    override open func installKeyboardActions() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installKeyboardActions", methodSig: "()V", methodCache: &AquaTreeUI.installKeyboardActions_MethodID_12, args: &__args, locals: &__locals )
    }


    /// public void com.apple.laf.AquaTreeUI.installUI(javax.swing.JComponent)

    private static var installUI_MethodID_13: jmethodID?

    open func installUI( arg0: javax_swing.JComponent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installUI", methodSig: "(Ljavax/swing/JComponent;)V", methodCache: &AquaTreeUI.installUI_MethodID_13, args: &__args, locals: &__locals )
    }

    override open func installUI( _ _arg0: javax_swing.JComponent? ) {
        installUI( arg0: _arg0 )
    }

    /// protected boolean com.apple.laf.AquaTreeUI.isToggleSelectionEvent(java.awt.event.MouseEvent)

    private static var isToggleSelectionEvent_MethodID_14: jmethodID?

    open func isToggleSelectionEvent( arg0: java_awt.MouseEvent? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isToggleSelectionEvent", methodSig: "(Ljava/awt/event/MouseEvent;)Z", methodCache: &AquaTreeUI.isToggleSelectionEvent_MethodID_14, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func isToggleSelectionEvent( _ _arg0: java_awt.MouseEvent? ) -> Bool {
        return isToggleSelectionEvent( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaTreeUI.paint(java.awt.Graphics,javax.swing.JComponent)

    private static var paint_MethodID_15: jmethodID?

    open func paint( arg0: java_awt.Graphics?, arg1: javax_swing.JComponent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paint", methodSig: "(Ljava/awt/Graphics;Ljavax/swing/JComponent;)V", methodCache: &AquaTreeUI.paint_MethodID_15, args: &__args, locals: &__locals )
    }

    override open func paint( _ _arg0: java_awt.Graphics?, _ _arg1: javax_swing.JComponent? ) {
        paint( arg0: _arg0, arg1: _arg1 )
    }

    /// protected void com.apple.laf.AquaTreeUI.paintExpandControl(java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,java.awt.Rectangle,javax.swing.tree.TreePath,int,boolean,boolean,boolean)

    private static var paintExpandControl_MethodID_16: jmethodID?

    open func paintExpandControl( arg0: java_awt.Graphics?, arg1: java_awt.Rectangle?, arg2: java_awt.Insets?, arg3: java_awt.Rectangle?, arg4: javax_swing.TreePath?, arg5: Int, arg6: Bool, arg7: Bool, arg8: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 9 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        __args[3] = JNIType.toJava( value: arg3, locals: &__locals )
        __args[4] = JNIType.toJava( value: arg4, locals: &__locals )
        __args[5] = jvalue( i: jint(arg5) )
        __args[6] = jvalue( z: jboolean(arg6 ? JNI_TRUE : JNI_FALSE) )
        __args[7] = jvalue( z: jboolean(arg7 ? JNI_TRUE : JNI_FALSE) )
        __args[8] = jvalue( z: jboolean(arg8 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintExpandControl", methodSig: "(Ljava/awt/Graphics;Ljava/awt/Rectangle;Ljava/awt/Insets;Ljava/awt/Rectangle;Ljavax/swing/tree/TreePath;IZZZ)V", methodCache: &AquaTreeUI.paintExpandControl_MethodID_16, args: &__args, locals: &__locals )
    }

    override open func paintExpandControl( _ _arg0: java_awt.Graphics?, _ _arg1: java_awt.Rectangle?, _ _arg2: java_awt.Insets?, _ _arg3: java_awt.Rectangle?, _ _arg4: javax_swing.TreePath?, _ _arg5: Int, _ _arg6: Bool, _ _arg7: Bool, _ _arg8: Bool ) {
        paintExpandControl( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6, arg7: _arg7, arg8: _arg8 )
    }

    /// protected void com.apple.laf.AquaTreeUI.paintHorizontalPartOfLeg(java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,java.awt.Rectangle,javax.swing.tree.TreePath,int,boolean,boolean,boolean)

    private static var paintHorizontalPartOfLeg_MethodID_17: jmethodID?

    open func paintHorizontalPartOfLeg( arg0: java_awt.Graphics?, arg1: java_awt.Rectangle?, arg2: java_awt.Insets?, arg3: java_awt.Rectangle?, arg4: javax_swing.TreePath?, arg5: Int, arg6: Bool, arg7: Bool, arg8: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 9 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        __args[3] = JNIType.toJava( value: arg3, locals: &__locals )
        __args[4] = JNIType.toJava( value: arg4, locals: &__locals )
        __args[5] = jvalue( i: jint(arg5) )
        __args[6] = jvalue( z: jboolean(arg6 ? JNI_TRUE : JNI_FALSE) )
        __args[7] = jvalue( z: jboolean(arg7 ? JNI_TRUE : JNI_FALSE) )
        __args[8] = jvalue( z: jboolean(arg8 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintHorizontalPartOfLeg", methodSig: "(Ljava/awt/Graphics;Ljava/awt/Rectangle;Ljava/awt/Insets;Ljava/awt/Rectangle;Ljavax/swing/tree/TreePath;IZZZ)V", methodCache: &AquaTreeUI.paintHorizontalPartOfLeg_MethodID_17, args: &__args, locals: &__locals )
    }

    override open func paintHorizontalPartOfLeg( _ _arg0: java_awt.Graphics?, _ _arg1: java_awt.Rectangle?, _ _arg2: java_awt.Insets?, _ _arg3: java_awt.Rectangle?, _ _arg4: javax_swing.TreePath?, _ _arg5: Int, _ _arg6: Bool, _ _arg7: Bool, _ _arg8: Bool ) {
        paintHorizontalPartOfLeg( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6, arg7: _arg7, arg8: _arg8 )
    }

    /// protected void com.apple.laf.AquaTreeUI.paintHorizontalSeparators(java.awt.Graphics,javax.swing.JComponent)

    private static var paintHorizontalSeparators_MethodID_18: jmethodID?

    open func paintHorizontalSeparators( arg0: java_awt.Graphics?, arg1: javax_swing.JComponent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintHorizontalSeparators", methodSig: "(Ljava/awt/Graphics;Ljavax/swing/JComponent;)V", methodCache: &AquaTreeUI.paintHorizontalSeparators_MethodID_18, args: &__args, locals: &__locals )
    }

    open func paintHorizontalSeparators( _ _arg0: java_awt.Graphics?, _ _arg1: javax_swing.JComponent? ) {
        paintHorizontalSeparators( arg0: _arg0, arg1: _arg1 )
    }

    /// protected void com.apple.laf.AquaTreeUI.paintVerticalPartOfLeg(java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,javax.swing.tree.TreePath)

    private static var paintVerticalPartOfLeg_MethodID_19: jmethodID?

    open func paintVerticalPartOfLeg( arg0: java_awt.Graphics?, arg1: java_awt.Rectangle?, arg2: java_awt.Insets?, arg3: javax_swing.TreePath? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        __args[3] = JNIType.toJava( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintVerticalPartOfLeg", methodSig: "(Ljava/awt/Graphics;Ljava/awt/Rectangle;Ljava/awt/Insets;Ljavax/swing/tree/TreePath;)V", methodCache: &AquaTreeUI.paintVerticalPartOfLeg_MethodID_19, args: &__args, locals: &__locals )
    }

    override open func paintVerticalPartOfLeg( _ _arg0: java_awt.Graphics?, _ _arg1: java_awt.Rectangle?, _ _arg2: java_awt.Insets?, _ _arg3: javax_swing.TreePath? ) {
        paintVerticalPartOfLeg( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// protected void com.apple.laf.AquaTreeUI.setupPainter(apple.laf.JRSUIConstants$State,boolean,boolean)

    private static var setupPainter_MethodID_20: jmethodID?

    open func setupPainter( arg0: /* class apple.laf.JRSUIConstants$State */ UnavailableObject?, arg1: Bool, arg2: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = jvalue( z: jboolean(arg1 ? JNI_TRUE : JNI_FALSE) )
        __args[2] = jvalue( z: jboolean(arg2 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setupPainter", methodSig: "(Lapple/laf/JRSUIConstants$State;ZZ)V", methodCache: &AquaTreeUI.setupPainter_MethodID_20, args: &__args, locals: &__locals )
    }

    open func setupPainter( _ _arg0: /* class apple.laf.JRSUIConstants$State */ UnavailableObject?, _ _arg1: Bool, _ _arg2: Bool ) {
        setupPainter( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void com.apple.laf.AquaTreeUI.uninstallUI(javax.swing.JComponent)

    private static var uninstallUI_MethodID_21: jmethodID?

    open func uninstallUI( arg0: javax_swing.JComponent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallUI", methodSig: "(Ljavax/swing/JComponent;)V", methodCache: &AquaTreeUI.uninstallUI_MethodID_21, args: &__args, locals: &__locals )
    }

    override open func uninstallUI( _ _arg0: javax_swing.JComponent? ) {
        uninstallUI( arg0: _arg0 )
    }

}

