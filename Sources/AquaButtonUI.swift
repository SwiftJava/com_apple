
import java_swift
import javax_swing
import java_lang
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:52:05 GMT 2016 ///

/// class com.apple.laf.AquaButtonUI ///

open class AquaButtonUI: javax_swing.BasicButtonUI {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "com.apple.laf.AquaButtonUI", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaButtonUIJNIClass: jclass?

    /// private static final java.lang.String com.apple.laf.AquaButtonUI.BUTTON_TYPE

    /// private static final java.lang.String com.apple.laf.AquaButtonUI.SEGMENTED_BUTTON_POSITION

    /// protected static final com.apple.laf.AquaUtils$LazySingleton com.apple.laf.AquaButtonUI.buttonUI

    /// private boolean com.apple.laf.AquaButtonUI.defaults_initialized

    /// private java.awt.Color com.apple.laf.AquaButtonUI.defaultDisabledTextColor

    /// static final com.apple.laf.AquaUtils$LazySingleton com.apple.laf.AquaButtonUI.fHierListener

    /// protected int javax.swing.plaf.basic.BasicButtonUI.defaultTextIconGap

    private static var defaultTextIconGap_FieldID: jfieldID?

    override open var defaultTextIconGap: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "defaultTextIconGap", fieldType: "I", fieldCache: &AquaButtonUI.defaultTextIconGap_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "defaultTextIconGap", fieldType: "I", fieldCache: &AquaButtonUI.defaultTextIconGap_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// private int javax.swing.plaf.basic.BasicButtonUI.shiftOffset

    /// protected int javax.swing.plaf.basic.BasicButtonUI.defaultTextShiftOffset

    private static var defaultTextShiftOffset_FieldID: jfieldID?

    override open var defaultTextShiftOffset: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "defaultTextShiftOffset", fieldType: "I", fieldCache: &AquaButtonUI.defaultTextShiftOffset_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "defaultTextShiftOffset", fieldType: "I", fieldCache: &AquaButtonUI.defaultTextShiftOffset_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// private static final java.lang.String javax.swing.plaf.basic.BasicButtonUI.propertyPrefix

    /// private static final java.lang.Object javax.swing.plaf.basic.BasicButtonUI.BASIC_BUTTON_UI_KEY

    /// private static java.awt.Rectangle javax.swing.plaf.basic.BasicButtonUI.viewRect

    /// private static java.awt.Rectangle javax.swing.plaf.basic.BasicButtonUI.textRect

    /// private static java.awt.Rectangle javax.swing.plaf.basic.BasicButtonUI.iconRect

    /// public com.apple.laf.AquaButtonUI()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaButtonUI", classCache: &AquaButtonUI.AquaButtonUIJNIClass, methodSig: "()V", methodCache: &AquaButtonUI.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.awt.Dimension com.apple.laf.AquaButtonUI.getPreferredSize(javax.swing.JComponent)

    /// public void com.apple.laf.AquaButtonUI.paint(java.awt.Graphics,javax.swing.JComponent)

    /// public java.awt.Dimension com.apple.laf.AquaButtonUI.getMaximumSize(javax.swing.JComponent)

    /// public java.awt.Dimension com.apple.laf.AquaButtonUI.getMinimumSize(javax.swing.JComponent)

    /// public void com.apple.laf.AquaButtonUI.uninstallUI(javax.swing.JComponent)

    /// public static javax.swing.plaf.ComponentUI com.apple.laf.AquaButtonUI.createUI(javax.swing.JComponent)

    private static var createUI_MethodID_2: jmethodID?

    override open class func createUI( arg0: javax_swing.JComponent? ) -> javax_swing.ComponentUI! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaButtonUI", classCache: &AquaButtonUIJNIClass, methodName: "createUI", methodSig: "(Ljavax/swing/JComponent;)Ljavax/swing/plaf/ComponentUI;", methodCache: &createUI_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.ComponentUI( javaObject: __return ) : nil
    }

    override open class func createUI( _ _arg0: javax_swing.JComponent? ) -> javax_swing.ComponentUI! {
        return createUI( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaButtonUI.applySizeFor(javax.swing.JComponent,apple.laf.JRSUIConstants$Size)

    private static var applySizeFor_MethodID_3: jmethodID?

    open func applySizeFor( arg0: javax_swing.JComponent?, arg1: /* apple.laf.JRSUIConstants$Size */ UnclassedObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "applySizeFor", methodSig: "(Ljavax/swing/JComponent;Lapple/laf/JRSUIConstants$Size;)V", methodCache: &AquaButtonUI.applySizeFor_MethodID_3, args: &__args, locals: &__locals )
    }

    open func applySizeFor( _ _arg0: javax_swing.JComponent?, _ _arg1: /* apple.laf.JRSUIConstants$Size */ UnclassedObject? ) {
        applySizeFor( arg0: _arg0, arg1: _arg1 )
    }

    /// protected void com.apple.laf.AquaButtonUI.setThemeBorder(javax.swing.AbstractButton)

    private static var setThemeBorder_MethodID_4: jmethodID?

    open func setThemeBorder( arg0: javax_swing.AbstractButton? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setThemeBorder", methodSig: "(Ljavax/swing/AbstractButton;)V", methodCache: &AquaButtonUI.setThemeBorder_MethodID_4, args: &__args, locals: &__locals )
    }

    open func setThemeBorder( _ _arg0: javax_swing.AbstractButton? ) {
        setThemeBorder( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaButtonUI.paintIcon(java.awt.Graphics,javax.swing.AbstractButton,java.awt.Rectangle)

    private static var paintIcon_MethodID_5: jmethodID?

    open func paintIcon( arg0: java_awt.Graphics?, arg1: javax_swing.AbstractButton?, arg2: java_awt.Rectangle? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintIcon", methodSig: "(Ljava/awt/Graphics;Ljavax/swing/AbstractButton;Ljava/awt/Rectangle;)V", methodCache: &AquaButtonUI.paintIcon_MethodID_5, args: &__args, locals: &__locals )
    }

    open func paintIcon( _ _arg0: java_awt.Graphics?, _ _arg1: javax_swing.AbstractButton?, _ _arg2: java_awt.Rectangle? ) {
        paintIcon( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// protected void com.apple.laf.AquaButtonUI.paintText(java.awt.Graphics,javax.swing.AbstractButton,java.awt.Rectangle,java.lang.String)

    private static var paintText_MethodID_6: jmethodID?

    override open func paintText( arg0: java_awt.Graphics?, arg1: javax_swing.AbstractButton?, arg2: java_awt.Rectangle?, arg3: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintText", methodSig: "(Ljava/awt/Graphics;Ljavax/swing/AbstractButton;Ljava/awt/Rectangle;Ljava/lang/String;)V", methodCache: &AquaButtonUI.paintText_MethodID_6, args: &__args, locals: &__locals )
    }

    override open func paintText( _ _arg0: java_awt.Graphics?, _ _arg1: javax_swing.AbstractButton?, _ _arg2: java_awt.Rectangle?, _ _arg3: String? ) {
        paintText( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// protected void com.apple.laf.AquaButtonUI.paintText(java.awt.Graphics,javax.swing.JComponent,java.awt.Rectangle,java.lang.String)

    private static var paintText_MethodID_7: jmethodID?

    override open func paintText( arg0: java_awt.Graphics?, arg1: javax_swing.JComponent?, arg2: java_awt.Rectangle?, arg3: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintText", methodSig: "(Ljava/awt/Graphics;Ljavax/swing/JComponent;Ljava/awt/Rectangle;Ljava/lang/String;)V", methodCache: &AquaButtonUI.paintText_MethodID_7, args: &__args, locals: &__locals )
    }

    override open func paintText( _ _arg0: java_awt.Graphics?, _ _arg1: javax_swing.JComponent?, _ _arg2: java_awt.Rectangle?, _ _arg3: String? ) {
        paintText( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// protected void com.apple.laf.AquaButtonUI.installDefaults(javax.swing.AbstractButton)

    private static var installDefaults_MethodID_8: jmethodID?

    override open func installDefaults( arg0: javax_swing.AbstractButton? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installDefaults", methodSig: "(Ljavax/swing/AbstractButton;)V", methodCache: &AquaButtonUI.installDefaults_MethodID_8, args: &__args, locals: &__locals )
    }

    override open func installDefaults( _ _arg0: javax_swing.AbstractButton? ) {
        installDefaults( arg0: _arg0 )
    }

    /// protected static boolean com.apple.laf.AquaButtonUI.isOnToolbar(javax.swing.AbstractButton)

    private static var isOnToolbar_MethodID_9: jmethodID?

    open class func isOnToolbar( arg0: javax_swing.AbstractButton? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "com/apple/laf/AquaButtonUI", classCache: &AquaButtonUIJNIClass, methodName: "isOnToolbar", methodSig: "(Ljavax/swing/AbstractButton;)Z", methodCache: &isOnToolbar_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func isOnToolbar( _ _arg0: javax_swing.AbstractButton? ) -> Bool {
        return isOnToolbar( arg0: _arg0 )
    }

    /// protected static void com.apple.laf.AquaButtonUI.updateBorder(javax.swing.AbstractButton)

    private static var updateBorder_MethodID_10: jmethodID?

    open class func updateBorder( arg0: javax_swing.AbstractButton? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "com/apple/laf/AquaButtonUI", classCache: &AquaButtonUIJNIClass, methodName: "updateBorder", methodSig: "(Ljavax/swing/AbstractButton;)V", methodCache: &updateBorder_MethodID_10, args: &__args, locals: &__locals )
    }

    open class func updateBorder( _ _arg0: javax_swing.AbstractButton? ) {
        updateBorder( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaButtonUI.setButtonMarginIfNeeded(javax.swing.AbstractButton,java.awt.Insets)

    private static var setButtonMarginIfNeeded_MethodID_11: jmethodID?

    open func setButtonMarginIfNeeded( arg0: javax_swing.AbstractButton?, arg1: java_awt.Insets? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setButtonMarginIfNeeded", methodSig: "(Ljavax/swing/AbstractButton;Ljava/awt/Insets;)V", methodCache: &AquaButtonUI.setButtonMarginIfNeeded_MethodID_11, args: &__args, locals: &__locals )
    }

    open func setButtonMarginIfNeeded( _ _arg0: javax_swing.AbstractButton?, _ _arg1: java_awt.Insets? ) {
        setButtonMarginIfNeeded( arg0: _arg0, arg1: _arg1 )
    }

    /// public boolean com.apple.laf.AquaButtonUI.isBorderFromProperty(javax.swing.AbstractButton)

    private static var isBorderFromProperty_MethodID_12: jmethodID?

    open func isBorderFromProperty( arg0: javax_swing.AbstractButton? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isBorderFromProperty", methodSig: "(Ljavax/swing/AbstractButton;)Z", methodCache: &AquaButtonUI.isBorderFromProperty_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func isBorderFromProperty( _ _arg0: javax_swing.AbstractButton? ) -> Bool {
        return isBorderFromProperty( arg0: _arg0 )
    }

    /// protected boolean com.apple.laf.AquaButtonUI.setButtonType(javax.swing.AbstractButton,java.lang.Object)

    private static var setButtonType_MethodID_13: jmethodID?

    open func setButtonType( arg0: javax_swing.AbstractButton?, arg1: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "setButtonType", methodSig: "(Ljavax/swing/AbstractButton;Ljava/lang/Object;)Z", methodCache: &AquaButtonUI.setButtonType_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func setButtonType( _ _arg0: javax_swing.AbstractButton?, _ _arg1: java_lang.JavaObject? ) -> Bool {
        return setButtonType( arg0: _arg0, arg1: _arg1 )
    }

    /// protected void com.apple.laf.AquaButtonUI.installListeners(javax.swing.AbstractButton)

    private static var installListeners_MethodID_14: jmethodID?

    override open func installListeners( arg0: javax_swing.AbstractButton? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installListeners", methodSig: "(Ljavax/swing/AbstractButton;)V", methodCache: &AquaButtonUI.installListeners_MethodID_14, args: &__args, locals: &__locals )
    }

    override open func installListeners( _ _arg0: javax_swing.AbstractButton? ) {
        installListeners( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaButtonUI.installKeyboardActions(javax.swing.AbstractButton)

    private static var installKeyboardActions_MethodID_15: jmethodID?

    override open func installKeyboardActions( arg0: javax_swing.AbstractButton? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installKeyboardActions", methodSig: "(Ljavax/swing/AbstractButton;)V", methodCache: &AquaButtonUI.installKeyboardActions_MethodID_15, args: &__args, locals: &__locals )
    }

    override open func installKeyboardActions( _ _arg0: javax_swing.AbstractButton? ) {
        installKeyboardActions( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaButtonUI.uninstallKeyboardActions(javax.swing.AbstractButton)

    private static var uninstallKeyboardActions_MethodID_16: jmethodID?

    override open func uninstallKeyboardActions( arg0: javax_swing.AbstractButton? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallKeyboardActions", methodSig: "(Ljavax/swing/AbstractButton;)V", methodCache: &AquaButtonUI.uninstallKeyboardActions_MethodID_16, args: &__args, locals: &__locals )
    }

    override open func uninstallKeyboardActions( _ _arg0: javax_swing.AbstractButton? ) {
        uninstallKeyboardActions( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaButtonUI.uninstallListeners(javax.swing.AbstractButton)

    private static var uninstallListeners_MethodID_17: jmethodID?

    override open func uninstallListeners( arg0: javax_swing.AbstractButton? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallListeners", methodSig: "(Ljavax/swing/AbstractButton;)V", methodCache: &AquaButtonUI.uninstallListeners_MethodID_17, args: &__args, locals: &__locals )
    }

    override open func uninstallListeners( _ _arg0: javax_swing.AbstractButton? ) {
        uninstallListeners( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaButtonUI.uninstallDefaults(javax.swing.AbstractButton)

    private static var uninstallDefaults_MethodID_18: jmethodID?

    override open func uninstallDefaults( arg0: javax_swing.AbstractButton? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallDefaults", methodSig: "(Ljavax/swing/AbstractButton;)V", methodCache: &AquaButtonUI.uninstallDefaults_MethodID_18, args: &__args, locals: &__locals )
    }

    override open func uninstallDefaults( _ _arg0: javax_swing.AbstractButton? ) {
        uninstallDefaults( arg0: _arg0 )
    }

    /// protected javax.swing.plaf.basic.BasicButtonListener com.apple.laf.AquaButtonUI.createButtonListener(javax.swing.AbstractButton)

    private static var createButtonListener_MethodID_19: jmethodID?

    override open func createButtonListener( arg0: javax_swing.AbstractButton? ) -> javax_swing.BasicButtonListener! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createButtonListener", methodSig: "(Ljavax/swing/AbstractButton;)Ljavax/swing/plaf/basic/BasicButtonListener;", methodCache: &AquaButtonUI.createButtonListener_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.BasicButtonListener( javaObject: __return ) : nil
    }

    override open func createButtonListener( _ _arg0: javax_swing.AbstractButton? ) -> javax_swing.BasicButtonListener! {
        return createButtonListener( arg0: _arg0 )
    }

    /// protected com.apple.laf.AquaButtonUI$AquaButtonListener com.apple.laf.AquaButtonUI.createButtonListener(javax.swing.AbstractButton)

    /// protected java.lang.String com.apple.laf.AquaButtonUI.layoutAndGetText(java.awt.Graphics,javax.swing.AbstractButton,com.apple.laf.AquaButtonBorder,java.awt.Insets,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle)

    private static var layoutAndGetText_MethodID_20: jmethodID?

    open func layoutAndGetText( arg0: java_awt.Graphics?, arg1: javax_swing.AbstractButton?, arg2: AquaButtonBorder?, arg3: java_awt.Insets?, arg4: java_awt.Rectangle?, arg5: java_awt.Rectangle?, arg6: java_awt.Rectangle? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "layoutAndGetText", methodSig: "(Ljava/awt/Graphics;Ljavax/swing/AbstractButton;Lcom/apple/laf/AquaButtonBorder;Ljava/awt/Insets;Ljava/awt/Rectangle;Ljava/awt/Rectangle;Ljava/awt/Rectangle;)Ljava/lang/String;", methodCache: &AquaButtonUI.layoutAndGetText_MethodID_20, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open func layoutAndGetText( _ _arg0: java_awt.Graphics?, _ _arg1: javax_swing.AbstractButton?, _ _arg2: AquaButtonBorder?, _ _arg3: java_awt.Insets?, _ _arg4: java_awt.Rectangle?, _ _arg5: java_awt.Rectangle?, _ _arg6: java_awt.Rectangle? ) -> String! {
        return layoutAndGetText( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// protected void com.apple.laf.AquaButtonUI.paintButtonPressed(java.awt.Graphics,javax.swing.AbstractButton)

    private static var paintButtonPressed_MethodID_21: jmethodID?

    override open func paintButtonPressed( arg0: java_awt.Graphics?, arg1: javax_swing.AbstractButton? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintButtonPressed", methodSig: "(Ljava/awt/Graphics;Ljavax/swing/AbstractButton;)V", methodCache: &AquaButtonUI.paintButtonPressed_MethodID_21, args: &__args, locals: &__locals )
    }

    override open func paintButtonPressed( _ _arg0: java_awt.Graphics?, _ _arg1: javax_swing.AbstractButton? ) {
        paintButtonPressed( arg0: _arg0, arg1: _arg1 )
    }

    /// static com.apple.laf.AquaButtonUI$AquaHierarchyButtonListener com.apple.laf.AquaButtonUI.getAquaHierarchyButtonListener()

    /// private boolean com.apple.laf.AquaButtonUI.shouldInstallHierListener(javax.swing.AbstractButton)

    /// protected void com.apple.laf.AquaButtonUI.installHierListener(javax.swing.AbstractButton)

    private static var installHierListener_MethodID_22: jmethodID?

    open func installHierListener( arg0: javax_swing.AbstractButton? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installHierListener", methodSig: "(Ljavax/swing/AbstractButton;)V", methodCache: &AquaButtonUI.installHierListener_MethodID_22, args: &__args, locals: &__locals )
    }

    open func installHierListener( _ _arg0: javax_swing.AbstractButton? ) {
        installHierListener( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaButtonUI.uninstallHierListener(javax.swing.AbstractButton)

    private static var uninstallHierListener_MethodID_23: jmethodID?

    open func uninstallHierListener( arg0: javax_swing.AbstractButton? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallHierListener", methodSig: "(Ljavax/swing/AbstractButton;)V", methodCache: &AquaButtonUI.uninstallHierListener_MethodID_23, args: &__args, locals: &__locals )
    }

    open func uninstallHierListener( _ _arg0: javax_swing.AbstractButton? ) {
        uninstallHierListener( arg0: _arg0 )
    }

}
