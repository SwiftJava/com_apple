
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:52:04 GMT 2016 ///

/// interface com.apple.eawt.AppForegroundListener ///

public protocol AppForegroundListener: AppEventListener {

    /// public abstract void com.apple.eawt.AppForegroundListener.appMovedToBackground(com.apple.eawt.AppEvent$AppForegroundEvent)

    func appMovedToBackground( arg0: AppEvent_AppForegroundEvent? )
    func appMovedToBackground( _ _arg0: AppEvent_AppForegroundEvent? )

    /// public abstract void com.apple.eawt.AppForegroundListener.appRaisedToForeground(com.apple.eawt.AppEvent$AppForegroundEvent)

    func appRaisedToForeground( arg0: AppEvent_AppForegroundEvent? )
    func appRaisedToForeground( _ _arg0: AppEvent_AppForegroundEvent? )

}

open class AppForegroundListenerForward: AppEventListenerForward, AppForegroundListener {

    private static var AppForegroundListenerJNIClass: jclass?

    /// public abstract void com.apple.eawt.AppForegroundListener.appMovedToBackground(com.apple.eawt.AppEvent$AppForegroundEvent)

    private static var appMovedToBackground_MethodID_3: jmethodID?

    open func appMovedToBackground( arg0: AppEvent_AppForegroundEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "appMovedToBackground", methodSig: "(Lcom/apple/eawt/AppEvent$AppForegroundEvent;)V", methodCache: &AppForegroundListenerForward.appMovedToBackground_MethodID_3, args: &__args, locals: &__locals )
    }

    open func appMovedToBackground( _ _arg0: AppEvent_AppForegroundEvent? ) {
        appMovedToBackground( arg0: _arg0 )
    }

    /// public abstract void com.apple.eawt.AppForegroundListener.appRaisedToForeground(com.apple.eawt.AppEvent$AppForegroundEvent)

    private static var appRaisedToForeground_MethodID_4: jmethodID?

    open func appRaisedToForeground( arg0: AppEvent_AppForegroundEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "appRaisedToForeground", methodSig: "(Lcom/apple/eawt/AppEvent$AppForegroundEvent;)V", methodCache: &AppForegroundListenerForward.appRaisedToForeground_MethodID_4, args: &__args, locals: &__locals )
    }

    open func appRaisedToForeground( _ _arg0: AppEvent_AppForegroundEvent? ) {
        appRaisedToForeground( arg0: _arg0 )
    }

}


private typealias AppForegroundListener_appMovedToBackground_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func AppForegroundListener_appMovedToBackground_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    AppForegroundListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).appMovedToBackground( arg0 != nil ? AppEvent_AppForegroundEvent( javaObject: arg0 ) : nil )
}

private typealias AppForegroundListener_appRaisedToForeground_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func AppForegroundListener_appRaisedToForeground_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    AppForegroundListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).appRaisedToForeground( arg0 != nil ? AppEvent_AppForegroundEvent( javaObject: arg0 ) : nil )
}

open class AppForegroundListenerBase: JNIObjectProxy, AppForegroundListener {

    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let AppForegroundListener_appMovedToBackground_0_thunk: AppForegroundListener_appMovedToBackground_0_type = AppForegroundListener_appMovedToBackground_0
            natives.append( JNINativeMethod( name: strdup("__appMovedToBackground"), signature: strdup("(Lcom/apple/eawt/AppEvent$AppForegroundEvent;)V"), fnPtr: unsafeBitCast( AppForegroundListener_appMovedToBackground_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let AppForegroundListener_appRaisedToForeground_1_thunk: AppForegroundListener_appRaisedToForeground_1_type = AppForegroundListener_appRaisedToForeground_1
            natives.append( JNINativeMethod( name: strdup("__appRaisedToForeground"), signature: strdup("(Lcom/apple/eawt/AppEvent$AppForegroundEvent;)V"), fnPtr: unsafeBitCast( AppForegroundListener_appRaisedToForeground_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/com_apple/AppForegroundListenerProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    public convenience init() {
        self.init( javaObject: nil )
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
        AppForegroundListenerBase.registerNatives()
        createProxy( javaClassName: "org/genie/com_apple/AppForegroundListenerProxy" )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> AppForegroundListenerBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: AppForegroundListenerBase.self )
    }

    /// public abstract void com.apple.eawt.AppForegroundListener.appMovedToBackground(com.apple.eawt.AppEvent$AppForegroundEvent)

    open func appMovedToBackground( arg0: AppEvent_AppForegroundEvent? ) /**/ {
    }

    open func appMovedToBackground( _ _arg0: AppEvent_AppForegroundEvent? ) /**/ {
        appMovedToBackground( arg0: _arg0 )
    }

    /// public abstract void com.apple.eawt.AppForegroundListener.appRaisedToForeground(com.apple.eawt.AppEvent$AppForegroundEvent)

    open func appRaisedToForeground( arg0: AppEvent_AppForegroundEvent? ) /**/ {
    }

    open func appRaisedToForeground( _ _arg0: AppEvent_AppForegroundEvent? ) /**/ {
        appRaisedToForeground( arg0: _arg0 )
    }

}
