
import java_swift
import java_lang
import java_awt
import javax_swing

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:52:06 GMT 2016 ///

/// class com.apple.laf.AquaMenuPainter ///

open class AquaMenuPainter: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "com.apple.laf.AquaMenuPainter", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaMenuPainterJNIClass: jclass?

    /// static final byte com.apple.laf.AquaMenuPainter.kShiftGlyph

    /// static final byte com.apple.laf.AquaMenuPainter.kOptionGlyph

    /// static final byte com.apple.laf.AquaMenuPainter.kControlGlyph

    /// static final byte com.apple.laf.AquaMenuPainter.kPencilGlyph

    /// static final byte com.apple.laf.AquaMenuPainter.kCommandMark

    /// static final char com.apple.laf.AquaMenuPainter.kUBlackDiamond

    /// static final char com.apple.laf.AquaMenuPainter.kUCheckMark

    /// static final char com.apple.laf.AquaMenuPainter.kUControlGlyph

    /// static final char com.apple.laf.AquaMenuPainter.kUOptionGlyph

    /// static final char com.apple.laf.AquaMenuPainter.kUEnterGlyph

    /// static final char com.apple.laf.AquaMenuPainter.kUCommandGlyph

    /// static final char com.apple.laf.AquaMenuPainter.kULeftDeleteGlyph

    /// static final char com.apple.laf.AquaMenuPainter.kURightDeleteGlyph

    /// static final char com.apple.laf.AquaMenuPainter.kUShiftGlyph

    /// static final char com.apple.laf.AquaMenuPainter.kUCapsLockGlyph

    /// static final int com.apple.laf.AquaMenuPainter.ALT_GRAPH_MASK

    /// static final int com.apple.laf.AquaMenuPainter.sUnsupportedModifiersMask

    /// static final com.apple.laf.AquaUtils$LazySingleton com.apple.laf.AquaMenuPainter.sPainter

    /// static final int com.apple.laf.AquaMenuPainter.defaultMenuItemGap

    /// static final int com.apple.laf.AquaMenuPainter.kAcceleratorArrowSpace

    /// protected final com.apple.laf.AquaMenuPainter$LazyBorder com.apple.laf.AquaMenuPainter.menuBarPainter

    private static var menuBarPainter_FieldID: jfieldID?

    open var menuBarPainter: /* com.apple.laf.AquaMenuPainter$LazyBorder */ UnclassedObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "menuBarPainter", fieldType: "Lcom/apple/laf/AquaMenuPainter$LazyBorder;", fieldCache: &AquaMenuPainter.menuBarPainter_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? /* com.apple.laf.AquaMenuPainter$LazyBorder */ UnclassedObject( javaObject: __value ) : nil
        }
    }

    /// protected final com.apple.laf.AquaMenuPainter$LazyBorder com.apple.laf.AquaMenuPainter.selectedMenuBarItemPainter

    private static var selectedMenuBarItemPainter_FieldID: jfieldID?

    open var selectedMenuBarItemPainter: /* com.apple.laf.AquaMenuPainter$LazyBorder */ UnclassedObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "selectedMenuBarItemPainter", fieldType: "Lcom/apple/laf/AquaMenuPainter$LazyBorder;", fieldCache: &AquaMenuPainter.selectedMenuBarItemPainter_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? /* com.apple.laf.AquaMenuPainter$LazyBorder */ UnclassedObject( javaObject: __value ) : nil
        }
    }

    /// protected final com.apple.laf.AquaMenuPainter$LazyBorder com.apple.laf.AquaMenuPainter.selectedMenuItemPainter

    private static var selectedMenuItemPainter_FieldID: jfieldID?

    open var selectedMenuItemPainter: /* com.apple.laf.AquaMenuPainter$LazyBorder */ UnclassedObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "selectedMenuItemPainter", fieldType: "Lcom/apple/laf/AquaMenuPainter$LazyBorder;", fieldCache: &AquaMenuPainter.selectedMenuItemPainter_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? /* com.apple.laf.AquaMenuPainter$LazyBorder */ UnclassedObject( javaObject: __value ) : nil
        }
    }

    /// public com.apple.laf.AquaMenuPainter()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaMenuPainter", classCache: &AquaMenuPainter.AquaMenuPainterJNIClass, methodSig: "()V", methodCache: &AquaMenuPainter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// static com.apple.laf.AquaMenuPainter com.apple.laf.AquaMenuPainter.instance()

    /// public void com.apple.laf.AquaMenuPainter.drawString(java.awt.Graphics,java.lang.String,int,int,int,boolean,boolean)

    private static var drawString_MethodID_2: jmethodID?

    open func drawString( arg0: java_awt.Graphics?, arg1: String?, arg2: Int, arg3: Int, arg4: Int, arg5: Bool, arg6: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "drawString", methodSig: "(Ljava/awt/Graphics;Ljava/lang/String;IIIZZ)V", methodCache: &AquaMenuPainter.drawString_MethodID_2, args: &__args, locals: &__locals )
    }

    open func drawString( _ _arg0: java_awt.Graphics?, _ _arg1: String?, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Bool, _ _arg6: Bool ) {
        drawString( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// protected void com.apple.laf.AquaMenuPainter.paintIcon(java.awt.Graphics,javax.swing.JMenuItem,java.awt.Rectangle,boolean)

    private static var paintIcon_MethodID_3: jmethodID?

    open func paintIcon( arg0: java_awt.Graphics?, arg1: javax_swing.JMenuItem?, arg2: java_awt.Rectangle?, arg3: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintIcon", methodSig: "(Ljava/awt/Graphics;Ljavax/swing/JMenuItem;Ljava/awt/Rectangle;Z)V", methodCache: &AquaMenuPainter.paintIcon_MethodID_3, args: &__args, locals: &__locals )
    }

    open func paintIcon( _ _arg0: java_awt.Graphics?, _ _arg1: javax_swing.JMenuItem?, _ _arg2: java_awt.Rectangle?, _ _arg3: Bool ) {
        paintIcon( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// static java.lang.String com.apple.laf.AquaMenuPainter.getKeyModifiersText(int,boolean)

    /// public void com.apple.laf.AquaMenuPainter.paintSelectedMenuItemBackground(java.awt.Graphics,int,int)

    private static var paintSelectedMenuItemBackground_MethodID_4: jmethodID?

    open func paintSelectedMenuItemBackground( arg0: java_awt.Graphics?, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintSelectedMenuItemBackground", methodSig: "(Ljava/awt/Graphics;II)V", methodCache: &AquaMenuPainter.paintSelectedMenuItemBackground_MethodID_4, args: &__args, locals: &__locals )
    }

    open func paintSelectedMenuItemBackground( _ _arg0: java_awt.Graphics?, _ _arg1: Int, _ _arg2: Int ) {
        paintSelectedMenuItemBackground( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public static javax.swing.border.Border com.apple.laf.AquaMenuPainter.getMenuBarPainter()

    private static var getMenuBarPainter_MethodID_5: jmethodID?

    open class func getMenuBarPainter() -> javax_swing.Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaMenuPainter", classCache: &AquaMenuPainterJNIClass, methodName: "getMenuBarPainter", methodSig: "()Ljavax/swing/border/Border;", methodCache: &getMenuBarPainter_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.BorderForward( javaObject: __return ) : nil
    }


    /// public static javax.swing.border.Border com.apple.laf.AquaMenuPainter.getSelectedMenuBarItemPainter()

    private static var getSelectedMenuBarItemPainter_MethodID_6: jmethodID?

    open class func getSelectedMenuBarItemPainter() -> javax_swing.Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaMenuPainter", classCache: &AquaMenuPainterJNIClass, methodName: "getSelectedMenuBarItemPainter", methodSig: "()Ljavax/swing/border/Border;", methodCache: &getSelectedMenuBarItemPainter_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.BorderForward( javaObject: __return ) : nil
    }


    /// public static javax.swing.border.Border com.apple.laf.AquaMenuPainter.getSelectedMenuItemPainter()

    private static var getSelectedMenuItemPainter_MethodID_7: jmethodID?

    open class func getSelectedMenuItemPainter() -> javax_swing.Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaMenuPainter", classCache: &AquaMenuPainterJNIClass, methodName: "getSelectedMenuItemPainter", methodSig: "()Ljavax/swing/border/Border;", methodCache: &getSelectedMenuItemPainter_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.BorderForward( javaObject: __return ) : nil
    }


    /// public void com.apple.laf.AquaMenuPainter.paintMenuBarBackground(java.awt.Graphics,int,int,javax.swing.JComponent)

    private static var paintMenuBarBackground_MethodID_8: jmethodID?

    open func paintMenuBarBackground( arg0: java_awt.Graphics?, arg1: Int, arg2: Int, arg3: javax_swing.JComponent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintMenuBarBackground", methodSig: "(Ljava/awt/Graphics;IILjavax/swing/JComponent;)V", methodCache: &AquaMenuPainter.paintMenuBarBackground_MethodID_8, args: &__args, locals: &__locals )
    }

    open func paintMenuBarBackground( _ _arg0: java_awt.Graphics?, _ _arg1: Int, _ _arg2: Int, _ _arg3: javax_swing.JComponent? ) {
        paintMenuBarBackground( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// protected void com.apple.laf.AquaMenuPainter.paintMenuItem(com.apple.laf.AquaMenuPainter$Client,java.awt.Graphics,javax.swing.JComponent,javax.swing.Icon,javax.swing.Icon,java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Color,int,java.awt.Font)

    private static var paintMenuItem_MethodID_9: jmethodID?

    open func paintMenuItem( arg0: /* com.apple.laf.AquaMenuPainter$Client */ UnclassedProtocol?, arg1: java_awt.Graphics?, arg2: javax_swing.JComponent?, arg3: javax_swing.Icon?, arg4: javax_swing.Icon?, arg5: java_awt.Color?, arg6: java_awt.Color?, arg7: java_awt.Color?, arg8: java_awt.Color?, arg9: Int, arg10: java_awt.Font? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 11 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = jvalue( l: arg3?.localJavaObject( &__locals ) )
        __args[4] = jvalue( l: arg4?.localJavaObject( &__locals ) )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        __args[7] = JNIType.encode( value: arg7, locals: &__locals )
        __args[8] = JNIType.encode( value: arg8, locals: &__locals )
        __args[9] = JNIType.encode( value: arg9, locals: &__locals )
        __args[10] = JNIType.encode( value: arg10, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintMenuItem", methodSig: "(Lcom/apple/laf/AquaMenuPainter$Client;Ljava/awt/Graphics;Ljavax/swing/JComponent;Ljavax/swing/Icon;Ljavax/swing/Icon;Ljava/awt/Color;Ljava/awt/Color;Ljava/awt/Color;Ljava/awt/Color;ILjava/awt/Font;)V", methodCache: &AquaMenuPainter.paintMenuItem_MethodID_9, args: &__args, locals: &__locals )
    }

    open func paintMenuItem( _ _arg0: /* com.apple.laf.AquaMenuPainter$Client */ UnclassedProtocol?, _ _arg1: java_awt.Graphics?, _ _arg2: javax_swing.JComponent?, _ _arg3: javax_swing.Icon?, _ _arg4: javax_swing.Icon?, _ _arg5: java_awt.Color?, _ _arg6: java_awt.Color?, _ _arg7: java_awt.Color?, _ _arg8: java_awt.Color?, _ _arg9: Int, _ _arg10: java_awt.Font? ) {
        paintMenuItem( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6, arg7: _arg7, arg8: _arg8, arg9: _arg9, arg10: _arg10 )
    }

    /// protected java.awt.Dimension com.apple.laf.AquaMenuPainter.getPreferredMenuItemSize(javax.swing.JComponent,javax.swing.Icon,javax.swing.Icon,int,java.awt.Font)

    private static var getPreferredMenuItemSize_MethodID_10: jmethodID?

    open func getPreferredMenuItemSize( arg0: javax_swing.JComponent?, arg1: javax_swing.Icon?, arg2: javax_swing.Icon?, arg3: Int, arg4: java_awt.Font? ) -> java_awt.Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        __args[2] = jvalue( l: arg2?.localJavaObject( &__locals ) )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPreferredMenuItemSize", methodSig: "(Ljavax/swing/JComponent;Ljavax/swing/Icon;Ljavax/swing/Icon;ILjava/awt/Font;)Ljava/awt/Dimension;", methodCache: &AquaMenuPainter.getPreferredMenuItemSize_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }

    open func getPreferredMenuItemSize( _ _arg0: javax_swing.JComponent?, _ _arg1: javax_swing.Icon?, _ _arg2: javax_swing.Icon?, _ _arg3: Int, _ _arg4: java_awt.Font? ) -> java_awt.Dimension! {
        return getPreferredMenuItemSize( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// private static boolean com.apple.laf.AquaMenuPainter.isTopLevelMenu(javax.swing.JMenuItem)

    /// private java.lang.String com.apple.laf.AquaMenuPainter.layoutMenuItem(javax.swing.JMenuItem,java.awt.FontMetrics,java.lang.String,java.awt.FontMetrics,java.lang.String,java.lang.String,javax.swing.Icon,javax.swing.Icon,javax.swing.Icon,int,int,int,int,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,int,int)

    /// private static java.lang.String com.apple.laf.AquaMenuPainter.getKeyModifiersUnicode(int,boolean)

    /// public void com.apple.laf.AquaMenuPainter.paintSelectedMenuTitleBackground(java.awt.Graphics,int,int)

    private static var paintSelectedMenuTitleBackground_MethodID_11: jmethodID?

    open func paintSelectedMenuTitleBackground( arg0: java_awt.Graphics?, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintSelectedMenuTitleBackground", methodSig: "(Ljava/awt/Graphics;II)V", methodCache: &AquaMenuPainter.paintSelectedMenuTitleBackground_MethodID_11, args: &__args, locals: &__locals )
    }

    open func paintSelectedMenuTitleBackground( _ _arg0: java_awt.Graphics?, _ _arg1: Int, _ _arg2: Int ) {
        paintSelectedMenuTitleBackground( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// protected void com.apple.laf.AquaMenuPainter.paintCheck(java.awt.Graphics,javax.swing.JMenuItem,javax.swing.Icon,java.awt.Rectangle)

    private static var paintCheck_MethodID_12: jmethodID?

    open func paintCheck( arg0: java_awt.Graphics?, arg1: javax_swing.JMenuItem?, arg2: javax_swing.Icon?, arg3: java_awt.Rectangle? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = jvalue( l: arg2?.localJavaObject( &__locals ) )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintCheck", methodSig: "(Ljava/awt/Graphics;Ljavax/swing/JMenuItem;Ljavax/swing/Icon;Ljava/awt/Rectangle;)V", methodCache: &AquaMenuPainter.paintCheck_MethodID_12, args: &__args, locals: &__locals )
    }

    open func paintCheck( _ _arg0: java_awt.Graphics?, _ _arg1: javax_swing.JMenuItem?, _ _arg2: javax_swing.Icon?, _ _arg3: java_awt.Rectangle? ) {
        paintCheck( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// protected void com.apple.laf.AquaMenuPainter.paintArrow(java.awt.Graphics,javax.swing.JMenuItem,javax.swing.ButtonModel,javax.swing.Icon,java.awt.Rectangle)

    private static var paintArrow_MethodID_13: jmethodID?

    open func paintArrow( arg0: java_awt.Graphics?, arg1: javax_swing.JMenuItem?, arg2: javax_swing.ButtonModel?, arg3: javax_swing.Icon?, arg4: java_awt.Rectangle? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = jvalue( l: arg2?.localJavaObject( &__locals ) )
        __args[3] = jvalue( l: arg3?.localJavaObject( &__locals ) )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintArrow", methodSig: "(Ljava/awt/Graphics;Ljavax/swing/JMenuItem;Ljavax/swing/ButtonModel;Ljavax/swing/Icon;Ljava/awt/Rectangle;)V", methodCache: &AquaMenuPainter.paintArrow_MethodID_13, args: &__args, locals: &__locals )
    }

    open func paintArrow( _ _arg0: java_awt.Graphics?, _ _arg1: javax_swing.JMenuItem?, _ _arg2: javax_swing.ButtonModel?, _ _arg3: javax_swing.Icon?, _ _arg4: java_awt.Rectangle? ) {
        paintArrow( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

}
