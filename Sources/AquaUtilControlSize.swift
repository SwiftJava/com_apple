
import java_swift
import javax_swing
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class com.apple.laf.AquaUtilControlSize ///

open class AquaUtilControlSize: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaUtilControlSizeJNIClass: jclass?

    /// protected static final java.lang.String com.apple.laf.AquaUtilControlSize.CLIENT_PROPERTY_KEY

    // Skipping field: false false false false false true 

    /// protected static final java.lang.String com.apple.laf.AquaUtilControlSize.SYSTEM_PROPERTY_KEY

    // Skipping field: false false false false false true 

    /// protected static final apple.laf.JRSUIConstants$Size com.apple.laf.AquaUtilControlSize.defaultSize

    // Skipping field: false false false false false true 

    /// protected static final com.apple.laf.AquaUtils$RecyclableSingleton com.apple.laf.AquaUtilControlSize.sizeListener

    // Skipping field: false false false false false true 

    /// public com.apple.laf.AquaUtilControlSize()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaUtilControlSize", classCache: &AquaUtilControlSize.AquaUtilControlSizeJNIClass, methodSig: "()V", methodCache: &AquaUtilControlSize.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// static apple.laf.JRSUIConstants$Size com.apple.laf.AquaUtilControlSize.access$000(java.lang.String)

    // Skipping method: true false false false false 

    /// static void com.apple.laf.AquaUtilControlSize.access$100(javax.swing.JComponent,apple.laf.JRSUIConstants$Size)

    // Skipping method: true false false false false 

    /// static void com.apple.laf.AquaUtilControlSize.access$200(javax.swing.JComponent,apple.laf.JRSUIConstants$Size)

    // Skipping method: true false false false false 

    /// protected static void com.apple.laf.AquaUtilControlSize.addSizePropertyListener(javax.swing.JComponent)

    private static var addSizePropertyListener_MethodID_2: jmethodID?

    open class func addSizePropertyListener( arg0: javax_swing.JComponent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "com/apple/laf/AquaUtilControlSize", classCache: &AquaUtilControlSizeJNIClass, methodName: "addSizePropertyListener", methodSig: "(Ljavax/swing/JComponent;)V", methodCache: &addSizePropertyListener_MethodID_2, args: &__args, locals: &__locals )
    }

    open class func addSizePropertyListener( _ _arg0: javax_swing.JComponent? ) {
        addSizePropertyListener( arg0: _arg0 )
    }

    /// private static void com.apple.laf.AquaUtilControlSize.applyBorderForSize(javax.swing.JComponent,apple.laf.JRSUIConstants$Size)

    /// protected static apple.laf.JRSUIConstants$Size com.apple.laf.AquaUtilControlSize.applySizeForControl(javax.swing.JComponent,com.apple.laf.AquaPainter)

    private static var applySizeForControl_MethodID_3: jmethodID?

    open class func applySizeForControl( arg0: javax_swing.JComponent?, arg1: /* class com.apple.laf.AquaPainter */ UnavailableObject? ) -> /* class apple.laf.JRSUIConstants$Size */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaUtilControlSize", classCache: &AquaUtilControlSizeJNIClass, methodName: "applySizeForControl", methodSig: "(Ljavax/swing/JComponent;Lcom/apple/laf/AquaPainter;)Lapple/laf/JRSUIConstants$Size;", methodCache: &applySizeForControl_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class apple.laf.JRSUIConstants$Size */ UnavailableObject( javaObject: __return ) : nil
    }

    open class func applySizeForControl( _ _arg0: javax_swing.JComponent?, _ _arg1: /* class com.apple.laf.AquaPainter */ UnavailableObject? ) -> /* class apple.laf.JRSUIConstants$Size */ UnavailableObject! {
        return applySizeForControl( arg0: _arg0, arg1: _arg1 )
    }

    /// private static void com.apple.laf.AquaUtilControlSize.applyUISizing(javax.swing.JComponent,apple.laf.JRSUIConstants$Size)

    /// private static apple.laf.JRSUIConstants$Size com.apple.laf.AquaUtilControlSize.getDefaultSize()

    /// protected static java.awt.Font com.apple.laf.AquaUtilControlSize.getFontForSize(java.awt.Component,apple.laf.JRSUIConstants$Size)

    private static var getFontForSize_MethodID_4: jmethodID?

    open class func getFontForSize( arg0: java_awt.Component?, arg1: /* class apple.laf.JRSUIConstants$Size */ UnavailableObject? ) -> java_awt.Font! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaUtilControlSize", classCache: &AquaUtilControlSizeJNIClass, methodName: "getFontForSize", methodSig: "(Ljava/awt/Component;Lapple/laf/JRSUIConstants$Size;)Ljava/awt/Font;", methodCache: &getFontForSize_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Font( javaObject: __return ) : nil
    }

    open class func getFontForSize( _ _arg0: java_awt.Component?, _ _arg1: /* class apple.laf.JRSUIConstants$Size */ UnavailableObject? ) -> java_awt.Font! {
        return getFontForSize( arg0: _arg0, arg1: _arg1 )
    }

    /// private static apple.laf.JRSUIConstants$Size com.apple.laf.AquaUtilControlSize.getSizeFromString(java.lang.String)

    /// protected static com.apple.laf.AquaUtilControlSize$PropertySizeListener com.apple.laf.AquaUtilControlSize.getSizeListener()

    private static var getSizeListener_MethodID_5: jmethodID?

    open class func getSizeListener() -> /* class com.apple.laf.AquaUtilControlSize$PropertySizeListener */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaUtilControlSize", classCache: &AquaUtilControlSizeJNIClass, methodName: "getSizeListener", methodSig: "()Lcom/apple/laf/AquaUtilControlSize$PropertySizeListener;", methodCache: &getSizeListener_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class com.apple.laf.AquaUtilControlSize$PropertySizeListener */ UnavailableObject( javaObject: __return ) : nil
    }


    /// protected static apple.laf.JRSUIConstants$Size com.apple.laf.AquaUtilControlSize.getUserSizeFrom(javax.swing.JComponent)

    private static var getUserSizeFrom_MethodID_6: jmethodID?

    open class func getUserSizeFrom( arg0: javax_swing.JComponent? ) -> /* class apple.laf.JRSUIConstants$Size */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaUtilControlSize", classCache: &AquaUtilControlSizeJNIClass, methodName: "getUserSizeFrom", methodSig: "(Ljavax/swing/JComponent;)Lapple/laf/JRSUIConstants$Size;", methodCache: &getUserSizeFrom_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class apple.laf.JRSUIConstants$Size */ UnavailableObject( javaObject: __return ) : nil
    }

    open class func getUserSizeFrom( _ _arg0: javax_swing.JComponent? ) -> /* class apple.laf.JRSUIConstants$Size */ UnavailableObject! {
        return getUserSizeFrom( arg0: _arg0 )
    }

    /// protected static void com.apple.laf.AquaUtilControlSize.removeSizePropertyListener(javax.swing.JComponent)

    private static var removeSizePropertyListener_MethodID_7: jmethodID?

    open class func removeSizePropertyListener( arg0: javax_swing.JComponent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "com/apple/laf/AquaUtilControlSize", classCache: &AquaUtilControlSizeJNIClass, methodName: "removeSizePropertyListener", methodSig: "(Ljavax/swing/JComponent;)V", methodCache: &removeSizePropertyListener_MethodID_7, args: &__args, locals: &__locals )
    }

    open class func removeSizePropertyListener( _ _arg0: javax_swing.JComponent? ) {
        removeSizePropertyListener( arg0: _arg0 )
    }

}

