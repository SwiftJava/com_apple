
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface com.apple.eawt.AppEventListener ///

public protocol AppEventListener: JavaProtocol {

}


open class AppEventListenerForward: JNIObjectForward, AppEventListener {

    private static var AppEventListenerJNIClass: jclass?

}

fileprivate class AppEventListenerLocal_: JNILocalProxy<AppEventListener, Any> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        withUnsafePointer(to: &natives[0]) {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/com_apple/AppEventListenerProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

extension AppEventListener {

    public func localJavaObject( _ locals: UnsafeMutablePointer<[jobject]> ) -> jobject? {
        return AppEventListenerLocal_( owned: self, proto: self ).localJavaObject( locals )
    }

}

open class AppEventListenerBase: AppEventListener {

    public init() {}

}
