
import java_swift
import javax_swing
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home ///
/// Fri Aug 04 11:17:08 BST 2017 ///

/// class com.apple.laf.AquaButtonBorder ///

open class AquaButtonBorder: AquaBorder {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AquaButtonBorderJNIClass: jclass?

    /// public static final com.apple.laf.AquaUtils$RecyclableSingleton com.apple.laf.AquaButtonBorder.fDynamic

    private static var fDynamic_FieldID: jfieldID?

    open static var fDynamic: /* com.apple.laf.AquaUtils$RecyclableSingleton */ UnclassedObject! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "fDynamic", fieldType: "Lcom/apple/laf/AquaUtils$RecyclableSingleton;", fieldCache: &fDynamic_FieldID, className: "com/apple/laf/AquaButtonBorder", classCache: &AquaButtonBorderJNIClass )
            return __value != nil ? /* com.apple.laf.AquaUtils$RecyclableSingleton */ UnclassedObject( javaObject: __value ) : nil
        }
    }

    /// private static final com.apple.laf.AquaUtils$RecyclableSingleton com.apple.laf.AquaButtonBorder.fToggle

    /// public static final com.apple.laf.AquaUtils$RecyclableSingleton com.apple.laf.AquaButtonBorder.fToolBar

    private static var fToolBar_FieldID: jfieldID?

    open static var fToolBar: /* com.apple.laf.AquaUtils$RecyclableSingleton */ UnclassedObject! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "fToolBar", fieldType: "Lcom/apple/laf/AquaUtils$RecyclableSingleton;", fieldCache: &fToolBar_FieldID, className: "com/apple/laf/AquaButtonBorder", classCache: &AquaButtonBorderJNIClass )
            return __value != nil ? /* com.apple.laf.AquaUtils$RecyclableSingleton */ UnclassedObject( javaObject: __value ) : nil
        }
    }

    /// public static final com.apple.laf.AquaUtils$RecyclableSingleton com.apple.laf.AquaButtonBorder.fBevel

    private static var fBevel_FieldID: jfieldID?

    open static var fBevel: /* com.apple.laf.AquaUtils$RecyclableSingleton */ UnclassedObject! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "fBevel", fieldType: "Lcom/apple/laf/AquaUtils$RecyclableSingleton;", fieldCache: &fBevel_FieldID, className: "com/apple/laf/AquaButtonBorder", classCache: &AquaButtonBorderJNIClass )
            return __value != nil ? /* com.apple.laf.AquaUtils$RecyclableSingleton */ UnclassedObject( javaObject: __value ) : nil
        }
    }

    /// protected final com.apple.laf.AquaPainter com.apple.laf.AquaBorder.painter

    private static var painter_FieldID: jfieldID?

    override open var painter: /* com.apple.laf.AquaPainter */ UnclassedObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "painter", fieldType: "Lcom/apple/laf/AquaPainter;", fieldCache: &AquaButtonBorder.painter_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? /* com.apple.laf.AquaPainter */ UnclassedObject( javaObject: __value ) : nil
        }
    }

    /// protected final com.apple.laf.AquaUtilControlSize$SizeDescriptor com.apple.laf.AquaBorder.sizeDescriptor

    private static var sizeDescriptor_FieldID: jfieldID?

    override open var sizeDescriptor: AquaUtilControlSize_SizeDescriptor! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "sizeDescriptor", fieldType: "Lcom/apple/laf/AquaUtilControlSize$SizeDescriptor;", fieldCache: &AquaButtonBorder.sizeDescriptor_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? AquaUtilControlSize_SizeDescriptor( javaObject: __value ) : nil
        }
    }

    /// protected com.apple.laf.AquaUtilControlSize$SizeVariant com.apple.laf.AquaBorder.sizeVariant

    private static var sizeVariant_FieldID: jfieldID?

    override open var sizeVariant: AquaUtilControlSize_SizeVariant! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "sizeVariant", fieldType: "Lcom/apple/laf/AquaUtilControlSize$SizeVariant;", fieldCache: &AquaButtonBorder.sizeVariant_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? AquaUtilControlSize_SizeVariant( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue != nil ? newValue! as JNIObject : nil, locals: &__locals )
            JNIField.SetObjectField( fieldName: "sizeVariant", fieldType: "Lcom/apple/laf/AquaUtilControlSize$SizeVariant;", fieldCache: &AquaButtonBorder.sizeVariant_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// public com.apple.laf.AquaButtonBorder(com.apple.laf.AquaUtilControlSize$SizeDescriptor)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: AquaUtilControlSize_SizeDescriptor? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0 != nil ? arg0! as JNIObject : nil, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaButtonBorder", classCache: &AquaButtonBorder.AquaButtonBorderJNIClass, methodSig: "(Lcom/apple/laf/AquaUtilControlSize$SizeDescriptor;)V", methodCache: &AquaButtonBorder.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: AquaUtilControlSize_SizeDescriptor? ) {
        self.init( arg0: _arg0 )
    }

    /// public com.apple.laf.AquaButtonBorder(com.apple.laf.AquaButtonBorder)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: AquaButtonBorder? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0 != nil ? arg0! as JNIObject : nil, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "com/apple/laf/AquaButtonBorder", classCache: &AquaButtonBorder.AquaButtonBorderJNIClass, methodSig: "(Lcom/apple/laf/AquaButtonBorder;)V", methodCache: &AquaButtonBorder.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: AquaButtonBorder? ) {
        self.init( arg0: _arg0 )
    }

    /// protected void com.apple.laf.AquaButtonBorder.doButtonPaint(javax.swing.AbstractButton,javax.swing.ButtonModel,java.awt.Graphics,int,int,int,int)

    private static var doButtonPaint_MethodID_3: jmethodID?

    open func doButtonPaint( arg0: javax_swing.AbstractButton?, arg1: javax_swing.ButtonModel?, arg2: java_awt.Graphics?, arg3: Int, arg4: Int, arg5: Int, arg6: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0 != nil ? arg0! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2 != nil ? arg2! as JNIObject : nil, locals: &__locals )
        __args[3] = JNIType.toJava( value: arg3, locals: &__locals )
        __args[4] = JNIType.toJava( value: arg4, locals: &__locals )
        __args[5] = JNIType.toJava( value: arg5, locals: &__locals )
        __args[6] = JNIType.toJava( value: arg6, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "doButtonPaint", methodSig: "(Ljavax/swing/AbstractButton;Ljavax/swing/ButtonModel;Ljava/awt/Graphics;IIII)V", methodCache: &AquaButtonBorder.doButtonPaint_MethodID_3, args: &__args, locals: &__locals )
    }

    open func doButtonPaint( _ _arg0: javax_swing.AbstractButton?, _ _arg1: javax_swing.ButtonModel?, _ _arg2: java_awt.Graphics?, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int, _ _arg6: Int ) {
        doButtonPaint( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// protected apple.laf.JRSUIConstants$State com.apple.laf.AquaButtonBorder.getButtonState(javax.swing.AbstractButton,javax.swing.ButtonModel)

    private static var getButtonState_MethodID_4: jmethodID?

    open func getButtonState( arg0: javax_swing.AbstractButton?, arg1: javax_swing.ButtonModel? ) -> /* apple.laf.JRSUIConstants$State */ UnclassedObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0 != nil ? arg0! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getButtonState", methodSig: "(Ljavax/swing/AbstractButton;Ljavax/swing/ButtonModel;)Lapple/laf/JRSUIConstants$State;", methodCache: &AquaButtonBorder.getButtonState_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* apple.laf.JRSUIConstants$State */ UnclassedObject( javaObject: __return ) : nil
    }

    open func getButtonState( _ _arg0: javax_swing.AbstractButton?, _ _arg1: javax_swing.ButtonModel? ) -> /* apple.laf.JRSUIConstants$State */ UnclassedObject! {
        return getButtonState( arg0: _arg0, arg1: _arg1 )
    }

    /// public static com.apple.laf.AquaButtonBorder com.apple.laf.AquaButtonBorder.getDynamicButtonBorder()

    private static var getDynamicButtonBorder_MethodID_5: jmethodID?

    open class func getDynamicButtonBorder() -> AquaButtonBorder! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaButtonBorder", classCache: &AquaButtonBorderJNIClass, methodName: "getDynamicButtonBorder", methodSig: "()Lcom/apple/laf/AquaButtonBorder;", methodCache: &getDynamicButtonBorder_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AquaButtonBorder( javaObject: __return ) : nil
    }


    /// public static com.apple.laf.AquaButtonBorder com.apple.laf.AquaButtonBorder.getToggleButtonBorder()

    private static var getToggleButtonBorder_MethodID_6: jmethodID?

    open class func getToggleButtonBorder() -> AquaButtonBorder! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaButtonBorder", classCache: &AquaButtonBorderJNIClass, methodName: "getToggleButtonBorder", methodSig: "()Lcom/apple/laf/AquaButtonBorder;", methodCache: &getToggleButtonBorder_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AquaButtonBorder( javaObject: __return ) : nil
    }


    /// public static javax.swing.border.Border com.apple.laf.AquaButtonBorder.getToolBarButtonBorder()

    private static var getToolBarButtonBorder_MethodID_7: jmethodID?

    open class func getToolBarButtonBorder() -> javax_swing.Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaButtonBorder", classCache: &AquaButtonBorderJNIClass, methodName: "getToolBarButtonBorder", methodSig: "()Ljavax/swing/border/Border;", methodCache: &getToolBarButtonBorder_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? javax_swing.BorderForward( javaObject: __return ) : nil
    }


    /// public static com.apple.laf.AquaButtonBorder com.apple.laf.AquaButtonBorder.getBevelButtonBorder()

    private static var getBevelButtonBorder_MethodID_8: jmethodID?

    open class func getBevelButtonBorder() -> AquaButtonBorder! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "com/apple/laf/AquaButtonBorder", classCache: &AquaButtonBorderJNIClass, methodName: "getBevelButtonBorder", methodSig: "()Lcom/apple/laf/AquaButtonBorder;", methodCache: &getBevelButtonBorder_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AquaButtonBorder( javaObject: __return ) : nil
    }


    /// public void com.apple.laf.AquaButtonBorder.paintButton(java.awt.Component,java.awt.Graphics,int,int,int,int)

    private static var paintButton_MethodID_9: jmethodID?

    open func paintButton( arg0: java_awt.Component?, arg1: java_awt.Graphics?, arg2: Int, arg3: Int, arg4: Int, arg5: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0 != nil ? arg0! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1 != nil ? arg1! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        __args[3] = JNIType.toJava( value: arg3, locals: &__locals )
        __args[4] = JNIType.toJava( value: arg4, locals: &__locals )
        __args[5] = JNIType.toJava( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintButton", methodSig: "(Ljava/awt/Component;Ljava/awt/Graphics;IIII)V", methodCache: &AquaButtonBorder.paintButton_MethodID_9, args: &__args, locals: &__locals )
    }

    open func paintButton( _ _arg0: java_awt.Component?, _ _arg1: java_awt.Graphics?, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int ) {
        paintButton( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// protected boolean com.apple.laf.AquaButtonBorder.isSelectionPressing()

    private static var isSelectionPressing_MethodID_10: jmethodID?

    open func isSelectionPressing() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isSelectionPressing", methodSig: "()Z", methodCache: &AquaButtonBorder.isSelectionPressing_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public boolean com.apple.laf.AquaButtonBorder.hasSmallerInsets(javax.swing.JComponent)

    private static var hasSmallerInsets_MethodID_11: jmethodID?

    open func hasSmallerInsets( arg0: javax_swing.JComponent? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0 != nil ? arg0! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasSmallerInsets", methodSig: "(Ljavax/swing/JComponent;)Z", methodCache: &AquaButtonBorder.hasSmallerInsets_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    open func hasSmallerInsets( _ _arg0: javax_swing.JComponent? ) -> Bool {
        return hasSmallerInsets( arg0: _arg0 )
    }

    /// public java.awt.Insets com.apple.laf.AquaButtonBorder.getContentInsets(javax.swing.AbstractButton,int,int)

    private static var getContentInsets_MethodID_12: jmethodID?

    open func getContentInsets( arg0: javax_swing.AbstractButton?, arg1: Int, arg2: Int ) -> java_awt.Insets! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0 != nil ? arg0! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getContentInsets", methodSig: "(Ljavax/swing/AbstractButton;II)Ljava/awt/Insets;", methodCache: &AquaButtonBorder.getContentInsets_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Insets( javaObject: __return ) : nil
    }

    open func getContentInsets( _ _arg0: javax_swing.AbstractButton?, _ _arg1: Int, _ _arg2: Int ) -> java_awt.Insets! {
        return getContentInsets( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void com.apple.laf.AquaButtonBorder.alterPreferredSize(java.awt.Dimension)

    private static var alterPreferredSize_MethodID_13: jmethodID?

    open func alterPreferredSize( arg0: java_awt.Dimension? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: arg0 != nil ? arg0! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "alterPreferredSize", methodSig: "(Ljava/awt/Dimension;)V", methodCache: &AquaButtonBorder.alterPreferredSize_MethodID_13, args: &__args, locals: &__locals )
    }

    open func alterPreferredSize( _ _arg0: java_awt.Dimension? ) {
        alterPreferredSize( arg0: _arg0 )
    }

    /// public void com.apple.laf.AquaButtonBorder.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)

    /// public boolean com.apple.laf.AquaButtonBorder.isBorderOpaque()

    /// public java.awt.Insets com.apple.laf.AquaButtonBorder.getBorderInsets(java.awt.Component)

    /// In declared protocol but not defined.. ///

    /// public abstract boolean javax.swing.border.Border.isBorderOpaque()

    /// public abstract java.awt.Insets javax.swing.border.Border.getBorderInsets(java.awt.Component)

    private static var getBorderInsets_MethodID_14: jmethodID?

    override open func getBorderInsets( c: java_awt.Component? ) -> java_awt.Insets! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: c != nil ? c! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBorderInsets", methodSig: "(Ljava/awt/Component;)Ljava/awt/Insets;", methodCache: &AquaButtonBorder.getBorderInsets_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Insets( javaObject: __return ) : nil
    }

    override open func getBorderInsets( _ _c: java_awt.Component? ) -> java_awt.Insets! {
        return getBorderInsets( c: _c )
    }

    /// public abstract void javax.swing.border.Border.paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)

    private static var paintBorder_MethodID_15: jmethodID?

    override open func paintBorder( c: java_awt.Component?, g: java_awt.Graphics?, x: Int, y: Int, width: Int, height: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: c != nil ? c! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: g != nil ? g! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: x, locals: &__locals )
        __args[3] = JNIType.toJava( value: y, locals: &__locals )
        __args[4] = JNIType.toJava( value: width, locals: &__locals )
        __args[5] = JNIType.toJava( value: height, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintBorder", methodSig: "(Ljava/awt/Component;Ljava/awt/Graphics;IIII)V", methodCache: &AquaButtonBorder.paintBorder_MethodID_15, args: &__args, locals: &__locals )
    }

    override open func paintBorder( _ _c: java_awt.Component?, _ _g: java_awt.Graphics?, _ _x: Int, _ _y: Int, _ _width: Int, _ _height: Int ) {
        paintBorder( c: _c, g: _g, x: _x, y: _y, width: _width, height: _height )
    }

}

